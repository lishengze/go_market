// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MarketServiceClient is the client API for MarketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketServiceClient interface {
	RequestHistKlineData(ctx context.Context, in *ReqHishKlineInfo, opts ...grpc.CallOption) (*HistKlineData, error)
	RequestTradeData(ctx context.Context, in *ReqTradeInfo, opts ...grpc.CallOption) (*Trade, error)
}

type marketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketServiceClient(cc grpc.ClientConnInterface) MarketServiceClient {
	return &marketServiceClient{cc}
}

func (c *marketServiceClient) RequestHistKlineData(ctx context.Context, in *ReqHishKlineInfo, opts ...grpc.CallOption) (*HistKlineData, error) {
	out := new(HistKlineData)
	err := c.cc.Invoke(ctx, "/Proto3.MarketData.MarketService/RequestHistKlineData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketServiceClient) RequestTradeData(ctx context.Context, in *ReqTradeInfo, opts ...grpc.CallOption) (*Trade, error) {
	out := new(Trade)
	err := c.cc.Invoke(ctx, "/Proto3.MarketData.MarketService/RequestTradeData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketServiceServer is the server API for MarketService service.
// All implementations must embed UnimplementedMarketServiceServer
// for forward compatibility
type MarketServiceServer interface {
	RequestHistKlineData(context.Context, *ReqHishKlineInfo) (*HistKlineData, error)
	RequestTradeData(context.Context, *ReqTradeInfo) (*Trade, error)
	mustEmbedUnimplementedMarketServiceServer()
}

// UnimplementedMarketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMarketServiceServer struct {
}

func (*UnimplementedMarketServiceServer) RequestHistKlineData(context.Context, *ReqHishKlineInfo) (*HistKlineData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestHistKlineData not implemented")
}
func (*UnimplementedMarketServiceServer) RequestTradeData(context.Context, *ReqTradeInfo) (*Trade, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestTradeData not implemented")
}
func (*UnimplementedMarketServiceServer) mustEmbedUnimplementedMarketServiceServer() {}

func RegisterMarketServiceServer(s *grpc.Server, srv MarketServiceServer) {
	s.RegisterService(&_MarketService_serviceDesc, srv)
}

func _MarketService_RequestHistKlineData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHishKlineInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServiceServer).RequestHistKlineData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Proto3.MarketData.MarketService/RequestHistKlineData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServiceServer).RequestHistKlineData(ctx, req.(*ReqHishKlineInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketService_RequestTradeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqTradeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServiceServer).RequestTradeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Proto3.MarketData.MarketService/RequestTradeData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServiceServer).RequestTradeData(ctx, req.(*ReqTradeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _MarketService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Proto3.MarketData.MarketService",
	HandlerType: (*MarketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestHistKlineData",
			Handler:    _MarketService_RequestHistKlineData_Handler,
		},
		{
			MethodName: "RequestTradeData",
			Handler:    _MarketService_RequestTradeData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "marketData.proto",
}
