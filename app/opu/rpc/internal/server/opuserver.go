// Code generated by goctl. DO NOT EDIT!
// Source: opu.proto

package server

import (
	"context"

	"exterior-interactor/app/opu/rpc/internal/logic"
	"exterior-interactor/app/opu/rpc/internal/svc"
	"exterior-interactor/app/opu/rpc/opupb"
)

type OpuServer struct {
	svcCtx *svc.ServiceContext
	opupb.UnimplementedOpuServer
}

func NewOpuServer(svcCtx *svc.ServiceContext) *OpuServer {
	return &OpuServer{
		svcCtx: svcCtx,
	}
}

func (s *OpuServer) GetSymbol(ctx context.Context, in *opupb.GetSymbolReq) (*opupb.GetSymbolRsp, error) {
	l := logic.NewGetSymbolLogic(ctx, s.svcCtx)
	return l.GetSymbol(in)
}

func (s *OpuServer) RegisterAccount(ctx context.Context, in *opupb.RegisterAccountReq) (*opupb.RegisterAccountRsp, error) {
	l := logic.NewRegisterAccountLogic(ctx, s.svcCtx)
	return l.RegisterAccount(in)
}

func (s *OpuServer) UpdateAccount(ctx context.Context, in *opupb.UpdateAccountReq) (*opupb.EmptyRsp, error) {
	l := logic.NewUpdateAccountLogic(ctx, s.svcCtx)
	return l.UpdateAccount(in)
}

func (s *OpuServer) GetAccount(ctx context.Context, in *opupb.GetAccountReq) (*opupb.GetAccountRsp, error) {
	l := logic.NewGetAccountLogic(ctx, s.svcCtx)
	return l.GetAccount(in)
}

func (s *OpuServer) QueryOrder(ctx context.Context, in *opupb.QueryOrderReq) (*opupb.QueryOrderRsp, error) {
	l := logic.NewQueryOrderLogic(ctx, s.svcCtx)
	return l.QueryOrder(in)
}

func (s *OpuServer) QueryTrade(ctx context.Context, in *opupb.QueryTradeReq) (*opupb.QueryTradeRsp, error) {
	l := logic.NewQueryTradeLogic(ctx, s.svcCtx)
	return l.QueryTrade(in)
}

func (s *OpuServer) PlaceOrder(ctx context.Context, in *opupb.PlaceOrderReq) (*opupb.EmptyRsp, error) {
	l := logic.NewPlaceOrderLogic(ctx, s.svcCtx)
	return l.PlaceOrder(in)
}

func (s *OpuServer) CancelOrder(ctx context.Context, in *opupb.CancelOrderReq) (*opupb.EmptyRsp, error) {
	l := logic.NewCancelOrderLogic(ctx, s.svcCtx)
	return l.CancelOrder(in)
}

func (s *OpuServer) QueryBalance(ctx context.Context, in *opupb.QueryBalanceReq) (*opupb.QueryBalanceRsp, error) {
	l := logic.NewQueryBalanceLogic(ctx, s.svcCtx)
	return l.QueryBalance(in)
}
