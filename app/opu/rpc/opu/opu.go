// Code generated by goctl. DO NOT EDIT!
// Source: opu.proto

package opu

import (
	"context"

	"exterior-interactor/app/opu/rpc/opupb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Account            = opupb.Account
	Balance            = opupb.Balance
	BalanceDetail      = opupb.BalanceDetail
	CancelOrderReq     = opupb.CancelOrderReq
	EmptyReq           = opupb.EmptyReq
	EmptyRsp           = opupb.EmptyRsp
	GetAccountReq      = opupb.GetAccountReq
	GetAccountRsp      = opupb.GetAccountRsp
	GetSymbolReq       = opupb.GetSymbolReq
	GetSymbolRsp       = opupb.GetSymbolRsp
	Order              = opupb.Order
	OrderTradesUpdate  = opupb.OrderTradesUpdate
	OrderUpdate        = opupb.OrderUpdate
	PlaceOrderReq      = opupb.PlaceOrderReq
	QueryBalanceReq    = opupb.QueryBalanceReq
	QueryBalanceRsp    = opupb.QueryBalanceRsp
	QueryOrderReq      = opupb.QueryOrderReq
	QueryOrderRsp      = opupb.QueryOrderRsp
	QueryTradeReq      = opupb.QueryTradeReq
	QueryTradeRsp      = opupb.QueryTradeRsp
	RegisterAccountReq = opupb.RegisterAccountReq
	RegisterAccountRsp = opupb.RegisterAccountRsp
	Symbol             = opupb.Symbol
	Trade              = opupb.Trade
	TradesUpdate       = opupb.TradesUpdate
	UpdateAccountReq   = opupb.UpdateAccountReq

	Opu interface {
		GetSymbol(ctx context.Context, in *GetSymbolReq, opts ...grpc.CallOption) (*GetSymbolRsp, error)
		RegisterAccount(ctx context.Context, in *RegisterAccountReq, opts ...grpc.CallOption) (*RegisterAccountRsp, error)
		UpdateAccount(ctx context.Context, in *UpdateAccountReq, opts ...grpc.CallOption) (*EmptyRsp, error)
		GetAccount(ctx context.Context, in *GetAccountReq, opts ...grpc.CallOption) (*GetAccountRsp, error)
		QueryOrder(ctx context.Context, in *QueryOrderReq, opts ...grpc.CallOption) (*QueryOrderRsp, error)
		QueryTrade(ctx context.Context, in *QueryTradeReq, opts ...grpc.CallOption) (*QueryTradeRsp, error)
		PlaceOrder(ctx context.Context, in *PlaceOrderReq, opts ...grpc.CallOption) (*EmptyRsp, error)
		CancelOrder(ctx context.Context, in *CancelOrderReq, opts ...grpc.CallOption) (*EmptyRsp, error)
		QueryBalance(ctx context.Context, in *QueryBalanceReq, opts ...grpc.CallOption) (*QueryBalanceRsp, error)
	}

	defaultOpu struct {
		cli zrpc.Client
	}
)

func NewOpu(cli zrpc.Client) Opu {
	return &defaultOpu{
		cli: cli,
	}
}

func (m *defaultOpu) GetSymbol(ctx context.Context, in *GetSymbolReq, opts ...grpc.CallOption) (*GetSymbolRsp, error) {
	client := opupb.NewOpuClient(m.cli.Conn())
	return client.GetSymbol(ctx, in, opts...)
}

func (m *defaultOpu) RegisterAccount(ctx context.Context, in *RegisterAccountReq, opts ...grpc.CallOption) (*RegisterAccountRsp, error) {
	client := opupb.NewOpuClient(m.cli.Conn())
	return client.RegisterAccount(ctx, in, opts...)
}

func (m *defaultOpu) UpdateAccount(ctx context.Context, in *UpdateAccountReq, opts ...grpc.CallOption) (*EmptyRsp, error) {
	client := opupb.NewOpuClient(m.cli.Conn())
	return client.UpdateAccount(ctx, in, opts...)
}

func (m *defaultOpu) GetAccount(ctx context.Context, in *GetAccountReq, opts ...grpc.CallOption) (*GetAccountRsp, error) {
	client := opupb.NewOpuClient(m.cli.Conn())
	return client.GetAccount(ctx, in, opts...)
}

func (m *defaultOpu) QueryOrder(ctx context.Context, in *QueryOrderReq, opts ...grpc.CallOption) (*QueryOrderRsp, error) {
	client := opupb.NewOpuClient(m.cli.Conn())
	return client.QueryOrder(ctx, in, opts...)
}

func (m *defaultOpu) QueryTrade(ctx context.Context, in *QueryTradeReq, opts ...grpc.CallOption) (*QueryTradeRsp, error) {
	client := opupb.NewOpuClient(m.cli.Conn())
	return client.QueryTrade(ctx, in, opts...)
}

func (m *defaultOpu) PlaceOrder(ctx context.Context, in *PlaceOrderReq, opts ...grpc.CallOption) (*EmptyRsp, error) {
	client := opupb.NewOpuClient(m.cli.Conn())
	return client.PlaceOrder(ctx, in, opts...)
}

func (m *defaultOpu) CancelOrder(ctx context.Context, in *CancelOrderReq, opts ...grpc.CallOption) (*EmptyRsp, error) {
	client := opupb.NewOpuClient(m.cli.Conn())
	return client.CancelOrder(ctx, in, opts...)
}

func (m *defaultOpu) QueryBalance(ctx context.Context, in *QueryBalanceReq, opts ...grpc.CallOption) (*QueryBalanceRsp, error) {
	client := opupb.NewOpuClient(m.cli.Conn())
	return client.QueryBalance(ctx, in, opts...)
}
