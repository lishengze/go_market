// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: opu.proto

package opupb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Symbols defined in public import of google/protobuf/timestamp.proto.

type Timestamp = timestamppb.Timestamp

type GetSymbolReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol   string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`     // 不填获取所有
	Exchange string `protobuf:"bytes,2,opt,name=exchange,proto3" json:"exchange,omitempty"` // 不填获取所有
}

func (x *GetSymbolReq) Reset() {
	*x = GetSymbolReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opu_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSymbolReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSymbolReq) ProtoMessage() {}

func (x *GetSymbolReq) ProtoReflect() protoreflect.Message {
	mi := &file_opu_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSymbolReq.ProtoReflect.Descriptor instead.
func (*GetSymbolReq) Descriptor() ([]byte, []int) {
	return file_opu_proto_rawDescGZIP(), []int{0}
}

func (x *GetSymbolReq) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetSymbolReq) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

type GetSymbolRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbols []*Symbol `protobuf:"bytes,1,rep,name=symbols,proto3" json:"symbols,omitempty"`
}

func (x *GetSymbolRsp) Reset() {
	*x = GetSymbolRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opu_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSymbolRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSymbolRsp) ProtoMessage() {}

func (x *GetSymbolRsp) ProtoReflect() protoreflect.Message {
	mi := &file_opu_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSymbolRsp.ProtoReflect.Descriptor instead.
func (*GetSymbolRsp) Descriptor() ([]byte, []int) {
	return file_opu_proto_rawDescGZIP(), []int{1}
}

func (x *GetSymbolRsp) GetSymbols() []*Symbol {
	if x != nil {
		return x.Symbols
	}
	return nil
}

type Symbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange      string `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	ExFormat      string `protobuf:"bytes,2,opt,name=exFormat,proto3" json:"exFormat,omitempty"`
	StdFormat     string `protobuf:"bytes,3,opt,name=stdFormat,proto3" json:"stdFormat,omitempty"`
	Type          string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	VolumeScale   string `protobuf:"bytes,5,opt,name=volumeScale,proto3" json:"volumeScale,omitempty"` // 下单最小数量间隔
	PriceScale    string `protobuf:"bytes,6,opt,name=priceScale,proto3" json:"priceScale,omitempty"`   // 下单最小价格间隔
	MinVolume     string `protobuf:"bytes,7,opt,name=minVolume,proto3" json:"minVolume,omitempty"`
	ContractSize  string `protobuf:"bytes,11,opt,name=contractSize,proto3" json:"contractSize,omitempty"` // 合约面值
	BaseCurrency  string `protobuf:"bytes,12,opt,name=baseCurrency,proto3" json:"baseCurrency,omitempty"` // 基币
	QuoteCurrency string `protobuf:"bytes,13,opt,name=quoteCurrency,proto3" json:"quoteCurrency,omitempty"`
}

func (x *Symbol) Reset() {
	*x = Symbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opu_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Symbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Symbol) ProtoMessage() {}

func (x *Symbol) ProtoReflect() protoreflect.Message {
	mi := &file_opu_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Symbol.ProtoReflect.Descriptor instead.
func (*Symbol) Descriptor() ([]byte, []int) {
	return file_opu_proto_rawDescGZIP(), []int{2}
}

func (x *Symbol) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Symbol) GetExFormat() string {
	if x != nil {
		return x.ExFormat
	}
	return ""
}

func (x *Symbol) GetStdFormat() string {
	if x != nil {
		return x.StdFormat
	}
	return ""
}

func (x *Symbol) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Symbol) GetVolumeScale() string {
	if x != nil {
		return x.VolumeScale
	}
	return ""
}

func (x *Symbol) GetPriceScale() string {
	if x != nil {
		return x.PriceScale
	}
	return ""
}

func (x *Symbol) GetMinVolume() string {
	if x != nil {
		return x.MinVolume
	}
	return ""
}

func (x *Symbol) GetContractSize() string {
	if x != nil {
		return x.ContractSize
	}
	return ""
}

func (x *Symbol) GetBaseCurrency() string {
	if x != nil {
		return x.BaseCurrency
	}
	return ""
}

func (x *Symbol) GetQuoteCurrency() string {
	if x != nil {
		return x.QuoteCurrency
	}
	return ""
}

type RegisterAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias          string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"` // 唯一
	Key            string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Secret         string `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty"`
	Passphrase     string `protobuf:"bytes,4,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
	Exchange       string `protobuf:"bytes,5,opt,name=exchange,proto3" json:"exchange,omitempty"`
	SubAccountName string `protobuf:"bytes,6,opt,name=sub_account_name,json=subAccountName,proto3" json:"sub_account_name,omitempty"`
}

func (x *RegisterAccountReq) Reset() {
	*x = RegisterAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opu_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAccountReq) ProtoMessage() {}

func (x *RegisterAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_opu_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAccountReq.ProtoReflect.Descriptor instead.
func (*RegisterAccountReq) Descriptor() ([]byte, []int) {
	return file_opu_proto_rawDescGZIP(), []int{3}
}

func (x *RegisterAccountReq) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *RegisterAccountReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RegisterAccountReq) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *RegisterAccountReq) GetPassphrase() string {
	if x != nil {
		return x.Passphrase
	}
	return ""
}

func (x *RegisterAccountReq) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *RegisterAccountReq) GetSubAccountName() string {
	if x != nil {
		return x.SubAccountName
	}
	return ""
}

type RegisterAccountRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *RegisterAccountRsp) Reset() {
	*x = RegisterAccountRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opu_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterAccountRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAccountRsp) ProtoMessage() {}

func (x *RegisterAccountRsp) ProtoReflect() protoreflect.Message {
	mi := &file_opu_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAccountRsp.ProtoReflect.Descriptor instead.
func (*RegisterAccountRsp) Descriptor() ([]byte, []int) {
	return file_opu_proto_rawDescGZIP(), []int{4}
}

func (x *RegisterAccountRsp) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type UpdateAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId      string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` // account_id, account_alias 填一个参数即可, account_id 优先
	AccountAlias   string `protobuf:"bytes,2,opt,name=account_alias,json=accountAlias,proto3" json:"account_alias,omitempty"`
	Key            string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Secret         string `protobuf:"bytes,4,opt,name=secret,proto3" json:"secret,omitempty"`
	Passphrase     string `protobuf:"bytes,5,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
	Exchange       string `protobuf:"bytes,6,opt,name=exchange,proto3" json:"exchange,omitempty"`
	SubAccountName string `protobuf:"bytes,7,opt,name=sub_account_name,json=subAccountName,proto3" json:"sub_account_name,omitempty"`
}

func (x *UpdateAccountReq) Reset() {
	*x = UpdateAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opu_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountReq) ProtoMessage() {}

func (x *UpdateAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_opu_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountReq.ProtoReflect.Descriptor instead.
func (*UpdateAccountReq) Descriptor() ([]byte, []int) {
	return file_opu_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateAccountReq) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UpdateAccountReq) GetAccountAlias() string {
	if x != nil {
		return x.AccountAlias
	}
	return ""
}

func (x *UpdateAccountReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *UpdateAccountReq) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *UpdateAccountReq) GetPassphrase() string {
	if x != nil {
		return x.Passphrase
	}
	return ""
}

func (x *UpdateAccountReq) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *UpdateAccountReq) GetSubAccountName() string {
	if x != nil {
		return x.SubAccountName
	}
	return ""
}

type GetAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId    string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` // account_id, account_alias 填一个参数即可, account_id 优先，都不填，获取所有
	AccountAlias string `protobuf:"bytes,2,opt,name=account_alias,json=accountAlias,proto3" json:"account_alias,omitempty"`
}

func (x *GetAccountReq) Reset() {
	*x = GetAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opu_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountReq) ProtoMessage() {}

func (x *GetAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_opu_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountReq.ProtoReflect.Descriptor instead.
func (*GetAccountReq) Descriptor() ([]byte, []int) {
	return file_opu_proto_rawDescGZIP(), []int{6}
}

func (x *GetAccountReq) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetAccountReq) GetAccountAlias() string {
	if x != nil {
		return x.AccountAlias
	}
	return ""
}

type GetAccountRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts []*Account `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *GetAccountRsp) Reset() {
	*x = GetAccountRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opu_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountRsp) ProtoMessage() {}

func (x *GetAccountRsp) ProtoReflect() protoreflect.Message {
	mi := &file_opu_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountRsp.ProtoReflect.Descriptor instead.
func (*GetAccountRsp) Descriptor() ([]byte, []int) {
	return file_opu_proto_rawDescGZIP(), []int{7}
}

func (x *GetAccountRsp) GetAccounts() []*Account {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type PlaceOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` // account_id, account_alias 填一个参数即可, account_id 优先
	AccountAlias  string `protobuf:"bytes,2,opt,name=account_alias,json=accountAlias,proto3" json:"account_alias,omitempty"`
	ClientOrderId string `protobuf:"bytes,3,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty"` // 需要 唯一
	StdSymbol     string `protobuf:"bytes,4,opt,name=std_symbol,json=stdSymbol,proto3" json:"std_symbol,omitempty"`
	Volume        string `protobuf:"bytes,5,opt,name=volume,proto3" json:"volume,omitempty"`
	Price         string `protobuf:"bytes,6,opt,name=price,proto3" json:"price,omitempty"`
	Type          string `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"` // LIMIT:限价单
	Side          string `protobuf:"bytes,8,opt,name=side,proto3" json:"side,omitempty"`
}

func (x *PlaceOrderReq) Reset() {
	*x = PlaceOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opu_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceOrderReq) ProtoMessage() {}

func (x *PlaceOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_opu_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceOrderReq.ProtoReflect.Descriptor instead.
func (*PlaceOrderReq) Descriptor() ([]byte, []int) {
	return file_opu_proto_rawDescGZIP(), []int{8}
}

func (x *PlaceOrderReq) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *PlaceOrderReq) GetAccountAlias() string {
	if x != nil {
		return x.AccountAlias
	}
	return ""
}

func (x *PlaceOrderReq) GetClientOrderId() string {
	if x != nil {
		return x.ClientOrderId
	}
	return ""
}

func (x *PlaceOrderReq) GetStdSymbol() string {
	if x != nil {
		return x.StdSymbol
	}
	return ""
}

func (x *PlaceOrderReq) GetVolume() string {
	if x != nil {
		return x.Volume
	}
	return ""
}

func (x *PlaceOrderReq) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *PlaceOrderReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PlaceOrderReq) GetSide() string {
	if x != nil {
		return x.Side
	}
	return ""
}

type CancelOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` // account_id, account_alias 填一个参数即可, account_id 优先
	AccountAlias  string `protobuf:"bytes,2,opt,name=account_alias,json=accountAlias,proto3" json:"account_alias,omitempty"`
	ClientOrderId string `protobuf:"bytes,3,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty"`
}

func (x *CancelOrderReq) Reset() {
	*x = CancelOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opu_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrderReq) ProtoMessage() {}

func (x *CancelOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_opu_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrderReq.ProtoReflect.Descriptor instead.
func (*CancelOrderReq) Descriptor() ([]byte, []int) {
	return file_opu_proto_rawDescGZIP(), []int{9}
}

func (x *CancelOrderReq) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CancelOrderReq) GetAccountAlias() string {
	if x != nil {
		return x.AccountAlias
	}
	return ""
}

func (x *CancelOrderReq) GetClientOrderId() string {
	if x != nil {
		return x.ClientOrderId
	}
	return ""
}

type CancelAllOpenOrdersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId    string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AccountAlias string `protobuf:"bytes,2,opt,name=account_alias,json=accountAlias,proto3" json:"account_alias,omitempty"`
}

func (x *CancelAllOpenOrdersReq) Reset() {
	*x = CancelAllOpenOrdersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opu_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelAllOpenOrdersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelAllOpenOrdersReq) ProtoMessage() {}

func (x *CancelAllOpenOrdersReq) ProtoReflect() protoreflect.Message {
	mi := &file_opu_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelAllOpenOrdersReq.ProtoReflect.Descriptor instead.
func (*CancelAllOpenOrdersReq) Descriptor() ([]byte, []int) {
	return file_opu_proto_rawDescGZIP(), []int{10}
}

func (x *CancelAllOpenOrdersReq) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CancelAllOpenOrdersReq) GetAccountAlias() string {
	if x != nil {
		return x.AccountAlias
	}
	return ""
}

type QueryOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     string   `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` // account_id, account_alias 填一个参数即可, account_id 优先
	AccountAlias  string   `protobuf:"bytes,2,opt,name=account_alias,json=accountAlias,proto3" json:"account_alias,omitempty"`
	ClientOrderId string   `protobuf:"bytes,3,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty"`
	OrderStatuses []string `protobuf:"bytes,4,rep,name=order_statuses,json=orderStatuses,proto3" json:"order_statuses,omitempty"`
}

func (x *QueryOrderReq) Reset() {
	*x = QueryOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opu_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOrderReq) ProtoMessage() {}

func (x *QueryOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_opu_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOrderReq.ProtoReflect.Descriptor instead.
func (*QueryOrderReq) Descriptor() ([]byte, []int) {
	return file_opu_proto_rawDescGZIP(), []int{11}
}

func (x *QueryOrderReq) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *QueryOrderReq) GetAccountAlias() string {
	if x != nil {
		return x.AccountAlias
	}
	return ""
}

func (x *QueryOrderReq) GetClientOrderId() string {
	if x != nil {
		return x.ClientOrderId
	}
	return ""
}

func (x *QueryOrderReq) GetOrderStatuses() []string {
	if x != nil {
		return x.OrderStatuses
	}
	return nil
}

type QueryOrderRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orders []*OrderInfo `protobuf:"bytes,1,rep,name=Orders,proto3" json:"Orders,omitempty"`
}

func (x *QueryOrderRsp) Reset() {
	*x = QueryOrderRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opu_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOrderRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOrderRsp) ProtoMessage() {}

func (x *QueryOrderRsp) ProtoReflect() protoreflect.Message {
	mi := &file_opu_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOrderRsp.ProtoReflect.Descriptor instead.
func (*QueryOrderRsp) Descriptor() ([]byte, []int) {
	return file_opu_proto_rawDescGZIP(), []int{12}
}

func (x *QueryOrderRsp) GetOrders() []*OrderInfo {
	if x != nil {
		return x.Orders
	}
	return nil
}

type QueryTradeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId     string                 `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` // account_id, account_alias 填一个参数即可, account_id 优先
	AccountAlias  string                 `protobuf:"bytes,2,opt,name=account_alias,json=accountAlias,proto3" json:"account_alias,omitempty"`
	ClientOrderId string                 `protobuf:"bytes,3,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty"`
	StdSymbol     string                 `protobuf:"bytes,5,opt,name=std_symbol,json=stdSymbol,proto3" json:"std_symbol,omitempty"`
	StartTime     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *QueryTradeReq) Reset() {
	*x = QueryTradeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opu_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTradeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTradeReq) ProtoMessage() {}

func (x *QueryTradeReq) ProtoReflect() protoreflect.Message {
	mi := &file_opu_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTradeReq.ProtoReflect.Descriptor instead.
func (*QueryTradeReq) Descriptor() ([]byte, []int) {
	return file_opu_proto_rawDescGZIP(), []int{13}
}

func (x *QueryTradeReq) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *QueryTradeReq) GetAccountAlias() string {
	if x != nil {
		return x.AccountAlias
	}
	return ""
}

func (x *QueryTradeReq) GetClientOrderId() string {
	if x != nil {
		return x.ClientOrderId
	}
	return ""
}

func (x *QueryTradeReq) GetStdSymbol() string {
	if x != nil {
		return x.StdSymbol
	}
	return ""
}

func (x *QueryTradeReq) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *QueryTradeReq) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type QueryTradeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId    string   `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` // account_id, account_alias 填一个参数即可, account_id 优先
	AccountAlias string   `protobuf:"bytes,2,opt,name=account_alias,json=accountAlias,proto3" json:"account_alias,omitempty"`
	Order        *Order   `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
	Trades       []*Trade `protobuf:"bytes,4,rep,name=trades,proto3" json:"trades,omitempty"`
}

func (x *QueryTradeRsp) Reset() {
	*x = QueryTradeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opu_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTradeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTradeRsp) ProtoMessage() {}

func (x *QueryTradeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_opu_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTradeRsp.ProtoReflect.Descriptor instead.
func (*QueryTradeRsp) Descriptor() ([]byte, []int) {
	return file_opu_proto_rawDescGZIP(), []int{14}
}

func (x *QueryTradeRsp) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *QueryTradeRsp) GetAccountAlias() string {
	if x != nil {
		return x.AccountAlias
	}
	return ""
}

func (x *QueryTradeRsp) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *QueryTradeRsp) GetTrades() []*Trade {
	if x != nil {
		return x.Trades
	}
	return nil
}

type QueryBalanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId    string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` // account_id, account_alias 填一个参数即可, account_id 优先
	AccountAlias string `protobuf:"bytes,2,opt,name=account_alias,json=accountAlias,proto3" json:"account_alias,omitempty"`
	WalletType   string `protobuf:"bytes,3,opt,name=wallet_type,json=walletType,proto3" json:"wallet_type,omitempty"`
}

func (x *QueryBalanceReq) Reset() {
	*x = QueryBalanceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opu_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryBalanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBalanceReq) ProtoMessage() {}

func (x *QueryBalanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_opu_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBalanceReq.ProtoReflect.Descriptor instead.
func (*QueryBalanceReq) Descriptor() ([]byte, []int) {
	return file_opu_proto_rawDescGZIP(), []int{15}
}

func (x *QueryBalanceReq) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *QueryBalanceReq) GetAccountAlias() string {
	if x != nil {
		return x.AccountAlias
	}
	return ""
}

func (x *QueryBalanceReq) GetWalletType() string {
	if x != nil {
		return x.WalletType
	}
	return ""
}

type QueryBalanceRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balances []*Balance `protobuf:"bytes,1,rep,name=balances,proto3" json:"balances,omitempty"`
}

func (x *QueryBalanceRsp) Reset() {
	*x = QueryBalanceRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opu_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryBalanceRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBalanceRsp) ProtoMessage() {}

func (x *QueryBalanceRsp) ProtoReflect() protoreflect.Message {
	mi := &file_opu_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBalanceRsp.ProtoReflect.Descriptor instead.
func (*QueryBalanceRsp) Descriptor() ([]byte, []int) {
	return file_opu_proto_rawDescGZIP(), []int{16}
}

func (x *QueryBalanceRsp) GetBalances() []*Balance {
	if x != nil {
		return x.Balances
	}
	return nil
}

type EmptyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyReq) Reset() {
	*x = EmptyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opu_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyReq) ProtoMessage() {}

func (x *EmptyReq) ProtoReflect() protoreflect.Message {
	mi := &file_opu_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyReq.ProtoReflect.Descriptor instead.
func (*EmptyReq) Descriptor() ([]byte, []int) {
	return file_opu_proto_rawDescGZIP(), []int{17}
}

type EmptyRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyRsp) Reset() {
	*x = EmptyRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opu_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRsp) ProtoMessage() {}

func (x *EmptyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_opu_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRsp.ProtoReflect.Descriptor instead.
func (*EmptyRsp) Descriptor() ([]byte, []int) {
	return file_opu_proto_rawDescGZIP(), []int{18}
}

type OrderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order  *Order   `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	Trades []*Trade `protobuf:"bytes,2,rep,name=trades,proto3" json:"trades,omitempty"`
}

func (x *OrderInfo) Reset() {
	*x = OrderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opu_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderInfo) ProtoMessage() {}

func (x *OrderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_opu_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderInfo.ProtoReflect.Descriptor instead.
func (*OrderInfo) Descriptor() ([]byte, []int) {
	return file_opu_proto_rawDescGZIP(), []int{19}
}

func (x *OrderInfo) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *OrderInfo) GetTrades() []*Trade {
	if x != nil {
		return x.Trades
	}
	return nil
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountId     string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AccountAlias  string `protobuf:"bytes,3,opt,name=account_alias,json=accountAlias,proto3" json:"account_alias,omitempty"`
	ClientOrderId string `protobuf:"bytes,4,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty"`
	ExOrderId     string `protobuf:"bytes,5,opt,name=ex_order_id,json=exOrderId,proto3" json:"ex_order_id,omitempty"`
	Exchange      string `protobuf:"bytes,6,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Volume        string `protobuf:"bytes,7,opt,name=volume,proto3" json:"volume,omitempty"`
	Price         string `protobuf:"bytes,8,opt,name=price,proto3" json:"price,omitempty"`
	Symbol        string `protobuf:"bytes,9,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Side          string `protobuf:"bytes,10,opt,name=side,proto3" json:"side,omitempty"`
	Status        string `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"` // UNKNOWN:未知类型,若出现需要排查问题 PENDING:未发送到交易所 SENT:交易所已接收 CANCELLING:正在撤单
	// CANCELED:已撤单(终态,需关注已成交数量) REJECTED:拒单/下单失败(终态) FILLED:完全成交(终态) PARTIAL:部分成交
	Type         string                 `protobuf:"bytes,12,opt,name=type,proto3" json:"type,omitempty"` // UNKNOWN:未知类型,若出现需要排查问题 LIMIT:限价单
	FilledVolume string                 `protobuf:"bytes,13,opt,name=filled_volume,json=filledVolume,proto3" json:"filled_volume,omitempty"`
	CreateTime   *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime   *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	RejectReason string                 `protobuf:"bytes,16,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opu_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_opu_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_opu_proto_rawDescGZIP(), []int{20}
}

func (x *Order) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Order) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Order) GetAccountAlias() string {
	if x != nil {
		return x.AccountAlias
	}
	return ""
}

func (x *Order) GetClientOrderId() string {
	if x != nil {
		return x.ClientOrderId
	}
	return ""
}

func (x *Order) GetExOrderId() string {
	if x != nil {
		return x.ExOrderId
	}
	return ""
}

func (x *Order) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Order) GetVolume() string {
	if x != nil {
		return x.Volume
	}
	return ""
}

func (x *Order) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *Order) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Order) GetSide() string {
	if x != nil {
		return x.Side
	}
	return ""
}

func (x *Order) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Order) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Order) GetFilledVolume() string {
	if x != nil {
		return x.FilledVolume
	}
	return ""
}

func (x *Order) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Order) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Order) GetRejectReason() string {
	if x != nil {
		return x.RejectReason
	}
	return ""
}

type Trade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ExTradeId   string                 `protobuf:"bytes,2,opt,name=ex_trade_id,json=exTradeId,proto3" json:"ex_trade_id,omitempty"`
	Volume      string                 `protobuf:"bytes,3,opt,name=volume,proto3" json:"volume,omitempty"`
	Price       string                 `protobuf:"bytes,4,opt,name=price,proto3" json:"price,omitempty"`
	Liquidity   string                 `protobuf:"bytes,5,opt,name=liquidity,proto3" json:"liquidity,omitempty"` // TAKER MAKER
	Fee         string                 `protobuf:"bytes,6,opt,name=fee,proto3" json:"fee,omitempty"`
	FeeCurrency string                 `protobuf:"bytes,7,opt,name=fee_currency,json=feeCurrency,proto3" json:"fee_currency,omitempty"`
	TradeTime   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=trade_time,json=tradeTime,proto3" json:"trade_time,omitempty"`
}

func (x *Trade) Reset() {
	*x = Trade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opu_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_opu_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_opu_proto_rawDescGZIP(), []int{21}
}

func (x *Trade) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Trade) GetExTradeId() string {
	if x != nil {
		return x.ExTradeId
	}
	return ""
}

func (x *Trade) GetVolume() string {
	if x != nil {
		return x.Volume
	}
	return ""
}

func (x *Trade) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *Trade) GetLiquidity() string {
	if x != nil {
		return x.Liquidity
	}
	return ""
}

func (x *Trade) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *Trade) GetFeeCurrency() string {
	if x != nil {
		return x.FeeCurrency
	}
	return ""
}

func (x *Trade) GetTradeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TradeTime
	}
	return nil
}

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Exchange   string                 `protobuf:"bytes,2,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Alias      string                 `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty"`
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opu_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_opu_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_opu_proto_rawDescGZIP(), []int{22}
}

func (x *Account) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Account) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Account) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *Account) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Account) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// OrderTradeUpdate 订单或者成交推送
type OrderTradesUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateType    string                 `protobuf:"bytes,1,opt,name=update_type,json=updateType,proto3" json:"update_type,omitempty"` // 推送的消息类型 TRADE_UPDATE ORDER_UPDATE
	OrderId       string                 `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	AccountId     string                 `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AccountAlias  string                 `protobuf:"bytes,4,opt,name=account_alias,json=accountAlias,proto3" json:"account_alias,omitempty"`
	ClientOrderId string                 `protobuf:"bytes,5,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty"`
	ExOrderId     string                 `protobuf:"bytes,6,opt,name=ex_order_id,json=exOrderId,proto3" json:"ex_order_id,omitempty"`
	Exchange      string                 `protobuf:"bytes,8,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Volume        string                 `protobuf:"bytes,9,opt,name=volume,proto3" json:"volume,omitempty"`
	Price         string                 `protobuf:"bytes,10,opt,name=price,proto3" json:"price,omitempty"`
	Symbol        string                 `protobuf:"bytes,11,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Side          string                 `protobuf:"bytes,12,opt,name=side,proto3" json:"side,omitempty"`
	OrderType     string                 `protobuf:"bytes,13,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`          // UNKNOWN:未知类型,若出现需要排查问题 LIMIT:限价单
	RejectReason  string                 `protobuf:"bytes,14,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"` // 拒单原因
	CreateTime    *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	OrderUpdate   *OrderUpdate           `protobuf:"bytes,16,opt,name=order_update,json=orderUpdate,proto3" json:"order_update,omitempty"`
	TradeUpdate   *TradesUpdate          `protobuf:"bytes,17,opt,name=trade_update,json=tradeUpdate,proto3" json:"trade_update,omitempty"`
}

func (x *OrderTradesUpdate) Reset() {
	*x = OrderTradesUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opu_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderTradesUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderTradesUpdate) ProtoMessage() {}

func (x *OrderTradesUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_opu_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderTradesUpdate.ProtoReflect.Descriptor instead.
func (*OrderTradesUpdate) Descriptor() ([]byte, []int) {
	return file_opu_proto_rawDescGZIP(), []int{23}
}

func (x *OrderTradesUpdate) GetUpdateType() string {
	if x != nil {
		return x.UpdateType
	}
	return ""
}

func (x *OrderTradesUpdate) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OrderTradesUpdate) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *OrderTradesUpdate) GetAccountAlias() string {
	if x != nil {
		return x.AccountAlias
	}
	return ""
}

func (x *OrderTradesUpdate) GetClientOrderId() string {
	if x != nil {
		return x.ClientOrderId
	}
	return ""
}

func (x *OrderTradesUpdate) GetExOrderId() string {
	if x != nil {
		return x.ExOrderId
	}
	return ""
}

func (x *OrderTradesUpdate) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *OrderTradesUpdate) GetVolume() string {
	if x != nil {
		return x.Volume
	}
	return ""
}

func (x *OrderTradesUpdate) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *OrderTradesUpdate) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *OrderTradesUpdate) GetSide() string {
	if x != nil {
		return x.Side
	}
	return ""
}

func (x *OrderTradesUpdate) GetOrderType() string {
	if x != nil {
		return x.OrderType
	}
	return ""
}

func (x *OrderTradesUpdate) GetRejectReason() string {
	if x != nil {
		return x.RejectReason
	}
	return ""
}

func (x *OrderTradesUpdate) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *OrderTradesUpdate) GetOrderUpdate() *OrderUpdate {
	if x != nil {
		return x.OrderUpdate
	}
	return nil
}

func (x *OrderTradesUpdate) GetTradeUpdate() *TradesUpdate {
	if x != nil {
		return x.TradeUpdate
	}
	return nil
}

// 订单更新推送
type OrderUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"` // UNKNOWN:未知类型,若出现需要排查问题 PENDING:未发送到交易所 SENT:交易所已接收 CANCELLING:正在撤单
	// CANCELED:已撤单(终态,需关注已成交数量) REJECTED:拒单/下单失败(终态) FILLED:完全成交(终态) PARTIAL:部分成交
	FilledVolume string                 `protobuf:"bytes,2,opt,name=filled_volume,json=filledVolume,proto3" json:"filled_volume,omitempty"`
	UpdateTime   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	RejectReason string                 `protobuf:"bytes,4,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"` // d订单失败原因
}

func (x *OrderUpdate) Reset() {
	*x = OrderUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opu_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderUpdate) ProtoMessage() {}

func (x *OrderUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_opu_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderUpdate.ProtoReflect.Descriptor instead.
func (*OrderUpdate) Descriptor() ([]byte, []int) {
	return file_opu_proto_rawDescGZIP(), []int{24}
}

func (x *OrderUpdate) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *OrderUpdate) GetFilledVolume() string {
	if x != nil {
		return x.FilledVolume
	}
	return ""
}

func (x *OrderUpdate) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *OrderUpdate) GetRejectReason() string {
	if x != nil {
		return x.RejectReason
	}
	return ""
}

// TradesUpdate 成交推送
type TradesUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ExTradeId   string                 `protobuf:"bytes,2,opt,name=ex_trade_id,json=exTradeId,proto3" json:"ex_trade_id,omitempty"`
	Volume      string                 `protobuf:"bytes,3,opt,name=volume,proto3" json:"volume,omitempty"` // 本次成交数量
	Price       string                 `protobuf:"bytes,4,opt,name=price,proto3" json:"price,omitempty"`
	Liquidity   string                 `protobuf:"bytes,5,opt,name=liquidity,proto3" json:"liquidity,omitempty"`
	TradeFee    string                 `protobuf:"bytes,6,opt,name=trade_fee,json=tradeFee,proto3" json:"trade_fee,omitempty"` // 本笔成交数手续费
	FeeCurrency string                 `protobuf:"bytes,7,opt,name=fee_currency,json=feeCurrency,proto3" json:"fee_currency,omitempty"`
	TradeTime   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=trade_time,json=tradeTime,proto3" json:"trade_time,omitempty"`
}

func (x *TradesUpdate) Reset() {
	*x = TradesUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opu_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesUpdate) ProtoMessage() {}

func (x *TradesUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_opu_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesUpdate.ProtoReflect.Descriptor instead.
func (*TradesUpdate) Descriptor() ([]byte, []int) {
	return file_opu_proto_rawDescGZIP(), []int{25}
}

func (x *TradesUpdate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TradesUpdate) GetExTradeId() string {
	if x != nil {
		return x.ExTradeId
	}
	return ""
}

func (x *TradesUpdate) GetVolume() string {
	if x != nil {
		return x.Volume
	}
	return ""
}

func (x *TradesUpdate) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *TradesUpdate) GetLiquidity() string {
	if x != nil {
		return x.Liquidity
	}
	return ""
}

func (x *TradesUpdate) GetTradeFee() string {
	if x != nil {
		return x.TradeFee
	}
	return ""
}

func (x *TradesUpdate) GetFeeCurrency() string {
	if x != nil {
		return x.FeeCurrency
	}
	return ""
}

func (x *TradesUpdate) GetTradeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TradeTime
	}
	return nil
}

type Balance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletType     string           `protobuf:"bytes,1,opt,name=wallet_type,json=walletType,proto3" json:"wallet_type,omitempty"`
	BalanceDetails []*BalanceDetail `protobuf:"bytes,2,rep,name=balance_details,json=balanceDetails,proto3" json:"balance_details,omitempty"`
}

func (x *Balance) Reset() {
	*x = Balance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opu_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balance) ProtoMessage() {}

func (x *Balance) ProtoReflect() protoreflect.Message {
	mi := &file_opu_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balance.ProtoReflect.Descriptor instead.
func (*Balance) Descriptor() ([]byte, []int) {
	return file_opu_proto_rawDescGZIP(), []int{26}
}

func (x *Balance) GetWalletType() string {
	if x != nil {
		return x.WalletType
	}
	return ""
}

func (x *Balance) GetBalanceDetails() []*BalanceDetail {
	if x != nil {
		return x.BalanceDetails
	}
	return nil
}

type BalanceDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency  string `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	Available string `protobuf:"bytes,2,opt,name=available,proto3" json:"available,omitempty"`
	Total     string `protobuf:"bytes,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *BalanceDetail) Reset() {
	*x = BalanceDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opu_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceDetail) ProtoMessage() {}

func (x *BalanceDetail) ProtoReflect() protoreflect.Message {
	mi := &file_opu_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceDetail.ProtoReflect.Descriptor instead.
func (*BalanceDetail) Descriptor() ([]byte, []int) {
	return file_opu_proto_rawDescGZIP(), []int{27}
}

func (x *BalanceDetail) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BalanceDetail) GetAvailable() string {
	if x != nil {
		return x.Available
	}
	return ""
}

func (x *BalanceDetail) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

var File_opu_proto protoreflect.FileDescriptor

var file_opu_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6f, 0x70, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6f, 0x70, 0x75,
	0x70, 0x62, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x42, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x37, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x27, 0x0a, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x70, 0x75, 0x70, 0x62,
	0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73,
	0x22, 0xc0, 0x02, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x73,
	0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x62, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x24, 0x0a,
	0x0d, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x22, 0xba, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x75, 0x62, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x33, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xe6, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73,
	0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61,
	0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x75, 0x62, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x53,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x22, 0x3b, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x70, 0x75, 0x70, 0x62, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x22, 0xf0, 0x01, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x64, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x69, 0x64, 0x65, 0x22, 0x7c, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x5c, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x6c, 0x6c, 0x4f, 0x70,
	0x65, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x22,
	0xa2, 0x01, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x22, 0x39, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x06, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x70, 0x75, 0x70, 0x62, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22,
	0x8c, 0x02, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x64, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9d,
	0x01, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x73, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x12, 0x22, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6f, 0x70, 0x75, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6f, 0x70, 0x75, 0x70, 0x62,
	0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0x76,
	0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3d, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x08, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x70,
	0x75, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x0a, 0x0a, 0x08, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x22, 0x0a, 0x0a, 0x08, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x73, 0x70, 0x22, 0x55, 0x0a,
	0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6f, 0x70, 0x75, 0x70,
	0x62, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x24,
	0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x6f, 0x70, 0x75, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x06, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x22, 0x89, 0x04, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x65, 0x78,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x22, 0xf3, 0x01, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x65, 0x78,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x78, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x66, 0x65, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc1,
	0x04, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b,
	0x65, 0x78, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69,
	0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x70, 0x75, 0x70,
	0x62, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6f, 0x70, 0x75, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0x85, 0x02, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x65, 0x78, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x46, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66,
	0x65, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x66, 0x65, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x39,
	0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x69, 0x0a, 0x07, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6f, 0x70, 0x75, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x0e, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x22, 0x5f, 0x0a, 0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0xe1, 0x04, 0x0a, 0x03, 0x4f, 0x70, 0x75, 0x12, 0x35, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x13, 0x2e, 0x6f, 0x70, 0x75,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x1a,
	0x13, 0x2e, 0x6f, 0x70, 0x75, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x52, 0x73, 0x70, 0x12, 0x47, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x2e, 0x6f, 0x70, 0x75, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x19, 0x2e, 0x6f, 0x70, 0x75, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x73, 0x70, 0x12, 0x39, 0x0a,
	0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17,
	0x2e, 0x6f, 0x70, 0x75, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x6f, 0x70, 0x75, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x2e, 0x6f, 0x70, 0x75, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x6f,
	0x70, 0x75, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x73, 0x70, 0x12, 0x38, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x14, 0x2e, 0x6f, 0x70, 0x75, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x6f, 0x70, 0x75, 0x70, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x0a,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x14, 0x2e, 0x6f, 0x70, 0x75,
	0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x14, 0x2e, 0x6f, 0x70, 0x75, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x14, 0x2e, 0x6f, 0x70, 0x75, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x6f, 0x70, 0x75,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x0b, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x6f, 0x70, 0x75,
	0x70, 0x62, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x0f, 0x2e, 0x6f, 0x70, 0x75, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x73, 0x70, 0x12, 0x45, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x6c, 0x6c, 0x4f,
	0x70, 0x65, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x2e, 0x6f, 0x70, 0x75, 0x70,
	0x62, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x6c, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x6f, 0x70, 0x75, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x0c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x6f, 0x70, 0x75, 0x70,
	0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x6f, 0x70, 0x75, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x73, 0x70, 0x42, 0x07, 0x5a, 0x05, 0x6f, 0x70, 0x75,
	0x70, 0x62, 0x50, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_opu_proto_rawDescOnce sync.Once
	file_opu_proto_rawDescData = file_opu_proto_rawDesc
)

func file_opu_proto_rawDescGZIP() []byte {
	file_opu_proto_rawDescOnce.Do(func() {
		file_opu_proto_rawDescData = protoimpl.X.CompressGZIP(file_opu_proto_rawDescData)
	})
	return file_opu_proto_rawDescData
}

var file_opu_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_opu_proto_goTypes = []interface{}{
	(*GetSymbolReq)(nil),           // 0: opupb.GetSymbolReq
	(*GetSymbolRsp)(nil),           // 1: opupb.GetSymbolRsp
	(*Symbol)(nil),                 // 2: opupb.Symbol
	(*RegisterAccountReq)(nil),     // 3: opupb.RegisterAccountReq
	(*RegisterAccountRsp)(nil),     // 4: opupb.RegisterAccountRsp
	(*UpdateAccountReq)(nil),       // 5: opupb.UpdateAccountReq
	(*GetAccountReq)(nil),          // 6: opupb.GetAccountReq
	(*GetAccountRsp)(nil),          // 7: opupb.GetAccountRsp
	(*PlaceOrderReq)(nil),          // 8: opupb.PlaceOrderReq
	(*CancelOrderReq)(nil),         // 9: opupb.CancelOrderReq
	(*CancelAllOpenOrdersReq)(nil), // 10: opupb.CancelAllOpenOrdersReq
	(*QueryOrderReq)(nil),          // 11: opupb.QueryOrderReq
	(*QueryOrderRsp)(nil),          // 12: opupb.QueryOrderRsp
	(*QueryTradeReq)(nil),          // 13: opupb.QueryTradeReq
	(*QueryTradeRsp)(nil),          // 14: opupb.QueryTradeRsp
	(*QueryBalanceReq)(nil),        // 15: opupb.QueryBalanceReq
	(*QueryBalanceRsp)(nil),        // 16: opupb.QueryBalanceRsp
	(*EmptyReq)(nil),               // 17: opupb.EmptyReq
	(*EmptyRsp)(nil),               // 18: opupb.EmptyRsp
	(*OrderInfo)(nil),              // 19: opupb.OrderInfo
	(*Order)(nil),                  // 20: opupb.Order
	(*Trade)(nil),                  // 21: opupb.Trade
	(*Account)(nil),                // 22: opupb.Account
	(*OrderTradesUpdate)(nil),      // 23: opupb.OrderTradesUpdate
	(*OrderUpdate)(nil),            // 24: opupb.OrderUpdate
	(*TradesUpdate)(nil),           // 25: opupb.TradesUpdate
	(*Balance)(nil),                // 26: opupb.Balance
	(*BalanceDetail)(nil),          // 27: opupb.BalanceDetail
	(*timestamppb.Timestamp)(nil),  // 28: google.protobuf.Timestamp
}
var file_opu_proto_depIdxs = []int32{
	2,  // 0: opupb.GetSymbolRsp.symbols:type_name -> opupb.Symbol
	22, // 1: opupb.GetAccountRsp.accounts:type_name -> opupb.Account
	19, // 2: opupb.QueryOrderRsp.Orders:type_name -> opupb.OrderInfo
	28, // 3: opupb.QueryTradeReq.start_time:type_name -> google.protobuf.Timestamp
	28, // 4: opupb.QueryTradeReq.end_time:type_name -> google.protobuf.Timestamp
	20, // 5: opupb.QueryTradeRsp.order:type_name -> opupb.Order
	21, // 6: opupb.QueryTradeRsp.trades:type_name -> opupb.Trade
	26, // 7: opupb.QueryBalanceRsp.balances:type_name -> opupb.Balance
	20, // 8: opupb.OrderInfo.order:type_name -> opupb.Order
	21, // 9: opupb.OrderInfo.trades:type_name -> opupb.Trade
	28, // 10: opupb.Order.create_time:type_name -> google.protobuf.Timestamp
	28, // 11: opupb.Order.update_time:type_name -> google.protobuf.Timestamp
	28, // 12: opupb.Trade.trade_time:type_name -> google.protobuf.Timestamp
	28, // 13: opupb.Account.create_time:type_name -> google.protobuf.Timestamp
	28, // 14: opupb.Account.update_time:type_name -> google.protobuf.Timestamp
	28, // 15: opupb.OrderTradesUpdate.create_time:type_name -> google.protobuf.Timestamp
	24, // 16: opupb.OrderTradesUpdate.order_update:type_name -> opupb.OrderUpdate
	25, // 17: opupb.OrderTradesUpdate.trade_update:type_name -> opupb.TradesUpdate
	28, // 18: opupb.OrderUpdate.update_time:type_name -> google.protobuf.Timestamp
	28, // 19: opupb.TradesUpdate.trade_time:type_name -> google.protobuf.Timestamp
	27, // 20: opupb.Balance.balance_details:type_name -> opupb.BalanceDetail
	0,  // 21: opupb.Opu.GetSymbol:input_type -> opupb.GetSymbolReq
	3,  // 22: opupb.Opu.RegisterAccount:input_type -> opupb.RegisterAccountReq
	5,  // 23: opupb.Opu.UpdateAccount:input_type -> opupb.UpdateAccountReq
	6,  // 24: opupb.Opu.GetAccount:input_type -> opupb.GetAccountReq
	11, // 25: opupb.Opu.QueryOrder:input_type -> opupb.QueryOrderReq
	13, // 26: opupb.Opu.QueryTrade:input_type -> opupb.QueryTradeReq
	8,  // 27: opupb.Opu.PlaceOrder:input_type -> opupb.PlaceOrderReq
	9,  // 28: opupb.Opu.CancelOrder:input_type -> opupb.CancelOrderReq
	10, // 29: opupb.Opu.CancelAllOpenOrders:input_type -> opupb.CancelAllOpenOrdersReq
	15, // 30: opupb.Opu.QueryBalance:input_type -> opupb.QueryBalanceReq
	1,  // 31: opupb.Opu.GetSymbol:output_type -> opupb.GetSymbolRsp
	4,  // 32: opupb.Opu.RegisterAccount:output_type -> opupb.RegisterAccountRsp
	18, // 33: opupb.Opu.UpdateAccount:output_type -> opupb.EmptyRsp
	7,  // 34: opupb.Opu.GetAccount:output_type -> opupb.GetAccountRsp
	12, // 35: opupb.Opu.QueryOrder:output_type -> opupb.QueryOrderRsp
	14, // 36: opupb.Opu.QueryTrade:output_type -> opupb.QueryTradeRsp
	18, // 37: opupb.Opu.PlaceOrder:output_type -> opupb.EmptyRsp
	18, // 38: opupb.Opu.CancelOrder:output_type -> opupb.EmptyRsp
	18, // 39: opupb.Opu.CancelAllOpenOrders:output_type -> opupb.EmptyRsp
	16, // 40: opupb.Opu.QueryBalance:output_type -> opupb.QueryBalanceRsp
	31, // [31:41] is the sub-list for method output_type
	21, // [21:31] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_opu_proto_init() }
func file_opu_proto_init() {
	if File_opu_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_opu_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSymbolReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opu_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSymbolRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opu_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Symbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opu_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opu_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterAccountRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opu_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opu_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opu_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opu_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opu_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opu_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelAllOpenOrdersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opu_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opu_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOrderRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opu_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTradeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opu_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTradeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opu_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryBalanceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opu_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryBalanceRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opu_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opu_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opu_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opu_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opu_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opu_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opu_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderTradesUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opu_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opu_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opu_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opu_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_opu_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_opu_proto_goTypes,
		DependencyIndexes: file_opu_proto_depIdxs,
		MessageInfos:      file_opu_proto_msgTypes,
	}.Build()
	File_opu_proto = out.File
	file_opu_proto_rawDesc = nil
	file_opu_proto_goTypes = nil
	file_opu_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OpuClient is the client API for Opu service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OpuClient interface {
	GetSymbol(ctx context.Context, in *GetSymbolReq, opts ...grpc.CallOption) (*GetSymbolRsp, error)
	RegisterAccount(ctx context.Context, in *RegisterAccountReq, opts ...grpc.CallOption) (*RegisterAccountRsp, error)
	UpdateAccount(ctx context.Context, in *UpdateAccountReq, opts ...grpc.CallOption) (*EmptyRsp, error)
	GetAccount(ctx context.Context, in *GetAccountReq, opts ...grpc.CallOption) (*GetAccountRsp, error)
	QueryOrder(ctx context.Context, in *QueryOrderReq, opts ...grpc.CallOption) (*QueryOrderRsp, error)
	QueryTrade(ctx context.Context, in *QueryTradeReq, opts ...grpc.CallOption) (*QueryTradeRsp, error)
	PlaceOrder(ctx context.Context, in *PlaceOrderReq, opts ...grpc.CallOption) (*EmptyRsp, error)
	CancelOrder(ctx context.Context, in *CancelOrderReq, opts ...grpc.CallOption) (*EmptyRsp, error)
	CancelAllOpenOrders(ctx context.Context, in *CancelAllOpenOrdersReq, opts ...grpc.CallOption) (*EmptyRsp, error)
	QueryBalance(ctx context.Context, in *QueryBalanceReq, opts ...grpc.CallOption) (*QueryBalanceRsp, error)
}

type opuClient struct {
	cc grpc.ClientConnInterface
}

func NewOpuClient(cc grpc.ClientConnInterface) OpuClient {
	return &opuClient{cc}
}

func (c *opuClient) GetSymbol(ctx context.Context, in *GetSymbolReq, opts ...grpc.CallOption) (*GetSymbolRsp, error) {
	out := new(GetSymbolRsp)
	err := c.cc.Invoke(ctx, "/opupb.Opu/GetSymbol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opuClient) RegisterAccount(ctx context.Context, in *RegisterAccountReq, opts ...grpc.CallOption) (*RegisterAccountRsp, error) {
	out := new(RegisterAccountRsp)
	err := c.cc.Invoke(ctx, "/opupb.Opu/RegisterAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opuClient) UpdateAccount(ctx context.Context, in *UpdateAccountReq, opts ...grpc.CallOption) (*EmptyRsp, error) {
	out := new(EmptyRsp)
	err := c.cc.Invoke(ctx, "/opupb.Opu/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opuClient) GetAccount(ctx context.Context, in *GetAccountReq, opts ...grpc.CallOption) (*GetAccountRsp, error) {
	out := new(GetAccountRsp)
	err := c.cc.Invoke(ctx, "/opupb.Opu/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opuClient) QueryOrder(ctx context.Context, in *QueryOrderReq, opts ...grpc.CallOption) (*QueryOrderRsp, error) {
	out := new(QueryOrderRsp)
	err := c.cc.Invoke(ctx, "/opupb.Opu/QueryOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opuClient) QueryTrade(ctx context.Context, in *QueryTradeReq, opts ...grpc.CallOption) (*QueryTradeRsp, error) {
	out := new(QueryTradeRsp)
	err := c.cc.Invoke(ctx, "/opupb.Opu/QueryTrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opuClient) PlaceOrder(ctx context.Context, in *PlaceOrderReq, opts ...grpc.CallOption) (*EmptyRsp, error) {
	out := new(EmptyRsp)
	err := c.cc.Invoke(ctx, "/opupb.Opu/PlaceOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opuClient) CancelOrder(ctx context.Context, in *CancelOrderReq, opts ...grpc.CallOption) (*EmptyRsp, error) {
	out := new(EmptyRsp)
	err := c.cc.Invoke(ctx, "/opupb.Opu/CancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opuClient) CancelAllOpenOrders(ctx context.Context, in *CancelAllOpenOrdersReq, opts ...grpc.CallOption) (*EmptyRsp, error) {
	out := new(EmptyRsp)
	err := c.cc.Invoke(ctx, "/opupb.Opu/CancelAllOpenOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opuClient) QueryBalance(ctx context.Context, in *QueryBalanceReq, opts ...grpc.CallOption) (*QueryBalanceRsp, error) {
	out := new(QueryBalanceRsp)
	err := c.cc.Invoke(ctx, "/opupb.Opu/QueryBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpuServer is the server API for Opu service.
type OpuServer interface {
	GetSymbol(context.Context, *GetSymbolReq) (*GetSymbolRsp, error)
	RegisterAccount(context.Context, *RegisterAccountReq) (*RegisterAccountRsp, error)
	UpdateAccount(context.Context, *UpdateAccountReq) (*EmptyRsp, error)
	GetAccount(context.Context, *GetAccountReq) (*GetAccountRsp, error)
	QueryOrder(context.Context, *QueryOrderReq) (*QueryOrderRsp, error)
	QueryTrade(context.Context, *QueryTradeReq) (*QueryTradeRsp, error)
	PlaceOrder(context.Context, *PlaceOrderReq) (*EmptyRsp, error)
	CancelOrder(context.Context, *CancelOrderReq) (*EmptyRsp, error)
	CancelAllOpenOrders(context.Context, *CancelAllOpenOrdersReq) (*EmptyRsp, error)
	QueryBalance(context.Context, *QueryBalanceReq) (*QueryBalanceRsp, error)
}

// UnimplementedOpuServer can be embedded to have forward compatible implementations.
type UnimplementedOpuServer struct {
}

func (*UnimplementedOpuServer) GetSymbol(context.Context, *GetSymbolReq) (*GetSymbolRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSymbol not implemented")
}
func (*UnimplementedOpuServer) RegisterAccount(context.Context, *RegisterAccountReq) (*RegisterAccountRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAccount not implemented")
}
func (*UnimplementedOpuServer) UpdateAccount(context.Context, *UpdateAccountReq) (*EmptyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (*UnimplementedOpuServer) GetAccount(context.Context, *GetAccountReq) (*GetAccountRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (*UnimplementedOpuServer) QueryOrder(context.Context, *QueryOrderReq) (*QueryOrderRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrder not implemented")
}
func (*UnimplementedOpuServer) QueryTrade(context.Context, *QueryTradeReq) (*QueryTradeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTrade not implemented")
}
func (*UnimplementedOpuServer) PlaceOrder(context.Context, *PlaceOrderReq) (*EmptyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceOrder not implemented")
}
func (*UnimplementedOpuServer) CancelOrder(context.Context, *CancelOrderReq) (*EmptyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (*UnimplementedOpuServer) CancelAllOpenOrders(context.Context, *CancelAllOpenOrdersReq) (*EmptyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAllOpenOrders not implemented")
}
func (*UnimplementedOpuServer) QueryBalance(context.Context, *QueryBalanceReq) (*QueryBalanceRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBalance not implemented")
}

func RegisterOpuServer(s *grpc.Server, srv OpuServer) {
	s.RegisterService(&_Opu_serviceDesc, srv)
}

func _Opu_GetSymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSymbolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpuServer).GetSymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opupb.Opu/GetSymbol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpuServer).GetSymbol(ctx, req.(*GetSymbolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Opu_RegisterAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpuServer).RegisterAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opupb.Opu/RegisterAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpuServer).RegisterAccount(ctx, req.(*RegisterAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Opu_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpuServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opupb.Opu/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpuServer).UpdateAccount(ctx, req.(*UpdateAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Opu_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpuServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opupb.Opu/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpuServer).GetAccount(ctx, req.(*GetAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Opu_QueryOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpuServer).QueryOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opupb.Opu/QueryOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpuServer).QueryOrder(ctx, req.(*QueryOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Opu_QueryTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTradeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpuServer).QueryTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opupb.Opu/QueryTrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpuServer).QueryTrade(ctx, req.(*QueryTradeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Opu_PlaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpuServer).PlaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opupb.Opu/PlaceOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpuServer).PlaceOrder(ctx, req.(*PlaceOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Opu_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpuServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opupb.Opu/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpuServer).CancelOrder(ctx, req.(*CancelOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Opu_CancelAllOpenOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelAllOpenOrdersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpuServer).CancelAllOpenOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opupb.Opu/CancelAllOpenOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpuServer).CancelAllOpenOrders(ctx, req.(*CancelAllOpenOrdersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Opu_QueryBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpuServer).QueryBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opupb.Opu/QueryBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpuServer).QueryBalance(ctx, req.(*QueryBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Opu_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opupb.Opu",
	HandlerType: (*OpuServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSymbol",
			Handler:    _Opu_GetSymbol_Handler,
		},
		{
			MethodName: "RegisterAccount",
			Handler:    _Opu_RegisterAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _Opu_UpdateAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _Opu_GetAccount_Handler,
		},
		{
			MethodName: "QueryOrder",
			Handler:    _Opu_QueryOrder_Handler,
		},
		{
			MethodName: "QueryTrade",
			Handler:    _Opu_QueryTrade_Handler,
		},
		{
			MethodName: "PlaceOrder",
			Handler:    _Opu_PlaceOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _Opu_CancelOrder_Handler,
		},
		{
			MethodName: "CancelAllOpenOrders",
			Handler:    _Opu_CancelAllOpenOrders_Handler,
		},
		{
			MethodName: "QueryBalance",
			Handler:    _Opu_QueryBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "opu.proto",
}
