// Code generated by goctl. DO NOT EDIT!
// Source: dataService.proto

package dataservice

import (
	"context"

	"market_server/app/dataService/rpc/types/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CurrencyInfo       = pb.CurrencyInfo
	DSEmpty            = pb.DSEmpty
	DeleteNacosConfig  = pb.DeleteNacosConfig
	GetCurrencyReq     = pb.GetCurrencyReq
	GetCurrencyRsp     = pb.GetCurrencyRsp
	GetSymbolReq       = pb.GetSymbolReq
	GetSymbolRsp       = pb.GetSymbolRsp
	GetUserFeeInfoReq  = pb.GetUserFeeInfoReq
	GetUserFeeInfoRsp  = pb.GetUserFeeInfoRsp
	PublishNacosConfig = pb.PublishNacosConfig
	SymbolInfo         = pb.SymbolInfo

	DataService interface {
		// 获取合约参数
		GetSymbol(ctx context.Context, in *GetSymbolReq, opts ...grpc.CallOption) (*GetSymbolRsp, error)
		// 获取币种参数
		GetCurrency(ctx context.Context, in *GetCurrencyReq, opts ...grpc.CallOption) (*GetCurrencyRsp, error)
		// 获取用户交易手续费
		GetUserFeeInfo(ctx context.Context, in *GetUserFeeInfoReq, opts ...grpc.CallOption) (*GetUserFeeInfoRsp, error)
		// 发布参数
		PublishNacosConfig(ctx context.Context, in *PublishNacosConfig, opts ...grpc.CallOption) (*DSEmpty, error)
		// 删除参数
		DeleteNacosConfig(ctx context.Context, in *DeleteNacosConfig, opts ...grpc.CallOption) (*DSEmpty, error)
	}

	defaultDataService struct {
		cli zrpc.Client
	}
)

func NewDataService(cli zrpc.Client) DataService {
	return &defaultDataService{
		cli: cli,
	}
}

// 获取合约参数
func (m *defaultDataService) GetSymbol(ctx context.Context, in *GetSymbolReq, opts ...grpc.CallOption) (*GetSymbolRsp, error) {
	client := pb.NewDataServiceClient(m.cli.Conn())
	return client.GetSymbol(ctx, in, opts...)
}

// 获取币种参数
func (m *defaultDataService) GetCurrency(ctx context.Context, in *GetCurrencyReq, opts ...grpc.CallOption) (*GetCurrencyRsp, error) {
	client := pb.NewDataServiceClient(m.cli.Conn())
	return client.GetCurrency(ctx, in, opts...)
}

// 获取用户交易手续费
func (m *defaultDataService) GetUserFeeInfo(ctx context.Context, in *GetUserFeeInfoReq, opts ...grpc.CallOption) (*GetUserFeeInfoRsp, error) {
	client := pb.NewDataServiceClient(m.cli.Conn())
	return client.GetUserFeeInfo(ctx, in, opts...)
}

// 发布参数
func (m *defaultDataService) PublishNacosConfig(ctx context.Context, in *PublishNacosConfig, opts ...grpc.CallOption) (*DSEmpty, error) {
	client := pb.NewDataServiceClient(m.cli.Conn())
	return client.PublishNacosConfig(ctx, in, opts...)
}

// 删除参数
func (m *defaultDataService) DeleteNacosConfig(ctx context.Context, in *DeleteNacosConfig, opts ...grpc.CallOption) (*DSEmpty, error) {
	client := pb.NewDataServiceClient(m.cli.Conn())
	return client.DeleteNacosConfig(ctx, in, opts...)
}
