// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: dataService.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DSEmpty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DSEmpty) Reset() {
	*x = DSEmpty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DSEmpty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DSEmpty) ProtoMessage() {}

func (x *DSEmpty) ProtoReflect() protoreflect.Message {
	mi := &file_dataService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DSEmpty.ProtoReflect.Descriptor instead.
func (*DSEmpty) Descriptor() ([]byte, []int) {
	return file_dataService_proto_rawDescGZIP(), []int{0}
}

type SymbolInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolID             string `protobuf:"bytes,1,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`                          //品种代码，如 BTC_USDT
	SymbolKind           int64  `protobuf:"varint,2,opt,name=SymbolKind,proto3" json:"SymbolKind,omitempty"`                     //品种类型，如 1-现货、2-期货等
	Underlying           string `protobuf:"bytes,3,opt,name=Underlying,proto3" json:"Underlying,omitempty"`                      //标的，如 BTC
	PrimaryCurrency      string `protobuf:"bytes,4,opt,name=PrimaryCurrency,proto3" json:"PrimaryCurrency,omitempty"`            //基础货币，如 USDT
	BidCurrency          string `protobuf:"bytes,5,opt,name=BidCurrency,proto3" json:"BidCurrency,omitempty"`                    //报价货币，如 USDT
	SettleCurrency       string `protobuf:"bytes,6,opt,name=SettleCurrency,proto3" json:"SettleCurrency,omitempty"`              //结算货币，如 USDT
	Switch               bool   `protobuf:"varint,7,opt,name=Switch,proto3" json:"Switch,omitempty"`                             //交易开关
	VolumePrecision      int64  `protobuf:"varint,8,opt,name=VolumePrecision,proto3" json:"VolumePrecision,omitempty"`           //数量精度
	PricePrecision       int64  `protobuf:"varint,9,opt,name=PricePrecision,proto3" json:"PricePrecision,omitempty"`             //价格精度
	AmountPrecision      int64  `protobuf:"varint,10,opt,name=AmountPrecision,proto3" json:"AmountPrecision,omitempty"`          //金额精度
	MinUnit              string `protobuf:"bytes,11,opt,name=MinUnit,proto3" json:"MinUnit,omitempty"`                           //最小交易单位
	MinChangePrice       string `protobuf:"bytes,12,opt,name=MinChangePrice,proto3" json:"MinChangePrice,omitempty"`             //最小变动价位
	Spread               string `protobuf:"bytes,13,opt,name=Spread,proto3" json:"Spread,omitempty"`                             //点差，品种tick值的整数倍
	FeeKind              int64  `protobuf:"varint,14,opt,name=FeeKind,proto3" json:"FeeKind,omitempty"`                          //手续费算法，取值1或2，1表示百比分，2表示绝对值。默认为1.
	TakerFee             string `protobuf:"bytes,15,opt,name=TakerFee,proto3" json:"TakerFee,omitempty"`                         //Taker手续费率
	MakerFee             string `protobuf:"bytes,16,opt,name=MakerFee,proto3" json:"MakerFee,omitempty"`                         //Maker手续费率
	SingleMinOrderVolume string `protobuf:"bytes,17,opt,name=SingleMinOrderVolume,proto3" json:"SingleMinOrderVolume,omitempty"` //单次最小下单量
	SingleMaxOrderVolume string `protobuf:"bytes,18,opt,name=SingleMaxOrderVolume,proto3" json:"SingleMaxOrderVolume,omitempty"` //单次最大下单量
	SingleMinOrderAmount string `protobuf:"bytes,19,opt,name=SingleMinOrderAmount,proto3" json:"SingleMinOrderAmount,omitempty"` //单次最小下单金额
	SingleMaxOrderAmount string `protobuf:"bytes,20,opt,name=SingleMaxOrderAmount,proto3" json:"SingleMaxOrderAmount,omitempty"` //单次最大下单金额
	BuyPriceLimit        string `protobuf:"bytes,21,opt,name=BuyPriceLimit,proto3" json:"BuyPriceLimit,omitempty"`               //买委托价格限制
	SellPriceLimit       string `protobuf:"bytes,22,opt,name=SellPriceLimit,proto3" json:"SellPriceLimit,omitempty"`             //卖委托价格限制
	MaxMatchGear         int64  `protobuf:"varint,23,opt,name=MaxMatchGear,proto3" json:"MaxMatchGear,omitempty"`                //最大成交档位,不得超过20
	OtcMinOrderVolume    string `protobuf:"bytes,24,opt,name=OtcMinOrderVolume,proto3" json:"OtcMinOrderVolume,omitempty"`       //OTC最小量
	OtcMaxOrderVolume    string `protobuf:"bytes,25,opt,name=OtcMaxOrderVolume,proto3" json:"OtcMaxOrderVolume,omitempty"`       //OTC最大量
	OtcMinOrderAmount    string `protobuf:"bytes,26,opt,name=OtcMinOrderAmount,proto3" json:"OtcMinOrderAmount,omitempty"`       //OTC最小金额
	OtcMaxOrderAmount    string `protobuf:"bytes,27,opt,name=OtcMaxOrderAmount,proto3" json:"OtcMaxOrderAmount,omitempty"`       //OTC最大金额
}

func (x *SymbolInfo) Reset() {
	*x = SymbolInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolInfo) ProtoMessage() {}

func (x *SymbolInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dataService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolInfo.ProtoReflect.Descriptor instead.
func (*SymbolInfo) Descriptor() ([]byte, []int) {
	return file_dataService_proto_rawDescGZIP(), []int{1}
}

func (x *SymbolInfo) GetSymbolID() string {
	if x != nil {
		return x.SymbolID
	}
	return ""
}

func (x *SymbolInfo) GetSymbolKind() int64 {
	if x != nil {
		return x.SymbolKind
	}
	return 0
}

func (x *SymbolInfo) GetUnderlying() string {
	if x != nil {
		return x.Underlying
	}
	return ""
}

func (x *SymbolInfo) GetPrimaryCurrency() string {
	if x != nil {
		return x.PrimaryCurrency
	}
	return ""
}

func (x *SymbolInfo) GetBidCurrency() string {
	if x != nil {
		return x.BidCurrency
	}
	return ""
}

func (x *SymbolInfo) GetSettleCurrency() string {
	if x != nil {
		return x.SettleCurrency
	}
	return ""
}

func (x *SymbolInfo) GetSwitch() bool {
	if x != nil {
		return x.Switch
	}
	return false
}

func (x *SymbolInfo) GetVolumePrecision() int64 {
	if x != nil {
		return x.VolumePrecision
	}
	return 0
}

func (x *SymbolInfo) GetPricePrecision() int64 {
	if x != nil {
		return x.PricePrecision
	}
	return 0
}

func (x *SymbolInfo) GetAmountPrecision() int64 {
	if x != nil {
		return x.AmountPrecision
	}
	return 0
}

func (x *SymbolInfo) GetMinUnit() string {
	if x != nil {
		return x.MinUnit
	}
	return ""
}

func (x *SymbolInfo) GetMinChangePrice() string {
	if x != nil {
		return x.MinChangePrice
	}
	return ""
}

func (x *SymbolInfo) GetSpread() string {
	if x != nil {
		return x.Spread
	}
	return ""
}

func (x *SymbolInfo) GetFeeKind() int64 {
	if x != nil {
		return x.FeeKind
	}
	return 0
}

func (x *SymbolInfo) GetTakerFee() string {
	if x != nil {
		return x.TakerFee
	}
	return ""
}

func (x *SymbolInfo) GetMakerFee() string {
	if x != nil {
		return x.MakerFee
	}
	return ""
}

func (x *SymbolInfo) GetSingleMinOrderVolume() string {
	if x != nil {
		return x.SingleMinOrderVolume
	}
	return ""
}

func (x *SymbolInfo) GetSingleMaxOrderVolume() string {
	if x != nil {
		return x.SingleMaxOrderVolume
	}
	return ""
}

func (x *SymbolInfo) GetSingleMinOrderAmount() string {
	if x != nil {
		return x.SingleMinOrderAmount
	}
	return ""
}

func (x *SymbolInfo) GetSingleMaxOrderAmount() string {
	if x != nil {
		return x.SingleMaxOrderAmount
	}
	return ""
}

func (x *SymbolInfo) GetBuyPriceLimit() string {
	if x != nil {
		return x.BuyPriceLimit
	}
	return ""
}

func (x *SymbolInfo) GetSellPriceLimit() string {
	if x != nil {
		return x.SellPriceLimit
	}
	return ""
}

func (x *SymbolInfo) GetMaxMatchGear() int64 {
	if x != nil {
		return x.MaxMatchGear
	}
	return 0
}

func (x *SymbolInfo) GetOtcMinOrderVolume() string {
	if x != nil {
		return x.OtcMinOrderVolume
	}
	return ""
}

func (x *SymbolInfo) GetOtcMaxOrderVolume() string {
	if x != nil {
		return x.OtcMaxOrderVolume
	}
	return ""
}

func (x *SymbolInfo) GetOtcMinOrderAmount() string {
	if x != nil {
		return x.OtcMinOrderAmount
	}
	return ""
}

func (x *SymbolInfo) GetOtcMaxOrderAmount() string {
	if x != nil {
		return x.OtcMaxOrderAmount
	}
	return ""
}

type CurrencyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyID     string `protobuf:"bytes,1,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`          //币种代码，如 USDT
	Kind           int64  `protobuf:"varint,2,opt,name=Kind,proto3" json:"Kind,omitempty"`                     //币种类型，1:法币 2: 公链数字货币 3：稳定币
	ChineseName    string `protobuf:"bytes,3,opt,name=ChineseName,proto3" json:"ChineseName,omitempty"`        //中文名称，如 泰达币
	EnglishName    string `protobuf:"bytes,4,opt,name=EnglishName,proto3" json:"EnglishName,omitempty"`        //英文名称，如 Tether USD
	MinUnit        string `protobuf:"bytes,5,opt,name=MinUnit,proto3" json:"MinUnit,omitempty"`                //币种最小单位
	DepositSwitch  bool   `protobuf:"varint,6,opt,name=DepositSwitch,proto3" json:"DepositSwitch,omitempty"`   //充值开关
	WithdrawSwitch bool   `protobuf:"varint,7,opt,name=WithdrawSwitch,proto3" json:"WithdrawSwitch,omitempty"` //提现开关
	MinWithdraw    string `protobuf:"bytes,8,opt,name=MinWithdraw,proto3" json:"MinWithdraw,omitempty"`        //单笔最小提现金额
	MaxWithdraw    string `protobuf:"bytes,9,opt,name=MaxWithdraw,proto3" json:"MaxWithdraw,omitempty"`        //单笔最大提现金额
	MaxDayWithdraw string `protobuf:"bytes,10,opt,name=MaxDayWithdraw,proto3" json:"MaxDayWithdraw,omitempty"` //当日最大提现金额
	Threshold      string `protobuf:"bytes,11,opt,name=Threshold,proto3" json:"Threshold,omitempty"`           //大额提现阈值
	FeeKind        int64  `protobuf:"varint,12,opt,name=FeeKind,proto3" json:"FeeKind,omitempty"`              //提现手续费算法 1:百比分，2:绝对值。默认为1.
	Fee            string `protobuf:"bytes,13,opt,name=Fee,proto3" json:"Fee,omitempty"`                       //提现手续费率
	Operator       string `protobuf:"bytes,14,opt,name=Operator,proto3" json:"Operator,omitempty"`             //操作员
	Time           string `protobuf:"bytes,15,opt,name=Time,proto3" json:"Time,omitempty"`                     //操作时间
}

func (x *CurrencyInfo) Reset() {
	*x = CurrencyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyInfo) ProtoMessage() {}

func (x *CurrencyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dataService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyInfo.ProtoReflect.Descriptor instead.
func (*CurrencyInfo) Descriptor() ([]byte, []int) {
	return file_dataService_proto_rawDescGZIP(), []int{2}
}

func (x *CurrencyInfo) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CurrencyInfo) GetKind() int64 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *CurrencyInfo) GetChineseName() string {
	if x != nil {
		return x.ChineseName
	}
	return ""
}

func (x *CurrencyInfo) GetEnglishName() string {
	if x != nil {
		return x.EnglishName
	}
	return ""
}

func (x *CurrencyInfo) GetMinUnit() string {
	if x != nil {
		return x.MinUnit
	}
	return ""
}

func (x *CurrencyInfo) GetDepositSwitch() bool {
	if x != nil {
		return x.DepositSwitch
	}
	return false
}

func (x *CurrencyInfo) GetWithdrawSwitch() bool {
	if x != nil {
		return x.WithdrawSwitch
	}
	return false
}

func (x *CurrencyInfo) GetMinWithdraw() string {
	if x != nil {
		return x.MinWithdraw
	}
	return ""
}

func (x *CurrencyInfo) GetMaxWithdraw() string {
	if x != nil {
		return x.MaxWithdraw
	}
	return ""
}

func (x *CurrencyInfo) GetMaxDayWithdraw() string {
	if x != nil {
		return x.MaxDayWithdraw
	}
	return ""
}

func (x *CurrencyInfo) GetThreshold() string {
	if x != nil {
		return x.Threshold
	}
	return ""
}

func (x *CurrencyInfo) GetFeeKind() int64 {
	if x != nil {
		return x.FeeKind
	}
	return 0
}

func (x *CurrencyInfo) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *CurrencyInfo) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *CurrencyInfo) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

//合约
type GetSymbolReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=Symbol,proto3" json:"Symbol,omitempty"` //如果全部查询，空
}

func (x *GetSymbolReq) Reset() {
	*x = GetSymbolReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSymbolReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSymbolReq) ProtoMessage() {}

func (x *GetSymbolReq) ProtoReflect() protoreflect.Message {
	mi := &file_dataService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSymbolReq.ProtoReflect.Descriptor instead.
func (*GetSymbolReq) Descriptor() ([]byte, []int) {
	return file_dataService_proto_rawDescGZIP(), []int{3}
}

func (x *GetSymbolReq) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type GetSymbolRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64         `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
	List  []*SymbolInfo `protobuf:"bytes,2,rep,name=List,proto3" json:"List,omitempty"`
}

func (x *GetSymbolRsp) Reset() {
	*x = GetSymbolRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSymbolRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSymbolRsp) ProtoMessage() {}

func (x *GetSymbolRsp) ProtoReflect() protoreflect.Message {
	mi := &file_dataService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSymbolRsp.ProtoReflect.Descriptor instead.
func (*GetSymbolRsp) Descriptor() ([]byte, []int) {
	return file_dataService_proto_rawDescGZIP(), []int{4}
}

func (x *GetSymbolRsp) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetSymbolRsp) GetList() []*SymbolInfo {
	if x != nil {
		return x.List
	}
	return nil
}

//币种
type GetCurrencyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency string `protobuf:"bytes,1,opt,name=Currency,proto3" json:"Currency,omitempty"`
}

func (x *GetCurrencyReq) Reset() {
	*x = GetCurrencyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrencyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrencyReq) ProtoMessage() {}

func (x *GetCurrencyReq) ProtoReflect() protoreflect.Message {
	mi := &file_dataService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrencyReq.ProtoReflect.Descriptor instead.
func (*GetCurrencyReq) Descriptor() ([]byte, []int) {
	return file_dataService_proto_rawDescGZIP(), []int{5}
}

func (x *GetCurrencyReq) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type GetCurrencyRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64           `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
	List  []*CurrencyInfo `protobuf:"bytes,2,rep,name=List,proto3" json:"List,omitempty"`
}

func (x *GetCurrencyRsp) Reset() {
	*x = GetCurrencyRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrencyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrencyRsp) ProtoMessage() {}

func (x *GetCurrencyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_dataService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrencyRsp.ProtoReflect.Descriptor instead.
func (*GetCurrencyRsp) Descriptor() ([]byte, []int) {
	return file_dataService_proto_rawDescGZIP(), []int{6}
}

func (x *GetCurrencyRsp) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetCurrencyRsp) GetList() []*CurrencyInfo {
	if x != nil {
		return x.List
	}
	return nil
}

//用户交易手续费
type GetUserFeeInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  int64  `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	GroupID string `protobuf:"bytes,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"` //用户组ID
	Symbol  string `protobuf:"bytes,3,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
}

func (x *GetUserFeeInfoReq) Reset() {
	*x = GetUserFeeInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserFeeInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserFeeInfoReq) ProtoMessage() {}

func (x *GetUserFeeInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_dataService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserFeeInfoReq.ProtoReflect.Descriptor instead.
func (*GetUserFeeInfoReq) Descriptor() ([]byte, []int) {
	return file_dataService_proto_rawDescGZIP(), []int{7}
}

func (x *GetUserFeeInfoReq) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *GetUserFeeInfoReq) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *GetUserFeeInfoReq) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type GetUserFeeInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID         int64       `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	GroupID        int64       `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"` //用户组ID
	Symbol         string      `protobuf:"bytes,3,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	BaseCurrency   string      `protobuf:"bytes,4,opt,name=BaseCurrency,proto3" json:"BaseCurrency,omitempty"`
	TargetCurrency string      `protobuf:"bytes,5,opt,name=TargetCurrency,proto3" json:"TargetCurrency,omitempty"`
	FeeKind        int32       `protobuf:"varint,6,opt,name=FeeKind,proto3" json:"FeeKind,omitempty"`
	TakerFee       string      `protobuf:"bytes,7,opt,name=TakerFee,proto3" json:"TakerFee,omitempty"`
	MakerFee       string      `protobuf:"bytes,8,opt,name=MakerFee,proto3" json:"MakerFee,omitempty"`
	SymbolInfo     *SymbolInfo `protobuf:"bytes,9,opt,name=SymbolInfo,proto3" json:"SymbolInfo,omitempty"`
}

func (x *GetUserFeeInfoRsp) Reset() {
	*x = GetUserFeeInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataService_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserFeeInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserFeeInfoRsp) ProtoMessage() {}

func (x *GetUserFeeInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_dataService_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserFeeInfoRsp.ProtoReflect.Descriptor instead.
func (*GetUserFeeInfoRsp) Descriptor() ([]byte, []int) {
	return file_dataService_proto_rawDescGZIP(), []int{8}
}

func (x *GetUserFeeInfoRsp) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *GetUserFeeInfoRsp) GetGroupID() int64 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *GetUserFeeInfoRsp) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetUserFeeInfoRsp) GetBaseCurrency() string {
	if x != nil {
		return x.BaseCurrency
	}
	return ""
}

func (x *GetUserFeeInfoRsp) GetTargetCurrency() string {
	if x != nil {
		return x.TargetCurrency
	}
	return ""
}

func (x *GetUserFeeInfoRsp) GetFeeKind() int32 {
	if x != nil {
		return x.FeeKind
	}
	return 0
}

func (x *GetUserFeeInfoRsp) GetTakerFee() string {
	if x != nil {
		return x.TakerFee
	}
	return ""
}

func (x *GetUserFeeInfoRsp) GetMakerFee() string {
	if x != nil {
		return x.MakerFee
	}
	return ""
}

func (x *GetUserFeeInfoRsp) GetSymbolInfo() *SymbolInfo {
	if x != nil {
		return x.SymbolInfo
	}
	return nil
}

type PublishNacosConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataID  string `protobuf:"bytes,1,opt,name=DataID,proto3" json:"DataID,omitempty"`
	Group   string `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
	Content string `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (x *PublishNacosConfig) Reset() {
	*x = PublishNacosConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataService_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishNacosConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishNacosConfig) ProtoMessage() {}

func (x *PublishNacosConfig) ProtoReflect() protoreflect.Message {
	mi := &file_dataService_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishNacosConfig.ProtoReflect.Descriptor instead.
func (*PublishNacosConfig) Descriptor() ([]byte, []int) {
	return file_dataService_proto_rawDescGZIP(), []int{9}
}

func (x *PublishNacosConfig) GetDataID() string {
	if x != nil {
		return x.DataID
	}
	return ""
}

func (x *PublishNacosConfig) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *PublishNacosConfig) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type DeleteNacosConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataID string `protobuf:"bytes,1,opt,name=DataID,proto3" json:"DataID,omitempty"`
	Group  string `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
}

func (x *DeleteNacosConfig) Reset() {
	*x = DeleteNacosConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataService_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNacosConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNacosConfig) ProtoMessage() {}

func (x *DeleteNacosConfig) ProtoReflect() protoreflect.Message {
	mi := &file_dataService_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNacosConfig.ProtoReflect.Descriptor instead.
func (*DeleteNacosConfig) Descriptor() ([]byte, []int) {
	return file_dataService_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteNacosConfig) GetDataID() string {
	if x != nil {
		return x.DataID
	}
	return ""
}

func (x *DeleteNacosConfig) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

var File_dataService_proto protoreflect.FileDescriptor

var file_dataService_proto_rawDesc = []byte{
	0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x22, 0x09, 0x0a, 0x07, 0x44, 0x53, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x96, 0x08, 0x0a, 0x0a, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a,
	0x0f, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x69, 0x64, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x69,
	0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x4d, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4d, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x70, 0x72, 0x65, 0x61,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x46, 0x65, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x46, 0x65, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x6b,
	0x65, 0x72, 0x46, 0x65, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x6b,
	0x65, 0x72, 0x46, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65,
	0x65, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d,
	0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x61, 0x78, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d,
	0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a,
	0x14, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x75, 0x79, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x6c, 0x6c, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x53, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x61, 0x72, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4d, 0x61, 0x78, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47,
	0x65, 0x61, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x74, 0x63, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x4f, 0x74, 0x63, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x74, 0x63, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4f, 0x74,
	0x63, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x4f, 0x74, 0x63, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4f, 0x74, 0x63, 0x4d,
	0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a,
	0x11, 0x4f, 0x74, 0x63, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4f, 0x74, 0x63, 0x4d, 0x61, 0x78,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd4, 0x03, 0x0a, 0x0c,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x4b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x0b,
	0x4d, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x4d, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x20,
	0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x61, 0x78, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x79, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x79,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x65, 0x65, 0x4b, 0x69, 0x6e,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x46, 0x65, 0x65, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x46, 0x65, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x46,
	0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x26, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x48, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x22, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x2c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x22, 0x4c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x5d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x65, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22,
	0xab, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x65, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12,
	0x22, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x46,
	0x65, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x46, 0x65,
	0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x12, 0x2e, 0x0a,
	0x0a, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5c, 0x0a,
	0x12, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4e, 0x61, 0x63, 0x6f, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x61, 0x74, 0x61, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x61, 0x74, 0x61, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x41, 0x0a, 0x11, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x63, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x44, 0x61, 0x74, 0x61, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x44, 0x61, 0x74, 0x61, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x32, 0xa9,
	0x02, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2f,
	0x0a, 0x09, 0x67, 0x65, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x10, 0x2e, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x73, 0x70, 0x12,
	0x35, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12,
	0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a,
	0x15, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x65, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x4e, 0x61, 0x63, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x2e, 0x70,
	0x62, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4e, 0x61, 0x63, 0x6f, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x53, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x37, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x63, 0x6f, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4e, 0x61, 0x63, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0b, 0x2e,
	0x70, 0x62, 0x2e, 0x44, 0x53, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dataService_proto_rawDescOnce sync.Once
	file_dataService_proto_rawDescData = file_dataService_proto_rawDesc
)

func file_dataService_proto_rawDescGZIP() []byte {
	file_dataService_proto_rawDescOnce.Do(func() {
		file_dataService_proto_rawDescData = protoimpl.X.CompressGZIP(file_dataService_proto_rawDescData)
	})
	return file_dataService_proto_rawDescData
}

var file_dataService_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_dataService_proto_goTypes = []interface{}{
	(*DSEmpty)(nil),            // 0: pb.DSEmpty
	(*SymbolInfo)(nil),         // 1: pb.SymbolInfo
	(*CurrencyInfo)(nil),       // 2: pb.CurrencyInfo
	(*GetSymbolReq)(nil),       // 3: pb.GetSymbolReq
	(*GetSymbolRsp)(nil),       // 4: pb.GetSymbolRsp
	(*GetCurrencyReq)(nil),     // 5: pb.GetCurrencyReq
	(*GetCurrencyRsp)(nil),     // 6: pb.GetCurrencyRsp
	(*GetUserFeeInfoReq)(nil),  // 7: pb.GetUserFeeInfoReq
	(*GetUserFeeInfoRsp)(nil),  // 8: pb.GetUserFeeInfoRsp
	(*PublishNacosConfig)(nil), // 9: pb.PublishNacosConfig
	(*DeleteNacosConfig)(nil),  // 10: pb.DeleteNacosConfig
}
var file_dataService_proto_depIdxs = []int32{
	1,  // 0: pb.GetSymbolRsp.List:type_name -> pb.SymbolInfo
	2,  // 1: pb.GetCurrencyRsp.List:type_name -> pb.CurrencyInfo
	1,  // 2: pb.GetUserFeeInfoRsp.SymbolInfo:type_name -> pb.SymbolInfo
	3,  // 3: pb.dataService.getSymbol:input_type -> pb.GetSymbolReq
	5,  // 4: pb.dataService.getCurrency:input_type -> pb.GetCurrencyReq
	7,  // 5: pb.dataService.getUserFeeInfo:input_type -> pb.GetUserFeeInfoReq
	9,  // 6: pb.dataService.publishNacosConfig:input_type -> pb.PublishNacosConfig
	10, // 7: pb.dataService.deleteNacosConfig:input_type -> pb.DeleteNacosConfig
	4,  // 8: pb.dataService.getSymbol:output_type -> pb.GetSymbolRsp
	6,  // 9: pb.dataService.getCurrency:output_type -> pb.GetCurrencyRsp
	8,  // 10: pb.dataService.getUserFeeInfo:output_type -> pb.GetUserFeeInfoRsp
	0,  // 11: pb.dataService.publishNacosConfig:output_type -> pb.DSEmpty
	0,  // 12: pb.dataService.deleteNacosConfig:output_type -> pb.DSEmpty
	8,  // [8:13] is the sub-list for method output_type
	3,  // [3:8] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_dataService_proto_init() }
func file_dataService_proto_init() {
	if File_dataService_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dataService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DSEmpty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSymbolReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSymbolRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrencyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrencyRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserFeeInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataService_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserFeeInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataService_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishNacosConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataService_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNacosConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dataService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dataService_proto_goTypes,
		DependencyIndexes: file_dataService_proto_depIdxs,
		MessageInfos:      file_dataService_proto_msgTypes,
	}.Build()
	File_dataService_proto = out.File
	file_dataService_proto_rawDesc = nil
	file_dataService_proto_goTypes = nil
	file_dataService_proto_depIdxs = nil
}
