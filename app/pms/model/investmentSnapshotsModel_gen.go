// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/shopspring/decimal"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	investmentSnapshotsFieldNames          = builder.RawFieldNames(&InvestmentSnapshots{})
	investmentSnapshotsRows                = strings.Join(investmentSnapshotsFieldNames, ",")
	investmentSnapshotsRowsExpectAutoSet   = strings.Join(stringx.Remove(investmentSnapshotsFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	investmentSnapshotsRowsWithPlaceHolder = strings.Join(stringx.Remove(investmentSnapshotsFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheInvestmentSnapshotsIdPrefix = "cache:investmentSnapshots:id:"
)

type (
	investmentSnapshotsModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *InvestmentSnapshots) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*InvestmentSnapshots, error)
		Update(ctx context.Context, session sqlx.Session, data *InvestmentSnapshots) (sql.Result, error)
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultInvestmentSnapshotsModel struct {
		sqlc.CachedConn
		table string
	}

	InvestmentSnapshots struct {
		Id int64 `db:"id"`

		UserId int64 `db:"user_id"` // 用户id

		Investment sql.NullString `db:"investment"` // 投资品

		Position decimal.Decimal `db:"position"` // 投资品当前持有数量

		AveragePrice decimal.Decimal `db:"average_price"` // 均价

		CostBasis decimal.Decimal `db:"cost_basis"` // 成本

		Last decimal.Decimal `db:"last"` // 市价

		MarketValue decimal.Decimal `db:"market_value"` // 市值

		MarketValuePercent decimal.Decimal `db:"market_value_percent"` // 市值占比

		DailyChange decimal.Decimal `db:"daily_change"` // 日波动

		DailyProfit decimal.Decimal `db:"daily_profit"` // 日盈亏

		UnrealizedProfit decimal.Decimal `db:"unrealized_profit"` // 未实现盈亏

		UnrealizedProfitPercent decimal.Decimal `db:"unrealized_profit_percent"` // 未实现盈亏率

		DailyProfitAddLoss decimal.Decimal `db:"daily_profit_add_loss"` // 日盈亏dailyP&L

		RealizedProfitAddLoss decimal.Decimal `db:"realized_profit_add_loss"` // 累计已实现盈亏Realized P&L

		DateTime time.Time `db:"date_time"` // 日期

		Created time.Time `db:"created"` // 创建时间

		Updated time.Time `db:"updated"` // 最近更新时间

	}
)

func newInvestmentSnapshotsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultInvestmentSnapshotsModel {
	return &defaultInvestmentSnapshotsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`investment_snapshots`",
	}
}

func (m *defaultInvestmentSnapshotsModel) Insert(ctx context.Context, session sqlx.Session, data *InvestmentSnapshots) (sql.Result, error) {
	investmentSnapshotsIdKey := fmt.Sprintf("%s%v", cacheInvestmentSnapshotsIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, investmentSnapshotsRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.UserId, data.Investment, data.Position, data.AveragePrice, data.CostBasis, data.Last, data.MarketValue, data.MarketValuePercent, data.DailyChange, data.DailyProfit, data.UnrealizedProfit, data.UnrealizedProfitPercent, data.DailyProfitAddLoss, data.RealizedProfitAddLoss, data.DateTime, data.Created, data.Updated)
		}
		return conn.ExecCtx(ctx, query, data.UserId, data.Investment, data.Position, data.AveragePrice, data.CostBasis, data.Last, data.MarketValue, data.MarketValuePercent, data.DailyChange, data.DailyProfit, data.UnrealizedProfit, data.UnrealizedProfitPercent, data.DailyProfitAddLoss, data.RealizedProfitAddLoss, data.DateTime, data.Created, data.Updated)
	}, investmentSnapshotsIdKey)
}

func (m *defaultInvestmentSnapshotsModel) FindOne(ctx context.Context, id int64) (*InvestmentSnapshots, error) {
	investmentSnapshotsIdKey := fmt.Sprintf("%s%v", cacheInvestmentSnapshotsIdPrefix, id)
	var resp InvestmentSnapshots
	err := m.QueryRowCtx(ctx, &resp, investmentSnapshotsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", investmentSnapshotsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultInvestmentSnapshotsModel) Update(ctx context.Context, session sqlx.Session, data *InvestmentSnapshots) (sql.Result, error) {
	investmentSnapshotsIdKey := fmt.Sprintf("%s%v", cacheInvestmentSnapshotsIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, investmentSnapshotsRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.UserId, data.Investment, data.Position, data.AveragePrice, data.CostBasis, data.Last, data.MarketValue, data.MarketValuePercent, data.DailyChange, data.DailyProfit, data.UnrealizedProfit, data.UnrealizedProfitPercent, data.DailyProfitAddLoss, data.RealizedProfitAddLoss, data.DateTime, data.Created, data.Updated, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.UserId, data.Investment, data.Position, data.AveragePrice, data.CostBasis, data.Last, data.MarketValue, data.MarketValuePercent, data.DailyChange, data.DailyProfit, data.UnrealizedProfit, data.UnrealizedProfitPercent, data.DailyProfitAddLoss, data.RealizedProfitAddLoss, data.DateTime, data.Created, data.Updated, data.Id)
	}, investmentSnapshotsIdKey)
}

func (m *defaultInvestmentSnapshotsModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	investmentSnapshotsIdKey := fmt.Sprintf("%s%v", cacheInvestmentSnapshotsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, investmentSnapshotsIdKey)
	return err
}

func (m *defaultInvestmentSnapshotsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheInvestmentSnapshotsIdPrefix, primary)
}
func (m *defaultInvestmentSnapshotsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", investmentSnapshotsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultInvestmentSnapshotsModel) tableName() string {
	return m.table
}
