// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/shopspring/decimal"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	portfolioInvestmentsFieldNames          = builder.RawFieldNames(&PortfolioInvestments{})
	portfolioInvestmentsRows                = strings.Join(portfolioInvestmentsFieldNames, ",")
	portfolioInvestmentsRowsExpectAutoSet   = strings.Join(stringx.Remove(portfolioInvestmentsFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	portfolioInvestmentsRowsWithPlaceHolder = strings.Join(stringx.Remove(portfolioInvestmentsFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cachePortfolioInvestmentsIdPrefix = "cache:portfolioInvestments:id:"
)

type (
	portfolioInvestmentsModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *PortfolioInvestments) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PortfolioInvestments, error)
		Update(ctx context.Context, session sqlx.Session, data *PortfolioInvestments) (sql.Result, error)
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultPortfolioInvestmentsModel struct {
		sqlc.CachedConn
		table string
	}

	PortfolioInvestments struct {
		Id int64 `db:"id"` // 主键ID

		Name string `db:"name"` // 资产分组名称

		UserId int64 `db:"user_id"` // 用户id

		Remark string `db:"remark"` // 备注

		Status int64 `db:"status"` // 1:默认分组，2:私有分组

		LastOperator int64 `db:"last_operator"` // 最后一次操作人,0-表示由程序自动创建

		Created time.Time `db:"created"` // 创建时间

		Updated time.Time `db:"updated"` // 最近更新时间

	}
)

func newPortfolioInvestmentsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultPortfolioInvestmentsModel {
	return &defaultPortfolioInvestmentsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`portfolio_investments`",
	}
}

func (m *defaultPortfolioInvestmentsModel) Insert(ctx context.Context, session sqlx.Session, data *PortfolioInvestments) (sql.Result, error) {
	portfolioInvestmentsIdKey := fmt.Sprintf("%s%v", cachePortfolioInvestmentsIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, portfolioInvestmentsRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Name, data.UserId, data.Remark, data.Status, data.LastOperator, data.Created, data.Updated)
		}
		return conn.ExecCtx(ctx, query, data.Name, data.UserId, data.Remark, data.Status, data.LastOperator, data.Created, data.Updated)
	}, portfolioInvestmentsIdKey)
}

func (m *defaultPortfolioInvestmentsModel) FindOne(ctx context.Context, id int64) (*PortfolioInvestments, error) {
	portfolioInvestmentsIdKey := fmt.Sprintf("%s%v", cachePortfolioInvestmentsIdPrefix, id)
	var resp PortfolioInvestments
	err := m.QueryRowCtx(ctx, &resp, portfolioInvestmentsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", portfolioInvestmentsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPortfolioInvestmentsModel) Update(ctx context.Context, session sqlx.Session, data *PortfolioInvestments) (sql.Result, error) {
	portfolioInvestmentsIdKey := fmt.Sprintf("%s%v", cachePortfolioInvestmentsIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, portfolioInvestmentsRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Name, data.UserId, data.Remark, data.Status, data.LastOperator, data.Created, data.Updated, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.Name, data.UserId, data.Remark, data.Status, data.LastOperator, data.Created, data.Updated, data.Id)
	}, portfolioInvestmentsIdKey)
}

func (m *defaultPortfolioInvestmentsModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	portfolioInvestmentsIdKey := fmt.Sprintf("%s%v", cachePortfolioInvestmentsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, portfolioInvestmentsIdKey)
	return err
}

func (m *defaultPortfolioInvestmentsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cachePortfolioInvestmentsIdPrefix, primary)
}
func (m *defaultPortfolioInvestmentsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", portfolioInvestmentsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPortfolioInvestmentsModel) tableName() string {
	return m.table
}
