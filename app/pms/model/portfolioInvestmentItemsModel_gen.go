// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/shopspring/decimal"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	portfolioInvestmentItemsFieldNames          = builder.RawFieldNames(&PortfolioInvestmentItems{})
	portfolioInvestmentItemsRows                = strings.Join(portfolioInvestmentItemsFieldNames, ",")
	portfolioInvestmentItemsRowsExpectAutoSet   = strings.Join(stringx.Remove(portfolioInvestmentItemsFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	portfolioInvestmentItemsRowsWithPlaceHolder = strings.Join(stringx.Remove(portfolioInvestmentItemsFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cachePortfolioInvestmentItemsIdPrefix            = "cache:portfolioInvestmentItems:id:"
	cachePortfolioInvestmentItemsGidInvestmentPrefix = "cache:portfolioInvestmentItems:gid:investment:"
)

type (
	portfolioInvestmentItemsModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *PortfolioInvestmentItems) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PortfolioInvestmentItems, error)
		FindOneByGidInvestment(ctx context.Context, gid int64, investment string) (*PortfolioInvestmentItems, error)
		Update(ctx context.Context, session sqlx.Session, data *PortfolioInvestmentItems) (sql.Result, error)
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultPortfolioInvestmentItemsModel struct {
		sqlc.CachedConn
		table string
	}

	PortfolioInvestmentItems struct {
		Id int64 `db:"id"` // 主键ID

		Gid int64 `db:"gid"` // 资产组ID

		Investment string `db:"investment"` // 分组中包含的投资品

		Created time.Time `db:"created"` // 创建时间

		Updated time.Time `db:"updated"` // 最近更新时间

	}
)

func newPortfolioInvestmentItemsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultPortfolioInvestmentItemsModel {
	return &defaultPortfolioInvestmentItemsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`portfolio_investment_items`",
	}
}

func (m *defaultPortfolioInvestmentItemsModel) Insert(ctx context.Context, session sqlx.Session, data *PortfolioInvestmentItems) (sql.Result, error) {
	portfolioInvestmentItemsGidInvestmentKey := fmt.Sprintf("%s%v:%v", cachePortfolioInvestmentItemsGidInvestmentPrefix, data.Gid, data.Investment)
	portfolioInvestmentItemsIdKey := fmt.Sprintf("%s%v", cachePortfolioInvestmentItemsIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, portfolioInvestmentItemsRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Gid, data.Investment, data.Created, data.Updated)
		}
		return conn.ExecCtx(ctx, query, data.Gid, data.Investment, data.Created, data.Updated)
	}, portfolioInvestmentItemsGidInvestmentKey, portfolioInvestmentItemsIdKey)
}

func (m *defaultPortfolioInvestmentItemsModel) FindOne(ctx context.Context, id int64) (*PortfolioInvestmentItems, error) {
	portfolioInvestmentItemsIdKey := fmt.Sprintf("%s%v", cachePortfolioInvestmentItemsIdPrefix, id)
	var resp PortfolioInvestmentItems
	err := m.QueryRowCtx(ctx, &resp, portfolioInvestmentItemsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", portfolioInvestmentItemsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPortfolioInvestmentItemsModel) FindOneByGidInvestment(ctx context.Context, gid int64, investment string) (*PortfolioInvestmentItems, error) {
	portfolioInvestmentItemsGidInvestmentKey := fmt.Sprintf("%s%v:%v", cachePortfolioInvestmentItemsGidInvestmentPrefix, gid, investment)
	var resp PortfolioInvestmentItems
	err := m.QueryRowIndexCtx(ctx, &resp, portfolioInvestmentItemsGidInvestmentKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `gid` = ? and `investment` = ? limit 1", portfolioInvestmentItemsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, gid, investment); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPortfolioInvestmentItemsModel) Update(ctx context.Context, session sqlx.Session, data *PortfolioInvestmentItems) (sql.Result, error) {
	portfolioInvestmentItemsGidInvestmentKey := fmt.Sprintf("%s%v:%v", cachePortfolioInvestmentItemsGidInvestmentPrefix, data.Gid, data.Investment)
	portfolioInvestmentItemsIdKey := fmt.Sprintf("%s%v", cachePortfolioInvestmentItemsIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, portfolioInvestmentItemsRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Gid, data.Investment, data.Created, data.Updated, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.Gid, data.Investment, data.Created, data.Updated, data.Id)
	}, portfolioInvestmentItemsGidInvestmentKey, portfolioInvestmentItemsIdKey)
}

func (m *defaultPortfolioInvestmentItemsModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	portfolioInvestmentItemsGidInvestmentKey := fmt.Sprintf("%s%v:%v", cachePortfolioInvestmentItemsGidInvestmentPrefix, data.Gid, data.Investment)
	portfolioInvestmentItemsIdKey := fmt.Sprintf("%s%v", cachePortfolioInvestmentItemsIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, portfolioInvestmentItemsGidInvestmentKey, portfolioInvestmentItemsIdKey)
	return err
}

func (m *defaultPortfolioInvestmentItemsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cachePortfolioInvestmentItemsIdPrefix, primary)
}
func (m *defaultPortfolioInvestmentItemsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", portfolioInvestmentItemsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPortfolioInvestmentItemsModel) tableName() string {
	return m.table
}
