// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/shopspring/decimal"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	memberCashFlowFieldNames          = builder.RawFieldNames(&MemberCashFlow{})
	memberCashFlowRows                = strings.Join(memberCashFlowFieldNames, ",")
	memberCashFlowRowsExpectAutoSet   = strings.Join(stringx.Remove(memberCashFlowFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	memberCashFlowRowsWithPlaceHolder = strings.Join(stringx.Remove(memberCashFlowFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheMemberCashFlowIdPrefix = "cache:memberCashFlow:id:"
)

type (
	memberCashFlowModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *MemberCashFlow) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*MemberCashFlow, error)
		Update(ctx context.Context, session sqlx.Session, data *MemberCashFlow) (sql.Result, error)
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultMemberCashFlowModel struct {
		sqlc.CachedConn
		table string
	}

	MemberCashFlow struct {
		Id int64 `db:"id"`

		UserId int64 `db:"user_id"` // 用户id

		CashFlow decimal.Decimal `db:"cash_flow"` // 现金流

		MarketValueDayStart decimal.Decimal `db:"market_value_day_start"` // 日初市值

		MarketValueDayEnd decimal.Decimal `db:"market_value_day_end"` // 日终市值

		DateTime time.Time `db:"date_time"` // 日期

		Created time.Time `db:"created"` // 创建时间

		Updated time.Time `db:"updated"` // 最近更新时间

	}
)

func newMemberCashFlowModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultMemberCashFlowModel {
	return &defaultMemberCashFlowModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`member_cash_flow`",
	}
}

func (m *defaultMemberCashFlowModel) Insert(ctx context.Context, session sqlx.Session, data *MemberCashFlow) (sql.Result, error) {
	memberCashFlowIdKey := fmt.Sprintf("%s%v", cacheMemberCashFlowIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, memberCashFlowRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.UserId, data.CashFlow, data.MarketValueDayStart, data.MarketValueDayEnd, data.DateTime, data.Created, data.Updated)
		}
		return conn.ExecCtx(ctx, query, data.UserId, data.CashFlow, data.MarketValueDayStart, data.MarketValueDayEnd, data.DateTime, data.Created, data.Updated)
	}, memberCashFlowIdKey)
}

func (m *defaultMemberCashFlowModel) FindOne(ctx context.Context, id int64) (*MemberCashFlow, error) {
	memberCashFlowIdKey := fmt.Sprintf("%s%v", cacheMemberCashFlowIdPrefix, id)
	var resp MemberCashFlow
	err := m.QueryRowCtx(ctx, &resp, memberCashFlowIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", memberCashFlowRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMemberCashFlowModel) Update(ctx context.Context, session sqlx.Session, data *MemberCashFlow) (sql.Result, error) {
	memberCashFlowIdKey := fmt.Sprintf("%s%v", cacheMemberCashFlowIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, memberCashFlowRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.UserId, data.CashFlow, data.MarketValueDayStart, data.MarketValueDayEnd, data.DateTime, data.Created, data.Updated, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.UserId, data.CashFlow, data.MarketValueDayStart, data.MarketValueDayEnd, data.DateTime, data.Created, data.Updated, data.Id)
	}, memberCashFlowIdKey)
}

func (m *defaultMemberCashFlowModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	memberCashFlowIdKey := fmt.Sprintf("%s%v", cacheMemberCashFlowIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, memberCashFlowIdKey)
	return err
}

func (m *defaultMemberCashFlowModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheMemberCashFlowIdPrefix, primary)
}
func (m *defaultMemberCashFlowModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", memberCashFlowRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultMemberCashFlowModel) tableName() string {
	return m.table
}
