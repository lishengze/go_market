// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: pms.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PmsClient is the client API for Pms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PmsClient interface {
	CreatePortfolioInvestment(ctx context.Context, in *CreatePortfolioInvestmentReq, opts ...grpc.CallOption) (*EmptyRsp, error)
	DeletePortfolioInvestment(ctx context.Context, in *DeletePortfolioInvestmentReq, opts ...grpc.CallOption) (*EmptyRsp, error)
	UpdatePortfolioInvestment(ctx context.Context, in *UpdatePortfolioInvestmentReq, opts ...grpc.CallOption) (*EmptyRsp, error)
	GetPortfolioInvestmentList(ctx context.Context, in *PortfolioInvestmentListReq, opts ...grpc.CallOption) (*PortfolioInvestmentListRsp, error)
	// 资产列表
	GetAccountAnalysis(ctx context.Context, in *AccountAnalysisReq, opts ...grpc.CallOption) (*AccountAnalysisRsp, error)
	// 资产收益率
	GetPortfolioPerformance(ctx context.Context, in *PortfolioPerformanceReq, opts ...grpc.CallOption) (*PortfolioPerformanceRsp, error)
}

type pmsClient struct {
	cc grpc.ClientConnInterface
}

func NewPmsClient(cc grpc.ClientConnInterface) PmsClient {
	return &pmsClient{cc}
}

func (c *pmsClient) CreatePortfolioInvestment(ctx context.Context, in *CreatePortfolioInvestmentReq, opts ...grpc.CallOption) (*EmptyRsp, error) {
	out := new(EmptyRsp)
	err := c.cc.Invoke(ctx, "/pb.Pms/createPortfolioInvestment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) DeletePortfolioInvestment(ctx context.Context, in *DeletePortfolioInvestmentReq, opts ...grpc.CallOption) (*EmptyRsp, error) {
	out := new(EmptyRsp)
	err := c.cc.Invoke(ctx, "/pb.Pms/deletePortfolioInvestment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) UpdatePortfolioInvestment(ctx context.Context, in *UpdatePortfolioInvestmentReq, opts ...grpc.CallOption) (*EmptyRsp, error) {
	out := new(EmptyRsp)
	err := c.cc.Invoke(ctx, "/pb.Pms/updatePortfolioInvestment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) GetPortfolioInvestmentList(ctx context.Context, in *PortfolioInvestmentListReq, opts ...grpc.CallOption) (*PortfolioInvestmentListRsp, error) {
	out := new(PortfolioInvestmentListRsp)
	err := c.cc.Invoke(ctx, "/pb.Pms/getPortfolioInvestmentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) GetAccountAnalysis(ctx context.Context, in *AccountAnalysisReq, opts ...grpc.CallOption) (*AccountAnalysisRsp, error) {
	out := new(AccountAnalysisRsp)
	err := c.cc.Invoke(ctx, "/pb.Pms/GetAccountAnalysis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) GetPortfolioPerformance(ctx context.Context, in *PortfolioPerformanceReq, opts ...grpc.CallOption) (*PortfolioPerformanceRsp, error) {
	out := new(PortfolioPerformanceRsp)
	err := c.cc.Invoke(ctx, "/pb.Pms/getPortfolioPerformance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PmsServer is the server API for Pms service.
// All implementations must embed UnimplementedPmsServer
// for forward compatibility
type PmsServer interface {
	CreatePortfolioInvestment(context.Context, *CreatePortfolioInvestmentReq) (*EmptyRsp, error)
	DeletePortfolioInvestment(context.Context, *DeletePortfolioInvestmentReq) (*EmptyRsp, error)
	UpdatePortfolioInvestment(context.Context, *UpdatePortfolioInvestmentReq) (*EmptyRsp, error)
	GetPortfolioInvestmentList(context.Context, *PortfolioInvestmentListReq) (*PortfolioInvestmentListRsp, error)
	// 资产列表
	GetAccountAnalysis(context.Context, *AccountAnalysisReq) (*AccountAnalysisRsp, error)
	// 资产收益率
	GetPortfolioPerformance(context.Context, *PortfolioPerformanceReq) (*PortfolioPerformanceRsp, error)
	mustEmbedUnimplementedPmsServer()
}

// UnimplementedPmsServer must be embedded to have forward compatible implementations.
type UnimplementedPmsServer struct {
}

func (UnimplementedPmsServer) CreatePortfolioInvestment(context.Context, *CreatePortfolioInvestmentReq) (*EmptyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePortfolioInvestment not implemented")
}
func (UnimplementedPmsServer) DeletePortfolioInvestment(context.Context, *DeletePortfolioInvestmentReq) (*EmptyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePortfolioInvestment not implemented")
}
func (UnimplementedPmsServer) UpdatePortfolioInvestment(context.Context, *UpdatePortfolioInvestmentReq) (*EmptyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePortfolioInvestment not implemented")
}
func (UnimplementedPmsServer) GetPortfolioInvestmentList(context.Context, *PortfolioInvestmentListReq) (*PortfolioInvestmentListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortfolioInvestmentList not implemented")
}
func (UnimplementedPmsServer) GetAccountAnalysis(context.Context, *AccountAnalysisReq) (*AccountAnalysisRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountAnalysis not implemented")
}
func (UnimplementedPmsServer) GetPortfolioPerformance(context.Context, *PortfolioPerformanceReq) (*PortfolioPerformanceRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortfolioPerformance not implemented")
}
func (UnimplementedPmsServer) mustEmbedUnimplementedPmsServer() {}

// UnsafePmsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PmsServer will
// result in compilation errors.
type UnsafePmsServer interface {
	mustEmbedUnimplementedPmsServer()
}

func RegisterPmsServer(s grpc.ServiceRegistrar, srv PmsServer) {
	s.RegisterService(&Pms_ServiceDesc, srv)
}

func _Pms_CreatePortfolioInvestment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePortfolioInvestmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).CreatePortfolioInvestment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Pms/createPortfolioInvestment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).CreatePortfolioInvestment(ctx, req.(*CreatePortfolioInvestmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_DeletePortfolioInvestment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePortfolioInvestmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).DeletePortfolioInvestment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Pms/deletePortfolioInvestment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).DeletePortfolioInvestment(ctx, req.(*DeletePortfolioInvestmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_UpdatePortfolioInvestment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePortfolioInvestmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).UpdatePortfolioInvestment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Pms/updatePortfolioInvestment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).UpdatePortfolioInvestment(ctx, req.(*UpdatePortfolioInvestmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_GetPortfolioInvestmentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortfolioInvestmentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).GetPortfolioInvestmentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Pms/getPortfolioInvestmentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).GetPortfolioInvestmentList(ctx, req.(*PortfolioInvestmentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_GetAccountAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountAnalysisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).GetAccountAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Pms/GetAccountAnalysis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).GetAccountAnalysis(ctx, req.(*AccountAnalysisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_GetPortfolioPerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortfolioPerformanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).GetPortfolioPerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Pms/getPortfolioPerformance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).GetPortfolioPerformance(ctx, req.(*PortfolioPerformanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Pms_ServiceDesc is the grpc.ServiceDesc for Pms service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pms_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Pms",
	HandlerType: (*PmsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createPortfolioInvestment",
			Handler:    _Pms_CreatePortfolioInvestment_Handler,
		},
		{
			MethodName: "deletePortfolioInvestment",
			Handler:    _Pms_DeletePortfolioInvestment_Handler,
		},
		{
			MethodName: "updatePortfolioInvestment",
			Handler:    _Pms_UpdatePortfolioInvestment_Handler,
		},
		{
			MethodName: "getPortfolioInvestmentList",
			Handler:    _Pms_GetPortfolioInvestmentList_Handler,
		},
		{
			MethodName: "GetAccountAnalysis",
			Handler:    _Pms_GetAccountAnalysis_Handler,
		},
		{
			MethodName: "getPortfolioPerformance",
			Handler:    _Pms_GetPortfolioPerformance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pms.proto",
}
