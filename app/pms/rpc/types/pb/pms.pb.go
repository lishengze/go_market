// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.1
// source: pms.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Klines int32

const (
	Klines_K_7D  Klines = 0
	Klines_K_MTD Klines = 1
	Klines_K_1M  Klines = 2
	Klines_K_YTD Klines = 3
	Klines_K_1Y  Klines = 4
)

// Enum value maps for Klines.
var (
	Klines_name = map[int32]string{
		0: "K_7D",
		1: "K_MTD",
		2: "K_1M",
		3: "K_YTD",
		4: "K_1Y",
	}
	Klines_value = map[string]int32{
		"K_7D":  0,
		"K_MTD": 1,
		"K_1M":  2,
		"K_YTD": 3,
		"K_1Y":  4,
	}
)

func (x Klines) Enum() *Klines {
	p := new(Klines)
	*p = x
	return p
}

func (x Klines) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Klines) Descriptor() protoreflect.EnumDescriptor {
	return file_pms_proto_enumTypes[0].Descriptor()
}

func (Klines) Type() protoreflect.EnumType {
	return &file_pms_proto_enumTypes[0]
}

func (x Klines) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Klines.Descriptor instead.
func (Klines) EnumDescriptor() ([]byte, []int) {
	return file_pms_proto_rawDescGZIP(), []int{0}
}

type CreatePortfolioInvestmentReq_Grouping int32

const (
	CreatePortfolioInvestmentReq_ALL     CreatePortfolioInvestmentReq_Grouping = 0
	CreatePortfolioInvestmentReq_PUBLIC  CreatePortfolioInvestmentReq_Grouping = 1
	CreatePortfolioInvestmentReq_PRIVATE CreatePortfolioInvestmentReq_Grouping = 2
)

// Enum value maps for CreatePortfolioInvestmentReq_Grouping.
var (
	CreatePortfolioInvestmentReq_Grouping_name = map[int32]string{
		0: "ALL",
		1: "PUBLIC",
		2: "PRIVATE",
	}
	CreatePortfolioInvestmentReq_Grouping_value = map[string]int32{
		"ALL":     0,
		"PUBLIC":  1,
		"PRIVATE": 2,
	}
)

func (x CreatePortfolioInvestmentReq_Grouping) Enum() *CreatePortfolioInvestmentReq_Grouping {
	p := new(CreatePortfolioInvestmentReq_Grouping)
	*p = x
	return p
}

func (x CreatePortfolioInvestmentReq_Grouping) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreatePortfolioInvestmentReq_Grouping) Descriptor() protoreflect.EnumDescriptor {
	return file_pms_proto_enumTypes[1].Descriptor()
}

func (CreatePortfolioInvestmentReq_Grouping) Type() protoreflect.EnumType {
	return &file_pms_proto_enumTypes[1]
}

func (x CreatePortfolioInvestmentReq_Grouping) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreatePortfolioInvestmentReq_Grouping.Descriptor instead.
func (CreatePortfolioInvestmentReq_Grouping) EnumDescriptor() ([]byte, []int) {
	return file_pms_proto_rawDescGZIP(), []int{2, 0}
}

type PortfolioInvestmentListReq_Grouping int32

const (
	PortfolioInvestmentListReq_ALL     PortfolioInvestmentListReq_Grouping = 0
	PortfolioInvestmentListReq_PUBLIC  PortfolioInvestmentListReq_Grouping = 1
	PortfolioInvestmentListReq_PRIVATE PortfolioInvestmentListReq_Grouping = 2
)

// Enum value maps for PortfolioInvestmentListReq_Grouping.
var (
	PortfolioInvestmentListReq_Grouping_name = map[int32]string{
		0: "ALL",
		1: "PUBLIC",
		2: "PRIVATE",
	}
	PortfolioInvestmentListReq_Grouping_value = map[string]int32{
		"ALL":     0,
		"PUBLIC":  1,
		"PRIVATE": 2,
	}
)

func (x PortfolioInvestmentListReq_Grouping) Enum() *PortfolioInvestmentListReq_Grouping {
	p := new(PortfolioInvestmentListReq_Grouping)
	*p = x
	return p
}

func (x PortfolioInvestmentListReq_Grouping) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortfolioInvestmentListReq_Grouping) Descriptor() protoreflect.EnumDescriptor {
	return file_pms_proto_enumTypes[2].Descriptor()
}

func (PortfolioInvestmentListReq_Grouping) Type() protoreflect.EnumType {
	return &file_pms_proto_enumTypes[2]
}

func (x PortfolioInvestmentListReq_Grouping) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortfolioInvestmentListReq_Grouping.Descriptor instead.
func (PortfolioInvestmentListReq_Grouping) EnumDescriptor() ([]byte, []int) {
	return file_pms_proto_rawDescGZIP(), []int{6, 0}
}

type EmptyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyReq) Reset() {
	*x = EmptyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pms_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyReq) ProtoMessage() {}

func (x *EmptyReq) ProtoReflect() protoreflect.Message {
	mi := &file_pms_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyReq.ProtoReflect.Descriptor instead.
func (*EmptyReq) Descriptor() ([]byte, []int) {
	return file_pms_proto_rawDescGZIP(), []int{0}
}

type EmptyRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyRsp) Reset() {
	*x = EmptyRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pms_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRsp) ProtoMessage() {}

func (x *EmptyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pms_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRsp.ProtoReflect.Descriptor instead.
func (*EmptyRsp) Descriptor() ([]byte, []int) {
	return file_pms_proto_rawDescGZIP(), []int{1}
}

type CreatePortfolioInvestmentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID        int64                                 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	PortfolioName string                                `protobuf:"bytes,2,opt,name=PortfolioName,proto3" json:"PortfolioName,omitempty"`
	Remark        string                                `protobuf:"bytes,3,opt,name=Remark,proto3" json:"Remark,omitempty"`
	Investments   []string                              `protobuf:"bytes,4,rep,name=Investments,proto3" json:"Investments,omitempty"`
	GroupType     CreatePortfolioInvestmentReq_Grouping `protobuf:"varint,5,opt,name=GroupType,proto3,enum=pb.CreatePortfolioInvestmentReq_Grouping" json:"GroupType,omitempty"`
}

func (x *CreatePortfolioInvestmentReq) Reset() {
	*x = CreatePortfolioInvestmentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pms_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePortfolioInvestmentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePortfolioInvestmentReq) ProtoMessage() {}

func (x *CreatePortfolioInvestmentReq) ProtoReflect() protoreflect.Message {
	mi := &file_pms_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePortfolioInvestmentReq.ProtoReflect.Descriptor instead.
func (*CreatePortfolioInvestmentReq) Descriptor() ([]byte, []int) {
	return file_pms_proto_rawDescGZIP(), []int{2}
}

func (x *CreatePortfolioInvestmentReq) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *CreatePortfolioInvestmentReq) GetPortfolioName() string {
	if x != nil {
		return x.PortfolioName
	}
	return ""
}

func (x *CreatePortfolioInvestmentReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *CreatePortfolioInvestmentReq) GetInvestments() []string {
	if x != nil {
		return x.Investments
	}
	return nil
}

func (x *CreatePortfolioInvestmentReq) GetGroupType() CreatePortfolioInvestmentReq_Grouping {
	if x != nil {
		return x.GroupType
	}
	return CreatePortfolioInvestmentReq_ALL
}

type CreatePortfolioInvestmentRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *CreatePortfolioInvestmentRsp) Reset() {
	*x = CreatePortfolioInvestmentRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pms_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePortfolioInvestmentRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePortfolioInvestmentRsp) ProtoMessage() {}

func (x *CreatePortfolioInvestmentRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pms_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePortfolioInvestmentRsp.ProtoReflect.Descriptor instead.
func (*CreatePortfolioInvestmentRsp) Descriptor() ([]byte, []int) {
	return file_pms_proto_rawDescGZIP(), []int{3}
}

func (x *CreatePortfolioInvestmentRsp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeletePortfolioInvestmentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *DeletePortfolioInvestmentReq) Reset() {
	*x = DeletePortfolioInvestmentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pms_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePortfolioInvestmentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePortfolioInvestmentReq) ProtoMessage() {}

func (x *DeletePortfolioInvestmentReq) ProtoReflect() protoreflect.Message {
	mi := &file_pms_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePortfolioInvestmentReq.ProtoReflect.Descriptor instead.
func (*DeletePortfolioInvestmentReq) Descriptor() ([]byte, []int) {
	return file_pms_proto_rawDescGZIP(), []int{4}
}

func (x *DeletePortfolioInvestmentReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdatePortfolioInvestmentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	UserID        int64    `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	PortfolioName string   `protobuf:"bytes,3,opt,name=PortfolioName,proto3" json:"PortfolioName,omitempty"`
	Remark        string   `protobuf:"bytes,4,opt,name=Remark,proto3" json:"Remark,omitempty"`
	Investments   []string `protobuf:"bytes,5,rep,name=Investments,proto3" json:"Investments,omitempty"`
}

func (x *UpdatePortfolioInvestmentReq) Reset() {
	*x = UpdatePortfolioInvestmentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pms_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePortfolioInvestmentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePortfolioInvestmentReq) ProtoMessage() {}

func (x *UpdatePortfolioInvestmentReq) ProtoReflect() protoreflect.Message {
	mi := &file_pms_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePortfolioInvestmentReq.ProtoReflect.Descriptor instead.
func (*UpdatePortfolioInvestmentReq) Descriptor() ([]byte, []int) {
	return file_pms_proto_rawDescGZIP(), []int{5}
}

func (x *UpdatePortfolioInvestmentReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdatePortfolioInvestmentReq) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UpdatePortfolioInvestmentReq) GetPortfolioName() string {
	if x != nil {
		return x.PortfolioName
	}
	return ""
}

func (x *UpdatePortfolioInvestmentReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UpdatePortfolioInvestmentReq) GetInvestments() []string {
	if x != nil {
		return x.Investments
	}
	return nil
}

type PortfolioInvestmentListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//组名和备注
	SearchContent string                              `protobuf:"bytes,1,opt,name=SearchContent,proto3" json:"SearchContent,omitempty"`
	GroupType     PortfolioInvestmentListReq_Grouping `protobuf:"varint,2,opt,name=GroupType,proto3,enum=pb.PortfolioInvestmentListReq_Grouping" json:"GroupType,omitempty"`
}

func (x *PortfolioInvestmentListReq) Reset() {
	*x = PortfolioInvestmentListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pms_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortfolioInvestmentListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortfolioInvestmentListReq) ProtoMessage() {}

func (x *PortfolioInvestmentListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pms_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortfolioInvestmentListReq.ProtoReflect.Descriptor instead.
func (*PortfolioInvestmentListReq) Descriptor() ([]byte, []int) {
	return file_pms_proto_rawDescGZIP(), []int{6}
}

func (x *PortfolioInvestmentListReq) GetSearchContent() string {
	if x != nil {
		return x.SearchContent
	}
	return ""
}

func (x *PortfolioInvestmentListReq) GetGroupType() PortfolioInvestmentListReq_Grouping {
	if x != nil {
		return x.GroupType
	}
	return PortfolioInvestmentListReq_ALL
}

type PortfolioInvestmentDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Remark      string   `protobuf:"bytes,3,opt,name=Remark,proto3" json:"Remark,omitempty"`
	Investments []string `protobuf:"bytes,4,rep,name=Investments,proto3" json:"Investments,omitempty"`
	Operator    string   `protobuf:"bytes,5,opt,name=Operator,proto3" json:"Operator,omitempty"`
	Updated     string   `protobuf:"bytes,6,opt,name=Updated,proto3" json:"Updated,omitempty"`
	Created     string   `protobuf:"bytes,7,opt,name=Created,proto3" json:"Created,omitempty"`
}

func (x *PortfolioInvestmentDetail) Reset() {
	*x = PortfolioInvestmentDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pms_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortfolioInvestmentDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortfolioInvestmentDetail) ProtoMessage() {}

func (x *PortfolioInvestmentDetail) ProtoReflect() protoreflect.Message {
	mi := &file_pms_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortfolioInvestmentDetail.ProtoReflect.Descriptor instead.
func (*PortfolioInvestmentDetail) Descriptor() ([]byte, []int) {
	return file_pms_proto_rawDescGZIP(), []int{7}
}

func (x *PortfolioInvestmentDetail) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PortfolioInvestmentDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PortfolioInvestmentDetail) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *PortfolioInvestmentDetail) GetInvestments() []string {
	if x != nil {
		return x.Investments
	}
	return nil
}

func (x *PortfolioInvestmentDetail) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *PortfolioInvestmentDetail) GetUpdated() string {
	if x != nil {
		return x.Updated
	}
	return ""
}

func (x *PortfolioInvestmentDetail) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

type PortfolioInvestmentListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details []*PortfolioInvestmentDetail `protobuf:"bytes,1,rep,name=Details,proto3" json:"Details,omitempty"`
}

func (x *PortfolioInvestmentListRsp) Reset() {
	*x = PortfolioInvestmentListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pms_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortfolioInvestmentListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortfolioInvestmentListRsp) ProtoMessage() {}

func (x *PortfolioInvestmentListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pms_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortfolioInvestmentListRsp.ProtoReflect.Descriptor instead.
func (*PortfolioInvestmentListRsp) Descriptor() ([]byte, []int) {
	return file_pms_proto_rawDescGZIP(), []int{8}
}

func (x *PortfolioInvestmentListRsp) GetDetails() []*PortfolioInvestmentDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

type PortfolioPerformanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID int64  `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Kline  Klines `protobuf:"varint,2,opt,name=Kline,proto3,enum=pb.Klines" json:"Kline,omitempty"`
}

func (x *PortfolioPerformanceReq) Reset() {
	*x = PortfolioPerformanceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pms_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortfolioPerformanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortfolioPerformanceReq) ProtoMessage() {}

func (x *PortfolioPerformanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_pms_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortfolioPerformanceReq.ProtoReflect.Descriptor instead.
func (*PortfolioPerformanceReq) Descriptor() ([]byte, []int) {
	return file_pms_proto_rawDescGZIP(), []int{9}
}

func (x *PortfolioPerformanceReq) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *PortfolioPerformanceReq) GetKline() Klines {
	if x != nil {
		return x.Kline
	}
	return Klines_K_7D
}

type DateValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateTime string `protobuf:"bytes,1,opt,name=DateTime,proto3" json:"DateTime,omitempty"`
	Rate     string `protobuf:"bytes,2,opt,name=Rate,proto3" json:"Rate,omitempty"`
}

func (x *DateValue) Reset() {
	*x = DateValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pms_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateValue) ProtoMessage() {}

func (x *DateValue) ProtoReflect() protoreflect.Message {
	mi := &file_pms_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateValue.ProtoReflect.Descriptor instead.
func (*DateValue) Descriptor() ([]byte, []int) {
	return file_pms_proto_rawDescGZIP(), []int{10}
}

func (x *DateValue) GetDateTime() string {
	if x != nil {
		return x.DateTime
	}
	return ""
}

func (x *DateValue) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

type Benchmark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Benchmark []*DateValue `protobuf:"bytes,1,rep,name=Benchmark,proto3" json:"Benchmark,omitempty"`
}

func (x *Benchmark) Reset() {
	*x = Benchmark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pms_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Benchmark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Benchmark) ProtoMessage() {}

func (x *Benchmark) ProtoReflect() protoreflect.Message {
	mi := &file_pms_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Benchmark.ProtoReflect.Descriptor instead.
func (*Benchmark) Descriptor() ([]byte, []int) {
	return file_pms_proto_rawDescGZIP(), []int{11}
}

func (x *Benchmark) GetBenchmark() []*DateValue {
	if x != nil {
		return x.Benchmark
	}
	return nil
}

type PortfolioPerformanceRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Benchmark             map[string]*Benchmark `protobuf:"bytes,1,rep,name=Benchmark,proto3" json:"Benchmark,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CumulativeBenchmarks  map[string]*Benchmark `protobuf:"bytes,2,rep,name=CumulativeBenchmarks,proto3" json:"CumulativeBenchmarks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CumulativePerformance []*DateValue          `protobuf:"bytes,3,rep,name=CumulativePerformance,proto3" json:"CumulativePerformance,omitempty"`
	DailyPerformance      []*DateValue          `protobuf:"bytes,4,rep,name=DailyPerformance,proto3" json:"DailyPerformance,omitempty"`
	ReturnRate            map[string]string     `protobuf:"bytes,5,rep,name=ReturnRate,proto3" json:"ReturnRate,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PortfolioPerformanceRsp) Reset() {
	*x = PortfolioPerformanceRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pms_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortfolioPerformanceRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortfolioPerformanceRsp) ProtoMessage() {}

func (x *PortfolioPerformanceRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pms_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortfolioPerformanceRsp.ProtoReflect.Descriptor instead.
func (*PortfolioPerformanceRsp) Descriptor() ([]byte, []int) {
	return file_pms_proto_rawDescGZIP(), []int{12}
}

func (x *PortfolioPerformanceRsp) GetBenchmark() map[string]*Benchmark {
	if x != nil {
		return x.Benchmark
	}
	return nil
}

func (x *PortfolioPerformanceRsp) GetCumulativeBenchmarks() map[string]*Benchmark {
	if x != nil {
		return x.CumulativeBenchmarks
	}
	return nil
}

func (x *PortfolioPerformanceRsp) GetCumulativePerformance() []*DateValue {
	if x != nil {
		return x.CumulativePerformance
	}
	return nil
}

func (x *PortfolioPerformanceRsp) GetDailyPerformance() []*DateValue {
	if x != nil {
		return x.DailyPerformance
	}
	return nil
}

func (x *PortfolioPerformanceRsp) GetReturnRate() map[string]string {
	if x != nil {
		return x.ReturnRate
	}
	return nil
}

type Investment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinUnit                string `protobuf:"bytes,1,opt,name=CoinUnit,proto3" json:"CoinUnit,omitempty"`
	Position                string `protobuf:"bytes,2,opt,name=Position,proto3" json:"Position,omitempty"`
	CostBasis               string `protobuf:"bytes,3,opt,name=CostBasis,proto3" json:"CostBasis,omitempty"`
	LastPrice               string `protobuf:"bytes,4,opt,name=LastPrice,proto3" json:"LastPrice,omitempty"`
	MarketValue             string `protobuf:"bytes,5,opt,name=MarketValue,proto3" json:"MarketValue,omitempty"`
	MarketValuePercent      string `protobuf:"bytes,6,opt,name=MarketValuePercent,proto3" json:"MarketValuePercent,omitempty"`
	DailyChange             string `protobuf:"bytes,7,opt,name=DailyChange,proto3" json:"DailyChange,omitempty"`
	DailyProfit             string `protobuf:"bytes,8,opt,name=DailyProfit,proto3" json:"DailyProfit,omitempty"`
	UnrealizedProfit        string `protobuf:"bytes,9,opt,name=Unrealized_profit,json=UnrealizedProfit,proto3" json:"Unrealized_profit,omitempty"`
	UnrealizedProfitPercent string `protobuf:"bytes,10,opt,name=Unrealized_profit_percent,json=UnrealizedProfitPercent,proto3" json:"Unrealized_profit_percent,omitempty"`
	EarlierPrice            string `protobuf:"bytes,11,opt,name=EarlierPrice,proto3" json:"EarlierPrice,omitempty"`
	DailyProfitAndLoss      string `protobuf:"bytes,12,opt,name=DailyProfitAndLoss,proto3" json:"DailyProfitAndLoss,omitempty"`
	RealizedProfitAndLoss   string `protobuf:"bytes,13,opt,name=RealizedProfitAndLoss,proto3" json:"RealizedProfitAndLoss,omitempty"`
}

func (x *Investment) Reset() {
	*x = Investment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pms_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Investment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Investment) ProtoMessage() {}

func (x *Investment) ProtoReflect() protoreflect.Message {
	mi := &file_pms_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Investment.ProtoReflect.Descriptor instead.
func (*Investment) Descriptor() ([]byte, []int) {
	return file_pms_proto_rawDescGZIP(), []int{13}
}

func (x *Investment) GetCoinUnit() string {
	if x != nil {
		return x.CoinUnit
	}
	return ""
}

func (x *Investment) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Investment) GetCostBasis() string {
	if x != nil {
		return x.CostBasis
	}
	return ""
}

func (x *Investment) GetLastPrice() string {
	if x != nil {
		return x.LastPrice
	}
	return ""
}

func (x *Investment) GetMarketValue() string {
	if x != nil {
		return x.MarketValue
	}
	return ""
}

func (x *Investment) GetMarketValuePercent() string {
	if x != nil {
		return x.MarketValuePercent
	}
	return ""
}

func (x *Investment) GetDailyChange() string {
	if x != nil {
		return x.DailyChange
	}
	return ""
}

func (x *Investment) GetDailyProfit() string {
	if x != nil {
		return x.DailyProfit
	}
	return ""
}

func (x *Investment) GetUnrealizedProfit() string {
	if x != nil {
		return x.UnrealizedProfit
	}
	return ""
}

func (x *Investment) GetUnrealizedProfitPercent() string {
	if x != nil {
		return x.UnrealizedProfitPercent
	}
	return ""
}

func (x *Investment) GetEarlierPrice() string {
	if x != nil {
		return x.EarlierPrice
	}
	return ""
}

func (x *Investment) GetDailyProfitAndLoss() string {
	if x != nil {
		return x.DailyProfitAndLoss
	}
	return ""
}

func (x *Investment) GetRealizedProfitAndLoss() string {
	if x != nil {
		return x.RealizedProfitAndLoss
	}
	return ""
}

type GroupedDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    int64         `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Name      string        `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Attribute string        `protobuf:"bytes,3,opt,name=Attribute,proto3" json:"Attribute,omitempty"`
	Symbols   []*Investment `protobuf:"bytes,5,rep,name=Symbols,proto3" json:"Symbols,omitempty"`
}

func (x *GroupedDetail) Reset() {
	*x = GroupedDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pms_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupedDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupedDetail) ProtoMessage() {}

func (x *GroupedDetail) ProtoReflect() protoreflect.Message {
	mi := &file_pms_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupedDetail.ProtoReflect.Descriptor instead.
func (*GroupedDetail) Descriptor() ([]byte, []int) {
	return file_pms_proto_rawDescGZIP(), []int{14}
}

func (x *GroupedDetail) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *GroupedDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GroupedDetail) GetAttribute() string {
	if x != nil {
		return x.Attribute
	}
	return ""
}

func (x *GroupedDetail) GetSymbols() []*Investment {
	if x != nil {
		return x.Symbols
	}
	return nil
}

type GroupedInvstment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Detail []*GroupedDetail `protobuf:"bytes,1,rep,name=detail,proto3" json:"detail,omitempty"`
}

func (x *GroupedInvstment) Reset() {
	*x = GroupedInvstment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pms_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupedInvstment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupedInvstment) ProtoMessage() {}

func (x *GroupedInvstment) ProtoReflect() protoreflect.Message {
	mi := &file_pms_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupedInvstment.ProtoReflect.Descriptor instead.
func (*GroupedInvstment) Descriptor() ([]byte, []int) {
	return file_pms_proto_rawDescGZIP(), []int{15}
}

func (x *GroupedInvstment) GetDetail() []*GroupedDetail {
	if x != nil {
		return x.Detail
	}
	return nil
}

type AccountAnalysisReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    int64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	IsGrouped bool  `protobuf:"varint,2,opt,name=IsGrouped,proto3" json:"IsGrouped,omitempty"`
}

func (x *AccountAnalysisReq) Reset() {
	*x = AccountAnalysisReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pms_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountAnalysisReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountAnalysisReq) ProtoMessage() {}

func (x *AccountAnalysisReq) ProtoReflect() protoreflect.Message {
	mi := &file_pms_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountAnalysisReq.ProtoReflect.Descriptor instead.
func (*AccountAnalysisReq) Descriptor() ([]byte, []int) {
	return file_pms_proto_rawDescGZIP(), []int{16}
}

func (x *AccountAnalysisReq) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *AccountAnalysisReq) GetIsGrouped() bool {
	if x != nil {
		return x.IsGrouped
	}
	return false
}

type AccountAnalysisRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Investments             map[string]*GroupedInvstment `protobuf:"bytes,1,rep,name=Investments,proto3" json:"Investments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NetLiquidation          string                       `protobuf:"bytes,2,opt,name=NetLiquidation,proto3" json:"NetLiquidation,omitempty"`
	DailyChange             string                       `protobuf:"bytes,3,opt,name=DailyChange,proto3" json:"DailyChange,omitempty"`
	DailyProfit             string                       `protobuf:"bytes,4,opt,name=DailyProfit,proto3" json:"DailyProfit,omitempty"`
	DailyUnrealizedProfit   string                       `protobuf:"bytes,5,opt,name=DailyUnrealizedProfit,proto3" json:"DailyUnrealizedProfit,omitempty"`
	UnrealizedProfitPercent string                       `protobuf:"bytes,6,opt,name=UnrealizedProfitPercent,proto3" json:"UnrealizedProfitPercent,omitempty"`
}

func (x *AccountAnalysisRsp) Reset() {
	*x = AccountAnalysisRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pms_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountAnalysisRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountAnalysisRsp) ProtoMessage() {}

func (x *AccountAnalysisRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pms_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountAnalysisRsp.ProtoReflect.Descriptor instead.
func (*AccountAnalysisRsp) Descriptor() ([]byte, []int) {
	return file_pms_proto_rawDescGZIP(), []int{17}
}

func (x *AccountAnalysisRsp) GetInvestments() map[string]*GroupedInvstment {
	if x != nil {
		return x.Investments
	}
	return nil
}

func (x *AccountAnalysisRsp) GetNetLiquidation() string {
	if x != nil {
		return x.NetLiquidation
	}
	return ""
}

func (x *AccountAnalysisRsp) GetDailyChange() string {
	if x != nil {
		return x.DailyChange
	}
	return ""
}

func (x *AccountAnalysisRsp) GetDailyProfit() string {
	if x != nil {
		return x.DailyProfit
	}
	return ""
}

func (x *AccountAnalysisRsp) GetDailyUnrealizedProfit() string {
	if x != nil {
		return x.DailyUnrealizedProfit
	}
	return ""
}

func (x *AccountAnalysisRsp) GetUnrealizedProfitPercent() string {
	if x != nil {
		return x.UnrealizedProfitPercent
	}
	return ""
}

var File_pms_proto protoreflect.FileDescriptor

var file_pms_proto_rawDesc = []byte{
	0x0a, 0x09, 0x70, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x22,
	0x0a, 0x0a, 0x08, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x22, 0x0a, 0x0a, 0x08, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x73, 0x70, 0x22, 0x8d, 0x02, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x0d, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c,
	0x69, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x20,
	0x0a, 0x0b, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x47, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x09,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2c, 0x0a, 0x08, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52,
	0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x02, 0x22, 0x2e, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x0d, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c,
	0x69, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x20,
	0x0a, 0x0b, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0xb7, 0x01, 0x0a, 0x1a, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x24, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x67, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2c, 0x0a, 0x08,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x02, 0x22, 0xc9, 0x01, 0x0a, 0x19, 0x50,
	0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x55, 0x0a, 0x1a, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f,
	0x6c, 0x69, 0x6f, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x66,
	0x6f, 0x6c, 0x69, 0x6f, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x53, 0x0a,
	0x17, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x05, 0x4b, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4b, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x05, 0x4b, 0x6c, 0x69,
	0x6e, 0x65, 0x22, 0x3b, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x52,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x52, 0x61, 0x74, 0x65, 0x22,
	0x38, 0x0a, 0x09, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x2b, 0x0a, 0x09,
	0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xff, 0x04, 0x0a, 0x17, 0x50, 0x6f,
	0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x09, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x73, 0x70, 0x2e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x69, 0x0a, 0x14, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x65, 0x6e,
	0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x70, 0x62, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x73, 0x70, 0x2e, 0x43, 0x75, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x43, 0x0a, 0x15, 0x43, 0x75,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x39, 0x0a, 0x10, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x73, 0x70, 0x2e, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x1a, 0x4b, 0x0a, 0x0e, 0x42, 0x65, 0x6e, 0x63, 0x68,
	0x6d, 0x61, 0x72, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e,
	0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a, 0x19, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72,
	0x6b, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x89, 0x04, 0x0a, 0x0a,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f,
	0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f,
	0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x73, 0x74, 0x42, 0x61, 0x73, 0x69, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x73, 0x74, 0x42, 0x61, 0x73, 0x69, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x12, 0x3a, 0x0a, 0x19, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x45, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x41, 0x6e, 0x64, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x4c, 0x6f, 0x73,
	0x73, 0x12, 0x34, 0x0a, 0x15, 0x52, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x52, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x41, 0x6e, 0x64, 0x4c, 0x6f, 0x73, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x22, 0x3d, 0x0a,
	0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x29, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x4a, 0x0a, 0x12,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x22, 0x91, 0x03, 0x0a, 0x12, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x73, 0x70, 0x12,
	0x49, 0x0a, 0x0b, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x73, 0x70, 0x2e, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x4e, 0x65,
	0x74, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x55,
	0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x55, 0x6e, 0x72, 0x65,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x17,
	0x55, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x55,
	0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x1a, 0x54, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x3c, 0x0a, 0x06,
	0x4b, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x5f, 0x37, 0x44, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x4b, 0x5f, 0x4d, 0x54, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4b,
	0x5f, 0x31, 0x4d, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4b, 0x5f, 0x59, 0x54, 0x44, 0x10, 0x03,
	0x12, 0x08, 0x0a, 0x04, 0x4b, 0x5f, 0x31, 0x59, 0x10, 0x04, 0x32, 0xe5, 0x03, 0x0a, 0x03, 0x50,
	0x6d, 0x73, 0x12, 0x4b, 0x0a, 0x19, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x20, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x66,
	0x6f, 0x6c, 0x69, 0x6f, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x73, 0x70, 0x12,
	0x4b, 0x0a, 0x19, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c,
	0x69, 0x6f, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x2e, 0x70,
	0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69,
	0x6f, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0c,
	0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x73, 0x70, 0x12, 0x4b, 0x0a, 0x19,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x73, 0x70, 0x12, 0x5c, 0x0a, 0x1a, 0x67, 0x65, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x16, 0x2e,
	0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x73, 0x70, 0x12, 0x53, 0x0a,
	0x17, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x66,
	0x6f, 0x6c, 0x69, 0x6f, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x73, 0x70, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_pms_proto_rawDescOnce sync.Once
	file_pms_proto_rawDescData = file_pms_proto_rawDesc
)

func file_pms_proto_rawDescGZIP() []byte {
	file_pms_proto_rawDescOnce.Do(func() {
		file_pms_proto_rawDescData = protoimpl.X.CompressGZIP(file_pms_proto_rawDescData)
	})
	return file_pms_proto_rawDescData
}

var file_pms_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_pms_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_pms_proto_goTypes = []interface{}{
	(Klines)(0), // 0: pb.Klines
	(CreatePortfolioInvestmentReq_Grouping)(0), // 1: pb.CreatePortfolioInvestmentReq.Grouping
	(PortfolioInvestmentListReq_Grouping)(0),   // 2: pb.PortfolioInvestmentListReq.Grouping
	(*EmptyReq)(nil),                           // 3: pb.EmptyReq
	(*EmptyRsp)(nil),                           // 4: pb.EmptyRsp
	(*CreatePortfolioInvestmentReq)(nil),       // 5: pb.CreatePortfolioInvestmentReq
	(*CreatePortfolioInvestmentRsp)(nil),       // 6: pb.CreatePortfolioInvestmentRsp
	(*DeletePortfolioInvestmentReq)(nil),       // 7: pb.DeletePortfolioInvestmentReq
	(*UpdatePortfolioInvestmentReq)(nil),       // 8: pb.UpdatePortfolioInvestmentReq
	(*PortfolioInvestmentListReq)(nil),         // 9: pb.PortfolioInvestmentListReq
	(*PortfolioInvestmentDetail)(nil),          // 10: pb.PortfolioInvestmentDetail
	(*PortfolioInvestmentListRsp)(nil),         // 11: pb.PortfolioInvestmentListRsp
	(*PortfolioPerformanceReq)(nil),            // 12: pb.PortfolioPerformanceReq
	(*DateValue)(nil),                          // 13: pb.DateValue
	(*Benchmark)(nil),                          // 14: pb.Benchmark
	(*PortfolioPerformanceRsp)(nil),            // 15: pb.PortfolioPerformanceRsp
	(*Investment)(nil),                         // 16: pb.Investment
	(*GroupedDetail)(nil),                      // 17: pb.GroupedDetail
	(*GroupedInvstment)(nil),                   // 18: pb.GroupedInvstment
	(*AccountAnalysisReq)(nil),                 // 19: pb.AccountAnalysisReq
	(*AccountAnalysisRsp)(nil),                 // 20: pb.AccountAnalysisRsp
	nil,                                        // 21: pb.PortfolioPerformanceRsp.BenchmarkEntry
	nil,                                        // 22: pb.PortfolioPerformanceRsp.CumulativeBenchmarksEntry
	nil,                                        // 23: pb.PortfolioPerformanceRsp.ReturnRateEntry
	nil,                                        // 24: pb.AccountAnalysisRsp.InvestmentsEntry
}
var file_pms_proto_depIdxs = []int32{
	1,  // 0: pb.CreatePortfolioInvestmentReq.GroupType:type_name -> pb.CreatePortfolioInvestmentReq.Grouping
	2,  // 1: pb.PortfolioInvestmentListReq.GroupType:type_name -> pb.PortfolioInvestmentListReq.Grouping
	10, // 2: pb.PortfolioInvestmentListRsp.Details:type_name -> pb.PortfolioInvestmentDetail
	0,  // 3: pb.PortfolioPerformanceReq.Kline:type_name -> pb.Klines
	13, // 4: pb.Benchmark.Benchmark:type_name -> pb.DateValue
	21, // 5: pb.PortfolioPerformanceRsp.Benchmark:type_name -> pb.PortfolioPerformanceRsp.BenchmarkEntry
	22, // 6: pb.PortfolioPerformanceRsp.CumulativeBenchmarks:type_name -> pb.PortfolioPerformanceRsp.CumulativeBenchmarksEntry
	13, // 7: pb.PortfolioPerformanceRsp.CumulativePerformance:type_name -> pb.DateValue
	13, // 8: pb.PortfolioPerformanceRsp.DailyPerformance:type_name -> pb.DateValue
	23, // 9: pb.PortfolioPerformanceRsp.ReturnRate:type_name -> pb.PortfolioPerformanceRsp.ReturnRateEntry
	16, // 10: pb.GroupedDetail.Symbols:type_name -> pb.Investment
	17, // 11: pb.GroupedInvstment.detail:type_name -> pb.GroupedDetail
	24, // 12: pb.AccountAnalysisRsp.Investments:type_name -> pb.AccountAnalysisRsp.InvestmentsEntry
	14, // 13: pb.PortfolioPerformanceRsp.BenchmarkEntry.value:type_name -> pb.Benchmark
	14, // 14: pb.PortfolioPerformanceRsp.CumulativeBenchmarksEntry.value:type_name -> pb.Benchmark
	18, // 15: pb.AccountAnalysisRsp.InvestmentsEntry.value:type_name -> pb.GroupedInvstment
	5,  // 16: pb.Pms.createPortfolioInvestment:input_type -> pb.CreatePortfolioInvestmentReq
	7,  // 17: pb.Pms.deletePortfolioInvestment:input_type -> pb.DeletePortfolioInvestmentReq
	8,  // 18: pb.Pms.updatePortfolioInvestment:input_type -> pb.UpdatePortfolioInvestmentReq
	9,  // 19: pb.Pms.getPortfolioInvestmentList:input_type -> pb.PortfolioInvestmentListReq
	19, // 20: pb.Pms.GetAccountAnalysis:input_type -> pb.AccountAnalysisReq
	12, // 21: pb.Pms.getPortfolioPerformance:input_type -> pb.PortfolioPerformanceReq
	4,  // 22: pb.Pms.createPortfolioInvestment:output_type -> pb.EmptyRsp
	4,  // 23: pb.Pms.deletePortfolioInvestment:output_type -> pb.EmptyRsp
	4,  // 24: pb.Pms.updatePortfolioInvestment:output_type -> pb.EmptyRsp
	11, // 25: pb.Pms.getPortfolioInvestmentList:output_type -> pb.PortfolioInvestmentListRsp
	20, // 26: pb.Pms.GetAccountAnalysis:output_type -> pb.AccountAnalysisRsp
	15, // 27: pb.Pms.getPortfolioPerformance:output_type -> pb.PortfolioPerformanceRsp
	22, // [22:28] is the sub-list for method output_type
	16, // [16:22] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_pms_proto_init() }
func file_pms_proto_init() {
	if File_pms_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pms_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pms_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pms_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePortfolioInvestmentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pms_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePortfolioInvestmentRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pms_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePortfolioInvestmentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pms_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePortfolioInvestmentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pms_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortfolioInvestmentListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pms_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortfolioInvestmentDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pms_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortfolioInvestmentListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pms_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortfolioPerformanceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pms_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pms_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Benchmark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pms_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortfolioPerformanceRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pms_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Investment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pms_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupedDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pms_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupedInvstment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pms_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountAnalysisReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pms_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountAnalysisRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pms_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pms_proto_goTypes,
		DependencyIndexes: file_pms_proto_depIdxs,
		EnumInfos:         file_pms_proto_enumTypes,
		MessageInfos:      file_pms_proto_msgTypes,
	}.Build()
	File_pms_proto = out.File
	file_pms_proto_rawDesc = nil
	file_pms_proto_goTypes = nil
	file_pms_proto_depIdxs = nil
}
