// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: market_data.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Decimal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value   uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Precise uint32 `protobuf:"varint,2,opt,name=precise,proto3" json:"precise,omitempty"`
}

func (x *Decimal) Reset() {
	*x = Decimal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decimal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decimal) ProtoMessage() {}

func (x *Decimal) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decimal.ProtoReflect.Descriptor instead.
func (*Decimal) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{0}
}

func (x *Decimal) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Decimal) GetPrecise() uint32 {
	if x != nil {
		return x.Precise
	}
	return 0
}

type Depth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price             *Decimal            `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
	Volume            *Decimal            `protobuf:"bytes,2,opt,name=volume,proto3" json:"volume,omitempty"`
	VolumeByExchanges map[string]*Decimal `protobuf:"bytes,3,rep,name=volume_by_exchanges,json=volumeByExchanges,proto3" json:"volume_by_exchanges,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Depth) Reset() {
	*x = Depth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Depth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Depth) ProtoMessage() {}

func (x *Depth) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Depth.ProtoReflect.Descriptor instead.
func (*Depth) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{1}
}

func (x *Depth) GetPrice() *Decimal {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *Depth) GetVolume() *Decimal {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *Depth) GetVolumeByExchanges() map[string]*Decimal {
	if x != nil {
		return x.VolumeByExchanges
	}
	return nil
}

type DepthQuote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange      string   `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Symbol        string   `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	SequenceNo    uint64   `protobuf:"varint,3,opt,name=sequence_no,json=sequenceNo,proto3" json:"sequence_no,omitempty"`
	OriginTime    uint64   `protobuf:"varint,4,opt,name=origin_time,json=originTime,proto3" json:"origin_time,omitempty"`
	ArriveTime    uint64   `protobuf:"varint,5,opt,name=arrive_time,json=arriveTime,proto3" json:"arrive_time,omitempty"`
	ServerTime    uint64   `protobuf:"varint,6,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	PricePrecise  uint32   `protobuf:"varint,7,opt,name=price_precise,json=pricePrecise,proto3" json:"price_precise,omitempty"`
	VolumePrecise uint32   `protobuf:"varint,8,opt,name=volume_precise,json=volumePrecise,proto3" json:"volume_precise,omitempty"`
	AmountPrecise uint32   `protobuf:"varint,9,opt,name=amount_precise,json=amountPrecise,proto3" json:"amount_precise,omitempty"`
	IsSnap        bool     `protobuf:"varint,10,opt,name=is_snap,json=isSnap,proto3" json:"is_snap,omitempty"`
	Asks          []*Depth `protobuf:"bytes,11,rep,name=asks,proto3" json:"asks,omitempty"`
	Bids          []*Depth `protobuf:"bytes,12,rep,name=bids,proto3" json:"bids,omitempty"`
}

func (x *DepthQuote) Reset() {
	*x = DepthQuote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepthQuote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepthQuote) ProtoMessage() {}

func (x *DepthQuote) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepthQuote.ProtoReflect.Descriptor instead.
func (*DepthQuote) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{2}
}

func (x *DepthQuote) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *DepthQuote) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *DepthQuote) GetSequenceNo() uint64 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *DepthQuote) GetOriginTime() uint64 {
	if x != nil {
		return x.OriginTime
	}
	return 0
}

func (x *DepthQuote) GetArriveTime() uint64 {
	if x != nil {
		return x.ArriveTime
	}
	return 0
}

func (x *DepthQuote) GetServerTime() uint64 {
	if x != nil {
		return x.ServerTime
	}
	return 0
}

func (x *DepthQuote) GetPricePrecise() uint32 {
	if x != nil {
		return x.PricePrecise
	}
	return 0
}

func (x *DepthQuote) GetVolumePrecise() uint32 {
	if x != nil {
		return x.VolumePrecise
	}
	return 0
}

func (x *DepthQuote) GetAmountPrecise() uint32 {
	if x != nil {
		return x.AmountPrecise
	}
	return 0
}

func (x *DepthQuote) GetIsSnap() bool {
	if x != nil {
		return x.IsSnap
	}
	return false
}

func (x *DepthQuote) GetAsks() []*Depth {
	if x != nil {
		return x.Asks
	}
	return nil
}

func (x *DepthQuote) GetBids() []*Depth {
	if x != nil {
		return x.Bids
	}
	return nil
}

type KlineData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time       uint64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Exchange   string   `protobuf:"bytes,2,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Symbol     string   `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	PxOpen     *Decimal `protobuf:"bytes,4,opt,name=px_open,json=pxOpen,proto3" json:"px_open,omitempty"`
	PxHigh     *Decimal `protobuf:"bytes,5,opt,name=px_high,json=pxHigh,proto3" json:"px_high,omitempty"`
	PxLow      *Decimal `protobuf:"bytes,6,opt,name=px_low,json=pxLow,proto3" json:"px_low,omitempty"`
	PxClose    *Decimal `protobuf:"bytes,7,opt,name=px_close,json=pxClose,proto3" json:"px_close,omitempty"`
	Volume     *Decimal `protobuf:"bytes,8,opt,name=volume,proto3" json:"volume,omitempty"`
	Resolution uint32   `protobuf:"varint,9,opt,name=resolution,proto3" json:"resolution,omitempty"`
	SequenceNo uint64   `protobuf:"varint,10,opt,name=sequence_no,json=sequenceNo,proto3" json:"sequence_no,omitempty"`
}

func (x *KlineData) Reset() {
	*x = KlineData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KlineData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KlineData) ProtoMessage() {}

func (x *KlineData) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KlineData.ProtoReflect.Descriptor instead.
func (*KlineData) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{3}
}

func (x *KlineData) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *KlineData) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *KlineData) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *KlineData) GetPxOpen() *Decimal {
	if x != nil {
		return x.PxOpen
	}
	return nil
}

func (x *KlineData) GetPxHigh() *Decimal {
	if x != nil {
		return x.PxHigh
	}
	return nil
}

func (x *KlineData) GetPxLow() *Decimal {
	if x != nil {
		return x.PxLow
	}
	return nil
}

func (x *KlineData) GetPxClose() *Decimal {
	if x != nil {
		return x.PxClose
	}
	return nil
}

func (x *KlineData) GetVolume() *Decimal {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *KlineData) GetResolution() uint32 {
	if x != nil {
		return x.Resolution
	}
	return 0
}

func (x *KlineData) GetSequenceNo() uint64 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

type TradeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time       uint64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Price      *Decimal `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	Volume     *Decimal `protobuf:"bytes,3,opt,name=volume,proto3" json:"volume,omitempty"`
	Symbol     string   `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Exchange   string   `protobuf:"bytes,5,opt,name=exchange,proto3" json:"exchange,omitempty"`
	SequenceNo uint64   `protobuf:"varint,6,opt,name=sequence_no,json=sequenceNo,proto3" json:"sequence_no,omitempty"`
}

func (x *TradeData) Reset() {
	*x = TradeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeData) ProtoMessage() {}

func (x *TradeData) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeData.ProtoReflect.Descriptor instead.
func (*TradeData) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{4}
}

func (x *TradeData) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *TradeData) GetPrice() *Decimal {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *TradeData) GetVolume() *Decimal {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *TradeData) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TradeData) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *TradeData) GetSequenceNo() uint64 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

var File_market_data_proto protoreflect.FileDescriptor

var file_market_data_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x39, 0x0a, 0x07, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x65, 0x22, 0xe8,
	0x01, 0x0a, 0x05, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x13, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x2e,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x79,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0x4e, 0x0a, 0x16, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x42, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x88, 0x03, 0x0a, 0x0a, 0x44, 0x65,
	0x70, 0x74, 0x68, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x65, 0x63, 0x69, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f,
	0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x12, 0x1a, 0x0a, 0x04,
	0x61, 0x73, 0x6b, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x44, 0x65, 0x70,
	0x74, 0x68, 0x52, 0x04, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1a, 0x0a, 0x04, 0x62, 0x69, 0x64, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x52, 0x04,
	0x62, 0x69, 0x64, 0x73, 0x22, 0xc2, 0x02, 0x0a, 0x09, 0x4b, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x21, 0x0a, 0x07, 0x70, 0x78,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x70, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x21, 0x0a,
	0x07, 0x70, 0x78, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x70, 0x78, 0x48, 0x69, 0x67, 0x68,
	0x12, 0x1f, 0x0a, 0x06, 0x70, 0x78, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x70, 0x78, 0x4c, 0x6f,
	0x77, 0x12, 0x23, 0x0a, 0x08, 0x70, 0x78, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x07, 0x70,
	0x78, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x22, 0xb6, 0x01, 0x0a, 0x09, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x4e, 0x6f, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_market_data_proto_rawDescOnce sync.Once
	file_market_data_proto_rawDescData = file_market_data_proto_rawDesc
)

func file_market_data_proto_rawDescGZIP() []byte {
	file_market_data_proto_rawDescOnce.Do(func() {
		file_market_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_market_data_proto_rawDescData)
	})
	return file_market_data_proto_rawDescData
}

var file_market_data_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_market_data_proto_goTypes = []interface{}{
	(*Decimal)(nil),    // 0: Decimal
	(*Depth)(nil),      // 1: Depth
	(*DepthQuote)(nil), // 2: DepthQuote
	(*KlineData)(nil),  // 3: KlineData
	(*TradeData)(nil),  // 4: TradeData
	nil,                // 5: Depth.VolumeByExchangesEntry
}
var file_market_data_proto_depIdxs = []int32{
	0,  // 0: Depth.price:type_name -> Decimal
	0,  // 1: Depth.volume:type_name -> Decimal
	5,  // 2: Depth.volume_by_exchanges:type_name -> Depth.VolumeByExchangesEntry
	1,  // 3: DepthQuote.asks:type_name -> Depth
	1,  // 4: DepthQuote.bids:type_name -> Depth
	0,  // 5: KlineData.px_open:type_name -> Decimal
	0,  // 6: KlineData.px_high:type_name -> Decimal
	0,  // 7: KlineData.px_low:type_name -> Decimal
	0,  // 8: KlineData.px_close:type_name -> Decimal
	0,  // 9: KlineData.volume:type_name -> Decimal
	0,  // 10: TradeData.price:type_name -> Decimal
	0,  // 11: TradeData.volume:type_name -> Decimal
	0,  // 12: Depth.VolumeByExchangesEntry.value:type_name -> Decimal
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_market_data_proto_init() }
func file_market_data_proto_init() {
	if File_market_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_market_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Decimal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Depth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepthQuote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KlineData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_market_data_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_market_data_proto_goTypes,
		DependencyIndexes: file_market_data_proto_depIdxs,
		MessageInfos:      file_market_data_proto_msgTypes,
	}.Build()
	File_market_data_proto = out.File
	file_market_data_proto_rawDesc = nil
	file_market_data_proto_goTypes = nil
	file_market_data_proto_depIdxs = nil
}
