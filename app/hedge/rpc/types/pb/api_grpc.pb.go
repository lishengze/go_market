// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HedgeClient is the client API for Hedge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HedgeClient interface {
	CreateOrder(ctx context.Context, in *OrderReq, opts ...grpc.CallOption) (*OrderRsp, error)
}

type hedgeClient struct {
	cc grpc.ClientConnInterface
}

func NewHedgeClient(cc grpc.ClientConnInterface) HedgeClient {
	return &hedgeClient{cc}
}

func (c *hedgeClient) CreateOrder(ctx context.Context, in *OrderReq, opts ...grpc.CallOption) (*OrderRsp, error) {
	out := new(OrderRsp)
	err := c.cc.Invoke(ctx, "/hedge.service.v1.Hedge/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HedgeServer is the server API for Hedge service.
// All implementations must embed UnimplementedHedgeServer
// for forward compatibility
type HedgeServer interface {
	CreateOrder(context.Context, *OrderReq) (*OrderRsp, error)
	mustEmbedUnimplementedHedgeServer()
}

// UnimplementedHedgeServer must be embedded to have forward compatible implementations.
type UnimplementedHedgeServer struct {
}

func (UnimplementedHedgeServer) CreateOrder(context.Context, *OrderReq) (*OrderRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedHedgeServer) mustEmbedUnimplementedHedgeServer() {}

// UnsafeHedgeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HedgeServer will
// result in compilation errors.
type UnsafeHedgeServer interface {
	mustEmbedUnimplementedHedgeServer()
}

func RegisterHedgeServer(s grpc.ServiceRegistrar, srv HedgeServer) {
	s.RegisterService(&Hedge_ServiceDesc, srv)
}

func _Hedge_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HedgeServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hedge.service.v1.Hedge/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HedgeServer).CreateOrder(ctx, req.(*OrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Hedge_ServiceDesc is the grpc.ServiceDesc for Hedge service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hedge_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hedge.service.v1.Hedge",
	HandlerType: (*HedgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _Hedge_CreateOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
