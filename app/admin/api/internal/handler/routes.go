// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	hedge "bcts/app/admin/api/internal/handler/hedge"
	member "bcts/app/admin/api/internal/handler/member"
	offlinetrade "bcts/app/admin/api/internal/handler/offlinetrade"
	withdraw "bcts/app/admin/api/internal/handler/withdraw"
	"bcts/app/admin/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/risk/monitor",
				Handler: hedge.GetRiskMonitorHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/hedge"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/member/:id",
				Handler: member.GetMemberInfoHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/admin"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/withdraw/:id",
				Handler: withdraw.GetWithdrawInfoHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/withdraw"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JwtAuthMiddleware, serverCtx.RbacMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/offlinetrade",
					Handler: offlinetrade.CreateOfflineTradeHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/offlinetrade/:id",
					Handler: offlinetrade.UpdateOfflineTradeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/offlinetrade/:id",
					Handler: offlinetrade.GetOneOfflineTradeHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/offlinetrade/:id",
					Handler: offlinetrade.DeleteOfflineTradeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/offlinetrade",
					Handler: offlinetrade.GetAllOfflineTradeHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/operate"),
	)
}
