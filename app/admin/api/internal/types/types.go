// Code generated by goctl. DO NOT EDIT.
package types

type Pager struct {
	Page     int64       `form:"page"`      // 页数
	PageSize int64       `form:"page_size"` // 每页多少条数据
	Order    interface{} `form:"order,optional"`
	Where    interface{} `form:"where,optional"`
}

type ReqQueryHedgeRisk struct {
	Symbol         string `json:"symbol"`           //品种,空表示全部
	Direction      int    `json:"direction"`        //成交方向，0表示买，1表示卖
	UnitHedgingPnl string `json:"unit_hedging_pnl"` //对冲盈亏币种
	StartTime      string `json:"start_time"`       //成交起始时间,格式：2020-12-04 16:29:27
	EndTime        string `json:"end_time"`         //成交结束时间,格式：2020-12-04 16:29:27
	TradeID        string `json:"trade_id"`         //中央对手方成交编号
	Status         string `json:"status"`           //对冲状态, "0":未对冲 "1":对冲处理中  "2":已完成  "3": 异常 ,空表示全部。多选，多个状态间用",”隔开。
	Page           int    `json:"page"`             //页码
	PageSize       int    `json:"page_size"`        //每页的条数
}

type QueryHedgeRiskReply struct {
	TradeID          string `json:"trade_id"`           // 中央对手方成交编号
	Symbol           string `json:"symbol"`             //品种
	CounterMemberID  int64  `json:"counter_member_id"`  //对手客户UID
	OrderID          string `json:"order_id"`           //客户订单ID
	OrderType        string `json:"order_type"`         //客户订单类型
	Direction        int    `json:"direction"`          //成交方向，0或1，0表示买，1表示卖
	Price            string `json:"price"`              // 成交价
	Amount           string `json:"amount"`             // 成交量
	NeedHedgeAmount  string `json:"need_hedge_amount"`  //未对冲量
	HedgeProfit      string `json:"hedge_profit"`       //对冲盈亏
	Time             string `json:"time"`               // 成交时间
	Status           int    `json:"status"`             // 对冲状态,"hedging":对冲进行中,"complete":对冲完成,"partial":对冲部分完成,"failure":对冲失败
	UnhedgedQuantity string `json:"unhedged_quantity"`  // 原为未对冲量
	AvgPriceHedged   string `json:"avg_price_hedged"`   // 对冲均价
	HedgingPnl       string `json:"hedging_pnl"`        // 对冲盈亏
	UnitHedgingPnl   string `json:"unit_hedging_pnl"`   // 对冲盈亏币种
	ClientName       string `json:"client_name"`        // 客户姓名
	PriceClientDealt string `json:"price_client_dealt"` // 成交价
	TradeQuantity    string `json:"trade_quantity"`     // 成交价
}

type MemberReq struct {
	Id string `path:"id"`
}

type MemberReply struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

type WithdrawReq struct {
	Id string `path:"id"`
}

type WithdrawReply struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

type OfflineTradeReq struct {
	ID              int64  `json:"id,optional" path:"id,optional"`                               // 主键
	TradeBusinessNo string `json:"trade_business_no,optional" path:"trade_business_no,optional"` //
	OfflineTradeID  string `json:"offline_trade_id,optional"`
	UID             string `json:"uid,optional"`
	UserName        string `json:"user_name,optional"`
	AccountName     string `json:"account_name,optional"`
	Name            string `json:"name,optional"`
	Symbol          string `json:"symbol,optional"`
	Direction       int    `json:"direction,optional"`
	TradeID         string `path:"trade_id,optional" json:"trade_id,optional"`
	Remarks         string `json:"remarks,optional"`
	Operator        string `json:"operator,optional"` //操作员
	TradeTime       string `json:"trade_time,optional"`
	Quantity        string `json:"quantity,optional,default=0.0"`
	Amount          string `json:"amount,optional,default=0.0" form:"amount,optional"`
	Fee             string `json:"fee,optional,default=0.0"`
	TwoFactorCode   string `json:"two_factor_code,optional" form:"two_factor_code,optional"` //6位数字的2FA code
}

type OfflineTradeInput struct {
	Id              int64  `json:"id"`                // 主键ID
	TradeBusinessNo string `json:"trade_business_no"` // 业务编号
	TradeTime       int64  `json:"trade_time"`        // 交易时间
	OfflineTradeId  string `json:"offline_trade_id"`  // 线下交易ID
	Uid             int64  `json:"uid"`               // uid
	UserName        string `json:"user_name"`         // 客户账号
	Name            string `json:"name"`              // 姓名
	Symbol          string `json:"symbol"`            // 品种
	Direction       int64  `json:"direction"`         // 0买 1卖
	Quantity        string `json:"quantity"`          // 数量
	Amount          string `json:"amount"`            // 金额
	Price           string `json:"price"`             // 价格
	Fee             string `json:"fee"`               // 手续费
	TradeId         string `json:"trade_id"`          // 内部成交ID
	Remarks         string `json:"remarks"`           // 备注
	Status          int64  `json:"status"`            // 业务状态 1一次录入 2二次录入
	Operator1       string `json:"operator1"`         // 操作员1
	Operator2       string `json:"operator2"`         // 操作员2
	ReviseOperator  string `json:"revise_operator"`   // 修正操作员
	OperateTime     int64  `json:"operate_time"`      // 操作时间
}

type DeleteOfflineTradeReq struct {
	ID            int64  `json:"id,optional" path:"id,optional"`                           // 主键
	Operator      string `json:"-,optional"`                                               //操作员
	TwoFactorCode string `json:"two_factor_code,optional" form:"two_factor_code,optional"` //6位数字的2FA code
}

type GetAllOfflineTradeReq struct {
	Pager
	StartTime      string `form:"start_time,optional"`       //开始日期
	EndTime        string `form:"end_time,optional"`         //结束日期
	Symbol         string `form:"symbol,optional"`           //币种
	UID            string `form:"uid,optional"`              //客户
	OfflineTradeId string `form:"offline_trade_id,optional"` //线下交易ID
	Status         string `form:"status,optional"`           //业务状态  1 一次录入, 2 二次录入
}

type GetAllOfflineTradeReply struct {
	Count int64                `json:"count"` // 条数
	Data  []*OfflineTradeInput `json:"data"`  // 数据
}
