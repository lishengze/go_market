// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	securityLogFieldNames          = builder.RawFieldNames(&SecurityLog{})
	securityLogRows                = strings.Join(securityLogFieldNames, ",")
	securityLogRowsExpectAutoSet   = strings.Join(stringx.Remove(securityLogFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	securityLogRowsWithPlaceHolder = strings.Join(stringx.Remove(securityLogFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	securityLogModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *SecurityLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SecurityLog, error)
		Update(ctx context.Context, session sqlx.Session, data *SecurityLog) (sql.Result, error)
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultSecurityLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SecurityLog struct {
		Id int64 `db:"id"` // 自增长id

		Path string `db:"path"` // 操作内容

		Operator int64 `db:"operator"` // 操作人,0-表示由程序自动化创建

		Ip string `db:"ip"`

		Content string `db:"content"` // 操作内容

		Created time.Time `db:"created"` // 创建时间

		Updated time.Time `db:"updated"` // 最近更新时间

	}
)

func newSecurityLogModel(conn sqlx.SqlConn) *defaultSecurityLogModel {
	return &defaultSecurityLogModel{
		conn:  conn,
		table: "`security_log`",
	}
}

func (m *defaultSecurityLogModel) Insert(ctx context.Context, session sqlx.Session, data *SecurityLog) (sql.Result, error) {

	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, securityLogRowsExpectAutoSet)
	if session != nil {
		return session.ExecCtx(ctx, query, data.Path, data.Operator, data.Ip, data.Content, data.Created, data.Updated)
	}
	return m.conn.ExecCtx(ctx, query, data.Path, data.Operator, data.Ip, data.Content, data.Created, data.Updated)
}

func (m *defaultSecurityLogModel) FindOne(ctx context.Context, id int64) (*SecurityLog, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", securityLogRows, m.table)
	var resp SecurityLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSecurityLogModel) Update(ctx context.Context, session sqlx.Session, data *SecurityLog) (sql.Result, error) {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, securityLogRowsWithPlaceHolder)
	if session != nil {
		return session.ExecCtx(ctx, query, data.Path, data.Operator, data.Ip, data.Content, data.Created, data.Updated, data.Id)
	}
	return m.conn.ExecCtx(ctx, query, data.Path, data.Operator, data.Ip, data.Content, data.Created, data.Updated, data.Id)
}

func (m *defaultSecurityLogModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	if session != nil {
		_, err := session.ExecCtx(ctx, query, id)
		return err
	}
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSecurityLogModel) tableName() string {
	return m.table
}
