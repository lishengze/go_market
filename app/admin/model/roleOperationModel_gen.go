// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	roleOperationFieldNames          = builder.RawFieldNames(&RoleOperation{})
	roleOperationRows                = strings.Join(roleOperationFieldNames, ",")
	roleOperationRowsExpectAutoSet   = strings.Join(stringx.Remove(roleOperationFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	roleOperationRowsWithPlaceHolder = strings.Join(stringx.Remove(roleOperationFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	roleOperationModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *RoleOperation) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RoleOperation, error)
		FindOneByRoleIdOperationId(ctx context.Context, roleId int64, operationId int64) (*RoleOperation, error)
		Update(ctx context.Context, session sqlx.Session, data *RoleOperation) (sql.Result, error)
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultRoleOperationModel struct {
		conn  sqlx.SqlConn
		table string
	}

	RoleOperation struct {
		Id int64 `db:"id"` // 自增长id

		RoleId int64 `db:"role_id"` // role_id

		OperationId int64 `db:"operation_id"` // operation_id（=menu_id），目前operation也存放在menu表

		LastOperator int64 `db:"last_operator"` //  最后一次操作人,0-表示由程序自动化创建

		Created time.Time `db:"created"` // 创建时间

		Updated time.Time `db:"updated"` // 最近更新时间

	}
)

func newRoleOperationModel(conn sqlx.SqlConn) *defaultRoleOperationModel {
	return &defaultRoleOperationModel{
		conn:  conn,
		table: "`role_operation`",
	}
}

func (m *defaultRoleOperationModel) Insert(ctx context.Context, session sqlx.Session, data *RoleOperation) (sql.Result, error) {

	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, roleOperationRowsExpectAutoSet)
	if session != nil {
		return session.ExecCtx(ctx, query, data.RoleId, data.OperationId, data.LastOperator, data.Created, data.Updated)
	}
	return m.conn.ExecCtx(ctx, query, data.RoleId, data.OperationId, data.LastOperator, data.Created, data.Updated)
}

func (m *defaultRoleOperationModel) FindOne(ctx context.Context, id int64) (*RoleOperation, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", roleOperationRows, m.table)
	var resp RoleOperation
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRoleOperationModel) FindOneByRoleIdOperationId(ctx context.Context, roleId int64, operationId int64) (*RoleOperation, error) {
	var resp RoleOperation
	query := fmt.Sprintf("select %s from %s where `role_id` = ? and `operation_id` = ? limit 1", roleOperationRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, roleId, operationId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRoleOperationModel) Update(ctx context.Context, session sqlx.Session, data *RoleOperation) (sql.Result, error) {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, roleOperationRowsWithPlaceHolder)
	if session != nil {
		return session.ExecCtx(ctx, query, data.RoleId, data.OperationId, data.LastOperator, data.Created, data.Updated, data.Id)
	}
	return m.conn.ExecCtx(ctx, query, data.RoleId, data.OperationId, data.LastOperator, data.Created, data.Updated, data.Id)
}

func (m *defaultRoleOperationModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	if session != nil {
		_, err := session.ExecCtx(ctx, query, id)
		return err
	}
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRoleOperationModel) tableName() string {
	return m.table
}
