// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	membersFieldNames          = builder.RawFieldNames(&Members{})
	membersRows                = strings.Join(membersFieldNames, ",")
	membersRowsExpectAutoSet   = strings.Join(stringx.Remove(membersFieldNames, "`create_time`", "`update_time`"), ",")
	membersRowsWithPlaceHolder = strings.Join(stringx.Remove(membersFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheBrokerMembersIdPrefix       = "cache:broker:members:id:"
	cacheBrokerMembersMemberIdPrefix = "cache:broker:members:memberId:"
)

type (
	membersModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *Members) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Members, error)
		FindOneByMemberId(ctx context.Context, memberId sql.NullString) (*Members, error)
		Update(ctx context.Context, session sqlx.Session, data *Members) (sql.Result, error)
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultMembersModel struct {
		sqlc.CachedConn
		table string
	}

	Members struct {
		Id int64 `db:"id"` // 主键ID

		MemberId sql.NullString `db:"member_id"` // 会员ID

		GroupId sql.NullInt64 `db:"group_id"` // 会员组ID

		Salt sql.NullString `db:"salt"` // 盐值

		Username sql.NullString `db:"username"` // 用户名

		Password sql.NullString `db:"password"` // 密码

		Gender sql.NullInt64 `db:"gender"` // 性别

		Nickname sql.NullString `db:"nickname"` // 昵称

		IsGoogleAuth sql.NullInt64 `db:"is_google_auth"` // 是否谷歌认证

		GoogleAuthSecret sql.NullString `db:"google_auth_secret"` // 谷歌密钥

		Margin sql.NullInt64 `db:"margin"` // 是否缴纳保证金

		JyPassword sql.NullString `db:"jy_password"` // 交易密码

		RealName sql.NullString `db:"real_name"` // 会员真实姓名

		IdType sql.NullInt64 `db:"id_type"` // 证件类型

		IdNumber sql.NullString `db:"id_number"` // 身份证号码

		Email sql.NullString `db:"email"` // 邮箱

		Mobile sql.NullString `db:"mobile"` // 手机号

		Location sql.NullString `db:"location"` // 定位

		MemberType sql.NullInt64 `db:"member_type"` // 会员类型

		MemberLevel sql.NullString `db:"member_level"` // 会员等级

		Status sql.NullInt64 `db:"status"` // 状态

		RegistrationTime time.Time `db:"registration_time"` // 注册时间

		LastLoginTime time.Time `db:"last_login_time"` // 最后登录时间

		Token sql.NullString `db:"token"` // token

		SuperPartner sql.NullInt64 `db:"super_partner"` // 超级合伙人

		Transactions sql.NullInt64 `db:"transactions"` // 交易次数

		InviterId sql.NullInt64 `db:"inviter_id"` // 邀请者ID

		PromotionCode sql.NullString `db:"promotion_code"` // 推广码

		RealNameStatus sql.NullInt64 `db:"real_name_status"` // 实名认证状态

		LoginCount sql.NullInt64 `db:"login_count"` // 登录次数

		Country sql.NullString `db:"country"` // 国家

		Province sql.NullString `db:"province"` // 最后登录的省

		City sql.NullString `db:"city"` // 最后登录的市

		DeviceId sql.NullString `db:"device_id"`

		Ip sql.NullString `db:"ip"` // 最后登录的ip

		TokenExpireTime time.Time `db:"token_expire_time"` // token预计过期时间

		TransactionStatus sql.NullInt64 `db:"transaction_status"` // 交易状态

		RegisterType sql.NullInt64 `db:"register_type"`

		AreaCode sql.NullString `db:"area_code"`

		ModifyUsernameTime time.Time `db:"modify_username_time"`
	}
)

func newMembersModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultMembersModel {
	return &defaultMembersModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`members`",
	}
}

func (m *defaultMembersModel) Insert(ctx context.Context, session sqlx.Session, data *Members) (sql.Result, error) {
	brokerMembersIdKey := fmt.Sprintf("%s%v", cacheBrokerMembersIdPrefix, data.Id)
	brokerMembersMemberIdKey := fmt.Sprintf("%s%v", cacheBrokerMembersMemberIdPrefix, data.MemberId)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, membersRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Id, data.MemberId, data.GroupId, data.Salt, data.Username, data.Password, data.Gender, data.Nickname, data.IsGoogleAuth, data.GoogleAuthSecret, data.Margin, data.JyPassword, data.RealName, data.IdType, data.IdNumber, data.Email, data.Mobile, data.Location, data.MemberType, data.MemberLevel, data.Status, data.RegistrationTime, data.LastLoginTime, data.Token, data.SuperPartner, data.Transactions, data.InviterId, data.PromotionCode, data.RealNameStatus, data.LoginCount, data.Country, data.Province, data.City, data.DeviceId, data.Ip, data.TokenExpireTime, data.TransactionStatus, data.RegisterType, data.AreaCode, data.ModifyUsernameTime)
		}
		return conn.ExecCtx(ctx, query, data.Id, data.MemberId, data.GroupId, data.Salt, data.Username, data.Password, data.Gender, data.Nickname, data.IsGoogleAuth, data.GoogleAuthSecret, data.Margin, data.JyPassword, data.RealName, data.IdType, data.IdNumber, data.Email, data.Mobile, data.Location, data.MemberType, data.MemberLevel, data.Status, data.RegistrationTime, data.LastLoginTime, data.Token, data.SuperPartner, data.Transactions, data.InviterId, data.PromotionCode, data.RealNameStatus, data.LoginCount, data.Country, data.Province, data.City, data.DeviceId, data.Ip, data.TokenExpireTime, data.TransactionStatus, data.RegisterType, data.AreaCode, data.ModifyUsernameTime)
	}, brokerMembersIdKey, brokerMembersMemberIdKey)
}

func (m *defaultMembersModel) FindOne(ctx context.Context, id int64) (*Members, error) {
	brokerMembersIdKey := fmt.Sprintf("%s%v", cacheBrokerMembersIdPrefix, id)
	var resp Members
	err := m.QueryRowCtx(ctx, &resp, brokerMembersIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", membersRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMembersModel) FindOneByMemberId(ctx context.Context, memberId sql.NullString) (*Members, error) {
	brokerMembersMemberIdKey := fmt.Sprintf("%s%v", cacheBrokerMembersMemberIdPrefix, memberId)
	var resp Members
	err := m.QueryRowIndexCtx(ctx, &resp, brokerMembersMemberIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `member_id` = ? limit 1", membersRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, memberId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMembersModel) Update(ctx context.Context, session sqlx.Session, data *Members) (sql.Result, error) {
	brokerMembersIdKey := fmt.Sprintf("%s%v", cacheBrokerMembersIdPrefix, data.Id)
	brokerMembersMemberIdKey := fmt.Sprintf("%s%v", cacheBrokerMembersMemberIdPrefix, data.MemberId)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, membersRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.MemberId, data.GroupId, data.Salt, data.Username, data.Password, data.Gender, data.Nickname, data.IsGoogleAuth, data.GoogleAuthSecret, data.Margin, data.JyPassword, data.RealName, data.IdType, data.IdNumber, data.Email, data.Mobile, data.Location, data.MemberType, data.MemberLevel, data.Status, data.RegistrationTime, data.LastLoginTime, data.Token, data.SuperPartner, data.Transactions, data.InviterId, data.PromotionCode, data.RealNameStatus, data.LoginCount, data.Country, data.Province, data.City, data.DeviceId, data.Ip, data.TokenExpireTime, data.TransactionStatus, data.RegisterType, data.AreaCode, data.ModifyUsernameTime, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.MemberId, data.GroupId, data.Salt, data.Username, data.Password, data.Gender, data.Nickname, data.IsGoogleAuth, data.GoogleAuthSecret, data.Margin, data.JyPassword, data.RealName, data.IdType, data.IdNumber, data.Email, data.Mobile, data.Location, data.MemberType, data.MemberLevel, data.Status, data.RegistrationTime, data.LastLoginTime, data.Token, data.SuperPartner, data.Transactions, data.InviterId, data.PromotionCode, data.RealNameStatus, data.LoginCount, data.Country, data.Province, data.City, data.DeviceId, data.Ip, data.TokenExpireTime, data.TransactionStatus, data.RegisterType, data.AreaCode, data.ModifyUsernameTime, data.Id)
	}, brokerMembersIdKey, brokerMembersMemberIdKey)
}

func (m *defaultMembersModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	brokerMembersIdKey := fmt.Sprintf("%s%v", cacheBrokerMembersIdPrefix, id)
	brokerMembersMemberIdKey := fmt.Sprintf("%s%v", cacheBrokerMembersMemberIdPrefix, data.MemberId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, brokerMembersIdKey, brokerMembersMemberIdKey)
	return err
}

func (m *defaultMembersModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheBrokerMembersIdPrefix, primary)
}
func (m *defaultMembersModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", membersRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultMembersModel) tableName() string {
	return m.table
}
