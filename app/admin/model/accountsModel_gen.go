// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/shopspring/decimal"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	accountsFieldNames          = builder.RawFieldNames(&Accounts{})
	accountsRows                = strings.Join(accountsFieldNames, ",")
	accountsRowsExpectAutoSet   = strings.Join(stringx.Remove(accountsFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	accountsRowsWithPlaceHolder = strings.Join(stringx.Remove(accountsFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheBrokerAccountsIdPrefix               = "cache:broker:accounts:id:"
	cacheBrokerAccountsMemberIdCoinUnitPrefix = "cache:broker:accounts:memberId:coinUnit:"
)

type (
	accountsModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *Accounts) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Accounts, error)
		FindOneByMemberIdCoinUnit(ctx context.Context, memberId sql.NullInt64, coinUnit sql.NullString) (*Accounts, error)
		Update(ctx context.Context, session sqlx.Session, data *Accounts) (sql.Result, error)
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultAccountsModel struct {
		sqlc.CachedConn
		table string
	}

	Accounts struct {
		Id int64 `db:"id"` // 主键ID

		MemberId sql.NullInt64 `db:"member_id"` // 会员ID

		CoinId sql.NullInt64 `db:"coin_id"` // 币种ID

		CoinUnit sql.NullString `db:"coin_unit"` // 币种

		Balance decimal.Decimal `db:"balance"` // 可用余额

		FrozenBalance decimal.Decimal `db:"frozen_balance"` // 冻结余额

		ToReleased decimal.Decimal `db:"to_released"` // 待释放总量

		Address sql.NullString `db:"address"` // 充值地址

		Version sql.NullInt64 `db:"version"` // 版本

		IsLock sql.NullInt64 `db:"is_lock"` // 账户是否锁定，0否，1是

		AveragePrice decimal.Decimal `db:"average_price"`
	}
)

func newAccountsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAccountsModel {
	return &defaultAccountsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`accounts`",
	}
}

func (m *defaultAccountsModel) Insert(ctx context.Context, session sqlx.Session, data *Accounts) (sql.Result, error) {
	brokerAccountsIdKey := fmt.Sprintf("%s%v", cacheBrokerAccountsIdPrefix, data.Id)
	brokerAccountsMemberIdCoinUnitKey := fmt.Sprintf("%s%v:%v", cacheBrokerAccountsMemberIdCoinUnitPrefix, data.MemberId, data.CoinUnit)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, accountsRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.MemberId, data.CoinId, data.CoinUnit, data.Balance, data.FrozenBalance, data.ToReleased, data.Address, data.Version, data.IsLock, data.AveragePrice)
		}
		return conn.ExecCtx(ctx, query, data.MemberId, data.CoinId, data.CoinUnit, data.Balance, data.FrozenBalance, data.ToReleased, data.Address, data.Version, data.IsLock, data.AveragePrice)
	}, brokerAccountsIdKey, brokerAccountsMemberIdCoinUnitKey)
}

func (m *defaultAccountsModel) FindOne(ctx context.Context, id int64) (*Accounts, error) {
	brokerAccountsIdKey := fmt.Sprintf("%s%v", cacheBrokerAccountsIdPrefix, id)
	var resp Accounts
	err := m.QueryRowCtx(ctx, &resp, brokerAccountsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", accountsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAccountsModel) FindOneByMemberIdCoinUnit(ctx context.Context, memberId sql.NullInt64, coinUnit sql.NullString) (*Accounts, error) {
	brokerAccountsMemberIdCoinUnitKey := fmt.Sprintf("%s%v:%v", cacheBrokerAccountsMemberIdCoinUnitPrefix, memberId, coinUnit)
	var resp Accounts
	err := m.QueryRowIndexCtx(ctx, &resp, brokerAccountsMemberIdCoinUnitKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `member_id` = ? and `coin_unit` = ? limit 1", accountsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, memberId, coinUnit); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAccountsModel) Update(ctx context.Context, session sqlx.Session, data *Accounts) (sql.Result, error) {
	brokerAccountsIdKey := fmt.Sprintf("%s%v", cacheBrokerAccountsIdPrefix, data.Id)
	brokerAccountsMemberIdCoinUnitKey := fmt.Sprintf("%s%v:%v", cacheBrokerAccountsMemberIdCoinUnitPrefix, data.MemberId, data.CoinUnit)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, accountsRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.MemberId, data.CoinId, data.CoinUnit, data.Balance, data.FrozenBalance, data.ToReleased, data.Address, data.Version, data.IsLock, data.AveragePrice, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.MemberId, data.CoinId, data.CoinUnit, data.Balance, data.FrozenBalance, data.ToReleased, data.Address, data.Version, data.IsLock, data.AveragePrice, data.Id)
	}, brokerAccountsIdKey, brokerAccountsMemberIdCoinUnitKey)
}

func (m *defaultAccountsModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	brokerAccountsIdKey := fmt.Sprintf("%s%v", cacheBrokerAccountsIdPrefix, id)
	brokerAccountsMemberIdCoinUnitKey := fmt.Sprintf("%s%v:%v", cacheBrokerAccountsMemberIdCoinUnitPrefix, data.MemberId, data.CoinUnit)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, brokerAccountsIdKey, brokerAccountsMemberIdCoinUnitKey)
	return err
}

func (m *defaultAccountsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheBrokerAccountsIdPrefix, primary)
}
func (m *defaultAccountsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", accountsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAccountsModel) tableName() string {
	return m.table
}
