// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/shopspring/decimal"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	profitsFieldNames          = builder.RawFieldNames(&Profits{})
	profitsRows                = strings.Join(profitsFieldNames, ",")
	profitsRowsExpectAutoSet   = strings.Join(stringx.Remove(profitsFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	profitsRowsWithPlaceHolder = strings.Join(stringx.Remove(profitsFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheBrokerProfitsIdPrefix = "cache:broker:profits:id:"
)

type (
	profitsModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *Profits) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Profits, error)
		Update(ctx context.Context, session sqlx.Session, data *Profits) (sql.Result, error)
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultProfitsModel struct {
		sqlc.CachedConn
		table string
	}

	Profits struct {
		Id int64 `db:"id"` // 主键ID

		MemberId sql.NullInt64 `db:"member_id"` // 会员id

		DetailId sql.NullInt64 `db:"detail_id"` // 订单明细ID

		Symbol sql.NullString `db:"symbol"` // 币种

		TransactionType sql.NullInt64 `db:"transaction_type"` // 交易类型

		CreateTime time.Time `db:"create_time"` // 创建时间

		Profit decimal.Decimal `db:"profit"` // 收益

		ProfitTime sql.NullTime `db:"profit_time"` // 交易时间

		Direction sql.NullInt64 `db:"direction"` // 交易方向,0买入 1卖出

		Status int64 `db:"status"` // 状态,1有效 2 无效

	}
)

func newProfitsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultProfitsModel {
	return &defaultProfitsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`profits`",
	}
}

func (m *defaultProfitsModel) Insert(ctx context.Context, session sqlx.Session, data *Profits) (sql.Result, error) {
	brokerProfitsIdKey := fmt.Sprintf("%s%v", cacheBrokerProfitsIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, profitsRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.MemberId, data.DetailId, data.Symbol, data.TransactionType, data.Profit, data.ProfitTime, data.Direction, data.Status)
		}
		return conn.ExecCtx(ctx, query, data.MemberId, data.DetailId, data.Symbol, data.TransactionType, data.Profit, data.ProfitTime, data.Direction, data.Status)
	}, brokerProfitsIdKey)
}

func (m *defaultProfitsModel) FindOne(ctx context.Context, id int64) (*Profits, error) {
	brokerProfitsIdKey := fmt.Sprintf("%s%v", cacheBrokerProfitsIdPrefix, id)
	var resp Profits
	err := m.QueryRowCtx(ctx, &resp, brokerProfitsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", profitsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProfitsModel) Update(ctx context.Context, session sqlx.Session, data *Profits) (sql.Result, error) {
	brokerProfitsIdKey := fmt.Sprintf("%s%v", cacheBrokerProfitsIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, profitsRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.MemberId, data.DetailId, data.Symbol, data.TransactionType, data.Profit, data.ProfitTime, data.Direction, data.Status, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.MemberId, data.DetailId, data.Symbol, data.TransactionType, data.Profit, data.ProfitTime, data.Direction, data.Status, data.Id)
	}, brokerProfitsIdKey)
}

func (m *defaultProfitsModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	brokerProfitsIdKey := fmt.Sprintf("%s%v", cacheBrokerProfitsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, brokerProfitsIdKey)
	return err
}

func (m *defaultProfitsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheBrokerProfitsIdPrefix, primary)
}
func (m *defaultProfitsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", profitsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultProfitsModel) tableName() string {
	return m.table
}
