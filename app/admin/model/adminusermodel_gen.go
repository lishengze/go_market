// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	adminUserFieldNames          = builder.RawFieldNames(&AdminUser{})
	adminUserRows                = strings.Join(adminUserFieldNames, ",")
	adminUserRowsExpectAutoSet   = strings.Join(stringx.Remove(adminUserFieldNames, "`user_id`", "`create_time`", "`update_time`"), ",")
	adminUserRowsWithPlaceHolder = strings.Join(stringx.Remove(adminUserFieldNames, "`user_id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	adminUserModel interface {
		Insert(ctx context.Context, data *AdminUser) (sql.Result, error)
		FindOne(ctx context.Context, userId int64) (*AdminUser, error)
		FindOneByName(ctx context.Context, name string) (*AdminUser, error)
		Update(ctx context.Context, data *AdminUser) error
		Delete(ctx context.Context, userId int64) error
	}

	defaultAdminUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	AdminUser struct {
		UserId                int64          `db:"user_id"`
		Role                  sql.NullInt64  `db:"role"`
		IsGoogleAuthenticated int64          `db:"is_google_authenticated"`
		Name                  string         `db:"name"`
		Email                 string         `db:"email"`      // 邮箱
		Department            string         `db:"department"` // 部门
		LoginPassword         string         `db:"login_password"`
		GoogleAuthSecret      string         `db:"google_auth_secret"`
		Description           sql.NullString `db:"description"`
		Status                int64          `db:"status"`        // 0-待生效，1-生效中，2-冻结
		LastOperator          int64          `db:"last_operator"` //  最后一次操作人,0-表示由程序自动化创建
		Created               time.Time      `db:"created"`
		Updated               time.Time      `db:"updated"`
	}
)

func newAdminUserModel(conn sqlx.SqlConn) *defaultAdminUserModel {
	return &defaultAdminUserModel{
		conn:  conn,
		table: "`admin_user`",
	}
}

func (m *defaultAdminUserModel) Insert(ctx context.Context, data *AdminUser) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, adminUserRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Role, data.IsGoogleAuthenticated, data.Name, data.Email, data.Department, data.LoginPassword, data.GoogleAuthSecret, data.Description, data.Status, data.LastOperator, data.Created, data.Updated)
	return ret, err
}

func (m *defaultAdminUserModel) FindOne(ctx context.Context, userId int64) (*AdminUser, error) {
	query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", adminUserRows, m.table)
	var resp AdminUser
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdminUserModel) FindOneByName(ctx context.Context, name string) (*AdminUser, error) {
	var resp AdminUser
	query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", adminUserRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, name)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdminUserModel) Update(ctx context.Context, data *AdminUser) error {
	query := fmt.Sprintf("update %s set %s where `user_id` = ?", m.table, adminUserRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Role, data.IsGoogleAuthenticated, data.Name, data.Email, data.Department, data.LoginPassword, data.GoogleAuthSecret, data.Description, data.Status, data.LastOperator, data.Created, data.Updated, data.UserId)
	return err
}

func (m *defaultAdminUserModel) Delete(ctx context.Context, userId int64) error {
	query := fmt.Sprintf("delete from %s where `user_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, userId)
	return err
}

func (m *defaultAdminUserModel) tableName() string {
	return m.table
}
