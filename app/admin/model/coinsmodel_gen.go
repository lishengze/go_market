// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/shopspring/decimal"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	coinsFieldNames          = builder.RawFieldNames(&Coins{})
	coinsRows                = strings.Join(coinsFieldNames, ",")
	coinsRowsExpectAutoSet   = strings.Join(stringx.Remove(coinsFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	coinsRowsWithPlaceHolder = strings.Join(stringx.Remove(coinsFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	coinsModel interface {
		Insert(ctx context.Context, data *Coins) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Coins, error)
		FindOneByName(ctx context.Context, name sql.NullString) (*Coins, error)
		FindOneByUnit(ctx context.Context, unit sql.NullString) (*Coins, error)
		Update(ctx context.Context, data *Coins) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCoinsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Coins struct {
		Id int64 `db:"id"` // 主键ID

		Name sql.NullString `db:"name"` // 货币

		NameCn sql.NullString `db:"name_cn"` // 中文名称

		Unit sql.NullString `db:"unit"` // 单位

		Status sql.NullString `db:"status"` // 状态

		MinTxFee decimal.NullDecimal `db:"min_tx_fee"` // 最小提币手续费

		CnyRate float64 `db:"cny_rate"` // 人民币汇率

		MaxTxFee decimal.NullDecimal `db:"max_tx_fee"` // 最大提币手续费

		UsdRate float64 `db:"usd_rate"` // 对美元汇率

		Sort sql.NullInt64 `db:"sort"` // 排序

		CanWithdraw sql.NullInt64 `db:"can_withdraw"` // 是否能提币

		CanRecharge sql.NullInt64 `db:"can_recharge"` // 是否能充币

		CanTransfer sql.NullInt64 `db:"can_transfer"` // 是否能转账

		CanAutoWithdraw sql.NullInt64 `db:"can_auto_withdraw"` // 是否能自动提币

		WithdrawThreshold decimal.NullDecimal `db:"withdraw_threshold"` // 提币阈值

		MinWithdrawAmount decimal.NullDecimal `db:"min_withdraw_amount"` // 最小提币数量

		MaxWithdrawAmount decimal.NullDecimal `db:"max_withdraw_amount"` // 最大提币数量

		MinRechargeAmount decimal.NullDecimal `db:"min_recharge_amount"` // 最小充值数量

		IsLegal sql.NullInt64 `db:"is_legal"` // 是否是合法币种

		AllBalance decimal.NullDecimal `db:"all_balance"` // 总余额

		ColdWalletAddress sql.NullString `db:"cold_wallet_address"` // 冷钱包地址

		HotAllBalance decimal.NullDecimal `db:"hot_all_balance"`

		BlockHeight sql.NullInt64 `db:"block_height"` // 块高

		MinerFee decimal.NullDecimal `db:"miner_fee"` // 转账时付给矿工的手续费

		WithdrawScale int64 `db:"withdraw_scale"` // 提币精度

		InfoLink sql.NullString `db:"info_link"` // 币种资料链接

		Description sql.NullString `db:"description"` // 币种简介

		AccountType sql.NullInt64 `db:"account_type"` // 账户类型

		DepositAddress sql.NullString `db:"deposit_address"` // 充值地址

	}
)

func newCoinsModel(conn sqlx.SqlConn) *defaultCoinsModel {
	return &defaultCoinsModel{
		conn:  conn,
		table: "`coins`",
	}
}

func (m *defaultCoinsModel) Insert(ctx context.Context, data *Coins) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, coinsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.NameCn, data.Unit, data.Status, data.MinTxFee, data.CnyRate, data.MaxTxFee, data.UsdRate, data.Sort, data.CanWithdraw, data.CanRecharge, data.CanTransfer, data.CanAutoWithdraw, data.WithdrawThreshold, data.MinWithdrawAmount, data.MaxWithdrawAmount, data.MinRechargeAmount, data.IsLegal, data.AllBalance, data.ColdWalletAddress, data.HotAllBalance, data.BlockHeight, data.MinerFee, data.WithdrawScale, data.InfoLink, data.Description, data.AccountType, data.DepositAddress)
	return ret, err
}

func (m *defaultCoinsModel) FindOne(ctx context.Context, id int64) (*Coins, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", coinsRows, m.table)
	var resp Coins
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCoinsModel) FindOneByName(ctx context.Context, name sql.NullString) (*Coins, error) {
	var resp Coins
	query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", coinsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, name)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCoinsModel) FindOneByUnit(ctx context.Context, unit sql.NullString) (*Coins, error) {
	var resp Coins
	query := fmt.Sprintf("select %s from %s where `unit` = ? limit 1", coinsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, unit)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCoinsModel) Update(ctx context.Context, data *Coins) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, coinsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.NameCn, data.Unit, data.Status, data.MinTxFee, data.CnyRate, data.MaxTxFee, data.UsdRate, data.Sort, data.CanWithdraw, data.CanRecharge, data.CanTransfer, data.CanAutoWithdraw, data.WithdrawThreshold, data.MinWithdrawAmount, data.MaxWithdrawAmount, data.MinRechargeAmount, data.IsLegal, data.AllBalance, data.ColdWalletAddress, data.HotAllBalance, data.BlockHeight, data.MinerFee, data.WithdrawScale, data.InfoLink, data.Description, data.AccountType, data.DepositAddress, data.Id)
	return err
}

func (m *defaultCoinsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCoinsModel) tableName() string {
	return m.table
}
