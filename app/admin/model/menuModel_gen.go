// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	menuFieldNames          = builder.RawFieldNames(&Menu{})
	menuRows                = strings.Join(menuFieldNames, ",")
	menuRowsExpectAutoSet   = strings.Join(stringx.Remove(menuFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	menuRowsWithPlaceHolder = strings.Join(stringx.Remove(menuFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	menuModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *Menu) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Menu, error)
		Update(ctx context.Context, session sqlx.Session, data *Menu) (sql.Result, error)
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultMenuModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Menu struct {
		Id int64 `db:"id"` // 自增长id

		ParentId int64 `db:"parent_id"` // parent_id

		MenuNameCn string `db:"menu_name_cn"`

		MenuNameEn string `db:"menu_name_en"`

		MenuNameDesc string `db:"menu_name_desc"` // 菜单名

		FrontKey string `db:"front_key"` // 前端用的唯一key参数

		MenuOrder int64 `db:"menu_order"` // 菜单顺序，数值越小优先级越高

		Path string `db:"path"` // 全局唯一的路径

		LastOperator int64 `db:"last_operator"` // 最后一次操作人,0-表示由程序自动化创建

		Created time.Time `db:"created"` // 创建时间

		Updated time.Time `db:"updated"` // 最近更新时间

	}
)

func newMenuModel(conn sqlx.SqlConn) *defaultMenuModel {
	return &defaultMenuModel{
		conn:  conn,
		table: "`menu`",
	}
}

func (m *defaultMenuModel) Insert(ctx context.Context, session sqlx.Session, data *Menu) (sql.Result, error) {

	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, menuRowsExpectAutoSet)
	if session != nil {
		return session.ExecCtx(ctx, query, data.ParentId, data.MenuNameCn, data.MenuNameEn, data.MenuNameDesc, data.FrontKey, data.MenuOrder, data.Path, data.LastOperator, data.Created, data.Updated)
	}
	return m.conn.ExecCtx(ctx, query, data.ParentId, data.MenuNameCn, data.MenuNameEn, data.MenuNameDesc, data.FrontKey, data.MenuOrder, data.Path, data.LastOperator, data.Created, data.Updated)
}

func (m *defaultMenuModel) FindOne(ctx context.Context, id int64) (*Menu, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", menuRows, m.table)
	var resp Menu
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMenuModel) Update(ctx context.Context, session sqlx.Session, data *Menu) (sql.Result, error) {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, menuRowsWithPlaceHolder)
	if session != nil {
		return session.ExecCtx(ctx, query, data.ParentId, data.MenuNameCn, data.MenuNameEn, data.MenuNameDesc, data.FrontKey, data.MenuOrder, data.Path, data.LastOperator, data.Created, data.Updated, data.Id)
	}
	return m.conn.ExecCtx(ctx, query, data.ParentId, data.MenuNameCn, data.MenuNameEn, data.MenuNameDesc, data.FrontKey, data.MenuOrder, data.Path, data.LastOperator, data.Created, data.Updated, data.Id)
}

func (m *defaultMenuModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	if session != nil {
		_, err := session.ExecCtx(ctx, query, id)
		return err
	}
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultMenuModel) tableName() string {
	return m.table
}
