// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/shopspring/decimal"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	offlineTradeInputFieldNames          = builder.RawFieldNames(&OfflineTradeInput{})
	offlineTradeInputRows                = strings.Join(offlineTradeInputFieldNames, ",")
	offlineTradeInputRowsExpectAutoSet   = strings.Join(stringx.Remove(offlineTradeInputFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	offlineTradeInputRowsWithPlaceHolder = strings.Join(stringx.Remove(offlineTradeInputFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheBrokerOfflineTradeInputIdPrefix              = "cache:broker:offlineTradeInput:id:"
	cacheBrokerOfflineTradeInputOfflineTradeIdPrefix  = "cache:broker:offlineTradeInput:offlineTradeId:"
	cacheBrokerOfflineTradeInputTradeBusinessNoPrefix = "cache:broker:offlineTradeInput:tradeBusinessNo:"
)

type (
	offlineTradeInputModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *OfflineTradeInput) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*OfflineTradeInput, error)
		FindOneByOfflineTradeId(ctx context.Context, offlineTradeId string) (*OfflineTradeInput, error)
		FindOneByTradeBusinessNo(ctx context.Context, tradeBusinessNo string) (*OfflineTradeInput, error)
		Update(ctx context.Context, session sqlx.Session, data *OfflineTradeInput) (sql.Result, error)
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultOfflineTradeInputModel struct {
		sqlc.CachedConn
		table string
	}

	OfflineTradeInput struct {
		Id int64 `db:"id"` // 主键ID

		TradeBusinessNo string `db:"trade_business_no"` // 业务编号

		TradeTime sql.NullTime `db:"trade_time"` // 交易时间

		OfflineTradeId string `db:"offline_trade_id"` // 线下交易ID

		Uid sql.NullInt64 `db:"uid"` // uid

		UserName sql.NullString `db:"user_name"` // 客户账号

		Name sql.NullString `db:"name"` // 姓名

		Symbol sql.NullString `db:"symbol"` // 品种

		Direction sql.NullInt64 `db:"direction"` // 0买 1卖

		Quantity decimal.Decimal `db:"quantity"` // 数量

		Amount decimal.Decimal `db:"amount"` // 金额

		Price decimal.Decimal `db:"price"` // 价格

		Fee decimal.Decimal `db:"fee"` // 手续费

		TradeId sql.NullString `db:"trade_id"` // 内部成交ID

		Remarks sql.NullString `db:"remarks"` // 备注

		Status sql.NullInt64 `db:"status"` // 业务状态 1一次录入 2二次录入

		Operator1 sql.NullString `db:"operator1"` // 操作员1

		Operator2 sql.NullString `db:"operator2"` // 操作员2

		ReviseOperator sql.NullString `db:"revise_operator"` // 修正操作员

		OperateTime sql.NullTime `db:"operate_time"` // 操作时间

	}
)

func newOfflineTradeInputModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultOfflineTradeInputModel {
	return &defaultOfflineTradeInputModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`offline_trade_input`",
	}
}

func (m *defaultOfflineTradeInputModel) Insert(ctx context.Context, session sqlx.Session, data *OfflineTradeInput) (sql.Result, error) {
	brokerOfflineTradeInputIdKey := fmt.Sprintf("%s%v", cacheBrokerOfflineTradeInputIdPrefix, data.Id)
	brokerOfflineTradeInputOfflineTradeIdKey := fmt.Sprintf("%s%v", cacheBrokerOfflineTradeInputOfflineTradeIdPrefix, data.OfflineTradeId)
	brokerOfflineTradeInputTradeBusinessNoKey := fmt.Sprintf("%s%v", cacheBrokerOfflineTradeInputTradeBusinessNoPrefix, data.TradeBusinessNo)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, offlineTradeInputRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.TradeBusinessNo, data.TradeTime, data.OfflineTradeId, data.Uid, data.UserName, data.Name, data.Symbol, data.Direction, data.Quantity, data.Amount, data.Price, data.Fee, data.TradeId, data.Remarks, data.Status, data.Operator1, data.Operator2, data.ReviseOperator, data.OperateTime)
		}
		return conn.ExecCtx(ctx, query, data.TradeBusinessNo, data.TradeTime, data.OfflineTradeId, data.Uid, data.UserName, data.Name, data.Symbol, data.Direction, data.Quantity, data.Amount, data.Price, data.Fee, data.TradeId, data.Remarks, data.Status, data.Operator1, data.Operator2, data.ReviseOperator, data.OperateTime)
	}, brokerOfflineTradeInputIdKey, brokerOfflineTradeInputOfflineTradeIdKey, brokerOfflineTradeInputTradeBusinessNoKey)
}

func (m *defaultOfflineTradeInputModel) FindOne(ctx context.Context, id int64) (*OfflineTradeInput, error) {
	brokerOfflineTradeInputIdKey := fmt.Sprintf("%s%v", cacheBrokerOfflineTradeInputIdPrefix, id)
	var resp OfflineTradeInput
	err := m.QueryRowCtx(ctx, &resp, brokerOfflineTradeInputIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", offlineTradeInputRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOfflineTradeInputModel) FindOneByOfflineTradeId(ctx context.Context, offlineTradeId string) (*OfflineTradeInput, error) {
	brokerOfflineTradeInputOfflineTradeIdKey := fmt.Sprintf("%s%v", cacheBrokerOfflineTradeInputOfflineTradeIdPrefix, offlineTradeId)
	var resp OfflineTradeInput
	err := m.QueryRowIndexCtx(ctx, &resp, brokerOfflineTradeInputOfflineTradeIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `offline_trade_id` = ? limit 1", offlineTradeInputRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, offlineTradeId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOfflineTradeInputModel) FindOneByTradeBusinessNo(ctx context.Context, tradeBusinessNo string) (*OfflineTradeInput, error) {
	brokerOfflineTradeInputTradeBusinessNoKey := fmt.Sprintf("%s%v", cacheBrokerOfflineTradeInputTradeBusinessNoPrefix, tradeBusinessNo)
	var resp OfflineTradeInput
	err := m.QueryRowIndexCtx(ctx, &resp, brokerOfflineTradeInputTradeBusinessNoKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `trade_business_no` = ? limit 1", offlineTradeInputRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, tradeBusinessNo); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOfflineTradeInputModel) Update(ctx context.Context, session sqlx.Session, data *OfflineTradeInput) (sql.Result, error) {
	brokerOfflineTradeInputIdKey := fmt.Sprintf("%s%v", cacheBrokerOfflineTradeInputIdPrefix, data.Id)
	brokerOfflineTradeInputOfflineTradeIdKey := fmt.Sprintf("%s%v", cacheBrokerOfflineTradeInputOfflineTradeIdPrefix, data.OfflineTradeId)
	brokerOfflineTradeInputTradeBusinessNoKey := fmt.Sprintf("%s%v", cacheBrokerOfflineTradeInputTradeBusinessNoPrefix, data.TradeBusinessNo)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, offlineTradeInputRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.TradeBusinessNo, data.TradeTime, data.OfflineTradeId, data.Uid, data.UserName, data.Name, data.Symbol, data.Direction, data.Quantity, data.Amount, data.Price, data.Fee, data.TradeId, data.Remarks, data.Status, data.Operator1, data.Operator2, data.ReviseOperator, data.OperateTime, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.TradeBusinessNo, data.TradeTime, data.OfflineTradeId, data.Uid, data.UserName, data.Name, data.Symbol, data.Direction, data.Quantity, data.Amount, data.Price, data.Fee, data.TradeId, data.Remarks, data.Status, data.Operator1, data.Operator2, data.ReviseOperator, data.OperateTime, data.Id)
	}, brokerOfflineTradeInputIdKey, brokerOfflineTradeInputOfflineTradeIdKey, brokerOfflineTradeInputTradeBusinessNoKey)
}

func (m *defaultOfflineTradeInputModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	brokerOfflineTradeInputIdKey := fmt.Sprintf("%s%v", cacheBrokerOfflineTradeInputIdPrefix, id)
	brokerOfflineTradeInputOfflineTradeIdKey := fmt.Sprintf("%s%v", cacheBrokerOfflineTradeInputOfflineTradeIdPrefix, data.OfflineTradeId)
	brokerOfflineTradeInputTradeBusinessNoKey := fmt.Sprintf("%s%v", cacheBrokerOfflineTradeInputTradeBusinessNoPrefix, data.TradeBusinessNo)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, brokerOfflineTradeInputIdKey, brokerOfflineTradeInputOfflineTradeIdKey, brokerOfflineTradeInputTradeBusinessNoKey)
	return err
}

func (m *defaultOfflineTradeInputModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheBrokerOfflineTradeInputIdPrefix, primary)
}
func (m *defaultOfflineTradeInputModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", offlineTradeInputRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOfflineTradeInputModel) tableName() string {
	return m.table
}
