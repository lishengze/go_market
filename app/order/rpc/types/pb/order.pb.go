// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: order.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DirectionEnum int32

const (
	DirectionEnum_BUY  DirectionEnum = 0
	DirectionEnum_SELL DirectionEnum = 1
)

// Enum value maps for DirectionEnum.
var (
	DirectionEnum_name = map[int32]string{
		0: "BUY",
		1: "SELL",
	}
	DirectionEnum_value = map[string]int32{
		"BUY":  0,
		"SELL": 1,
	}
)

func (x DirectionEnum) Enum() *DirectionEnum {
	p := new(DirectionEnum)
	*p = x
	return p
}

func (x DirectionEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DirectionEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_order_proto_enumTypes[0].Descriptor()
}

func (DirectionEnum) Type() protoreflect.EnumType {
	return &file_order_proto_enumTypes[0]
}

func (x DirectionEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DirectionEnum.Descriptor instead.
func (DirectionEnum) EnumDescriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{0}
}

type QuoteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//前端生成, 方便追踪当前请求
	QuoteID   string `protobuf:"bytes,1,opt,name=QuoteID,proto3" json:"QuoteID,omitempty"`
	UserID    int64  `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Symbol    string `protobuf:"bytes,3,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	Direction int32  `protobuf:"varint,4,opt,name=Direction,proto3" json:"Direction,omitempty"`
	QuoteType int32  `protobuf:"varint,5,opt,name=QuoteType,proto3" json:"QuoteType,omitempty"` //询价方式 0:数量询价 1:金额询价
	Volume    string `protobuf:"bytes,6,opt,name=Volume,proto3" json:"Volume,omitempty"`
	Amount    string `protobuf:"bytes,7,opt,name=Amount,proto3" json:"Amount,omitempty"`
}

func (x *QuoteReq) Reset() {
	*x = QuoteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuoteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteReq) ProtoMessage() {}

func (x *QuoteReq) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteReq.ProtoReflect.Descriptor instead.
func (*QuoteReq) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{0}
}

func (x *QuoteReq) GetQuoteID() string {
	if x != nil {
		return x.QuoteID
	}
	return ""
}

func (x *QuoteReq) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *QuoteReq) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *QuoteReq) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *QuoteReq) GetQuoteType() int32 {
	if x != nil {
		return x.QuoteType
	}
	return 0
}

func (x *QuoteReq) GetVolume() string {
	if x != nil {
		return x.Volume
	}
	return ""
}

func (x *QuoteReq) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type QuoteRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuoteID   string `protobuf:"bytes,1,opt,name=QuoteID,proto3" json:"QuoteID,omitempty"`
	UserID    int64  `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Symbol    string `protobuf:"bytes,3,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	Direction int32  `protobuf:"varint,4,opt,name=Direction,proto3" json:"Direction,omitempty"`
	QuoteType int32  `protobuf:"varint,5,opt,name=QuoteType,proto3" json:"QuoteType,omitempty"`
	Price     string `protobuf:"bytes,6,opt,name=Price,proto3" json:"Price,omitempty"`
	Volume    string `protobuf:"bytes,7,opt,name=Volume,proto3" json:"Volume,omitempty"`
	Amount    string `protobuf:"bytes,8,opt,name=Amount,proto3" json:"Amount,omitempty"`
}

func (x *QuoteRsp) Reset() {
	*x = QuoteRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuoteRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteRsp) ProtoMessage() {}

func (x *QuoteRsp) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteRsp.ProtoReflect.Descriptor instead.
func (*QuoteRsp) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{1}
}

func (x *QuoteRsp) GetQuoteID() string {
	if x != nil {
		return x.QuoteID
	}
	return ""
}

func (x *QuoteRsp) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *QuoteRsp) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *QuoteRsp) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *QuoteRsp) GetQuoteType() int32 {
	if x != nil {
		return x.QuoteType
	}
	return 0
}

func (x *QuoteRsp) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *QuoteRsp) GetVolume() string {
	if x != nil {
		return x.Volume
	}
	return ""
}

func (x *QuoteRsp) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type OrderBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID         int64  `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"` //用户id
	Symbol         string `protobuf:"bytes,2,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	OrderType      int32  `protobuf:"varint,3,opt,name=OrderType,proto3" json:"OrderType,omitempty"`           //订单类型 1:otc订单 2:聚合交易订单
	OTCOrderMode   int32  `protobuf:"varint,4,opt,name=OTCOrderMode,proto3" json:"OTCOrderMode,omitempty"`     //otc下单模式 1:数量下单 2:金额下单
	OrderPriceType int32  `protobuf:"varint,5,opt,name=OrderPriceType,proto3" json:"OrderPriceType,omitempty"` //报单价格条件 1:限价单 2:市价单
	Direction      int32  `protobuf:"varint,6,opt,name=Direction,proto3" json:"Direction,omitempty"`           //0:买 1:卖
	Volume         string `protobuf:"bytes,7,opt,name=Volume,proto3" json:"Volume,omitempty"`                  //报单数量
	Price          string `protobuf:"bytes,8,opt,name=Price,proto3" json:"Price,omitempty"`                    //报单价格
	Amount         string `protobuf:"bytes,9,opt,name=Amount,proto3" json:"Amount,omitempty"`                  //报单金额, 根据金额下单时用到
}

func (x *OrderBase) Reset() {
	*x = OrderBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBase) ProtoMessage() {}

func (x *OrderBase) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBase.ProtoReflect.Descriptor instead.
func (*OrderBase) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{2}
}

func (x *OrderBase) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *OrderBase) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *OrderBase) GetOrderType() int32 {
	if x != nil {
		return x.OrderType
	}
	return 0
}

func (x *OrderBase) GetOTCOrderMode() int32 {
	if x != nil {
		return x.OTCOrderMode
	}
	return 0
}

func (x *OrderBase) GetOrderPriceType() int32 {
	if x != nil {
		return x.OrderPriceType
	}
	return 0
}

func (x *OrderBase) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *OrderBase) GetVolume() string {
	if x != nil {
		return x.Volume
	}
	return ""
}

func (x *OrderBase) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *OrderBase) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type CreateOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID      string `protobuf:"bytes,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`            //前端传
	UserID         int64  `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`                 //用户id
	Symbol         string `protobuf:"bytes,3,opt,name=Symbol,proto3" json:"Symbol,omitempty"`                  //合约
	OrderType      int32  `protobuf:"varint,4,opt,name=OrderType,proto3" json:"OrderType,omitempty"`           //订单类型 1:otc订单 2:聚合交易订单
	OrderMode      int32  `protobuf:"varint,5,opt,name=OrderMode,proto3" json:"OrderMode,omitempty"`           //下单模式 1:数量下单 2:金额下单
	OrderPriceType int32  `protobuf:"varint,6,opt,name=OrderPriceType,proto3" json:"OrderPriceType,omitempty"` //报单价格条件 1:限价单 2:市价单
	Direction      int32  `protobuf:"varint,7,opt,name=Direction,proto3" json:"Direction,omitempty"`           //0:买 1:卖
	Volume         string `protobuf:"bytes,8,opt,name=Volume,proto3" json:"Volume,omitempty"`                  //报单数量
	Price          string `protobuf:"bytes,9,opt,name=Price,proto3" json:"Price,omitempty"`                    //报单价格
	Amount         string `protobuf:"bytes,10,opt,name=Amount,proto3" json:"Amount,omitempty"`                 //报单金额, 根据金额下单时用到
}

func (x *CreateOrderReq) Reset() {
	*x = CreateOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderReq) ProtoMessage() {}

func (x *CreateOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderReq.ProtoReflect.Descriptor instead.
func (*CreateOrderReq) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{3}
}

func (x *CreateOrderReq) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *CreateOrderReq) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *CreateOrderReq) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *CreateOrderReq) GetOrderType() int32 {
	if x != nil {
		return x.OrderType
	}
	return 0
}

func (x *CreateOrderReq) GetOrderMode() int32 {
	if x != nil {
		return x.OrderMode
	}
	return 0
}

func (x *CreateOrderReq) GetOrderPriceType() int32 {
	if x != nil {
		return x.OrderPriceType
	}
	return 0
}

func (x *CreateOrderReq) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *CreateOrderReq) GetVolume() string {
	if x != nil {
		return x.Volume
	}
	return ""
}

func (x *CreateOrderReq) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *CreateOrderReq) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type CreateOrderRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID      string `protobuf:"bytes,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	OrderLocalID   string `protobuf:"bytes,2,opt,name=OrderLocalID,proto3" json:"OrderLocalID,omitempty"`
	UserID         int64  `protobuf:"varint,3,opt,name=UserID,proto3" json:"UserID,omitempty"` //用户id
	Symbol         string `protobuf:"bytes,4,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	OrderType      int32  `protobuf:"varint,5,opt,name=OrderType,proto3" json:"OrderType,omitempty"`           //订单类型 1:otc订单 2:聚合交易订单
	OrderMode      int32  `protobuf:"varint,6,opt,name=OrderMode,proto3" json:"OrderMode,omitempty"`           //otc下单模式 1:数量下单 2:金额下单
	OrderPriceType int32  `protobuf:"varint,7,opt,name=OrderPriceType,proto3" json:"OrderPriceType,omitempty"` //报单价格条件 1:限价单 2:市价单
	Direction      int32  `protobuf:"varint,8,opt,name=direction,proto3" json:"direction,omitempty"`           //0:买 1:卖
	Volume         string `protobuf:"bytes,9,opt,name=Volume,proto3" json:"Volume,omitempty"`                  //报单数量
	Price          string `protobuf:"bytes,10,opt,name=Price,proto3" json:"Price,omitempty"`                   //报单价格
	Amount         string `protobuf:"bytes,11,opt,name=Amount,proto3" json:"Amount,omitempty"`                 //报单金额, 根据金额下单时用到
	CreateTime     string `protobuf:"bytes,12,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`         //创建时间
}

func (x *CreateOrderRsp) Reset() {
	*x = CreateOrderRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrderRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderRsp) ProtoMessage() {}

func (x *CreateOrderRsp) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderRsp.ProtoReflect.Descriptor instead.
func (*CreateOrderRsp) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{4}
}

func (x *CreateOrderRsp) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *CreateOrderRsp) GetOrderLocalID() string {
	if x != nil {
		return x.OrderLocalID
	}
	return ""
}

func (x *CreateOrderRsp) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *CreateOrderRsp) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *CreateOrderRsp) GetOrderType() int32 {
	if x != nil {
		return x.OrderType
	}
	return 0
}

func (x *CreateOrderRsp) GetOrderMode() int32 {
	if x != nil {
		return x.OrderMode
	}
	return 0
}

func (x *CreateOrderRsp) GetOrderPriceType() int32 {
	if x != nil {
		return x.OrderPriceType
	}
	return 0
}

func (x *CreateOrderRsp) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *CreateOrderRsp) GetVolume() string {
	if x != nil {
		return x.Volume
	}
	return ""
}

func (x *CreateOrderRsp) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *CreateOrderRsp) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *CreateOrderRsp) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

type OTCOrderQueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   int64 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`                     //会员ID
	Page     int64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                         //页码，从1开始
	PageSize int64 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` //每页的条数
}

func (x *OTCOrderQueryReq) Reset() {
	*x = OTCOrderQueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OTCOrderQueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OTCOrderQueryReq) ProtoMessage() {}

func (x *OTCOrderQueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OTCOrderQueryReq.ProtoReflect.Descriptor instead.
func (*OTCOrderQueryReq) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{5}
}

func (x *OTCOrderQueryReq) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *OTCOrderQueryReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *OTCOrderQueryReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type OrderQueryRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count  int64            `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Orders []*ExchangeOrder `protobuf:"bytes,2,rep,name=Orders,proto3" json:"Orders,omitempty"`
}

func (x *OrderQueryRsp) Reset() {
	*x = OrderQueryRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderQueryRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderQueryRsp) ProtoMessage() {}

func (x *OrderQueryRsp) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderQueryRsp.ProtoReflect.Descriptor instead.
func (*OrderQueryRsp) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{6}
}

func (x *OrderQueryRsp) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *OrderQueryRsp) GetOrders() []*ExchangeOrder {
	if x != nil {
		return x.Orders
	}
	return nil
}

type ExchangeOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OrderLocalId    string `protobuf:"bytes,2,opt,name=order_local_id,json=orderLocalId,proto3" json:"order_local_id,omitempty"`        // 本地报单编号/订单ID
	UserId          int64  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                           // 用户ID
	OrderType       int64  `protobuf:"varint,4,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`                  // 订单类型 1:otc订单 2:聚合交易订单
	OrderMode       int64  `protobuf:"varint,5,opt,name=order_mode,json=orderMode,proto3" json:"order_mode,omitempty"`                  //下单模式 0:按数量下单 1:按金额下单
	OrderPriceType  int64  `protobuf:"varint,6,opt,name=order_price_type,json=orderPriceType,proto3" json:"order_price_type,omitempty"` //报单价格条件 1:限价单 2:市价单
	Symbol          string `protobuf:"bytes,7,opt,name=symbol,proto3" json:"symbol,omitempty"`                                          // 交易币对 比如BTC_USDT
	Direction       int64  `protobuf:"varint,8,opt,name=direction,proto3" json:"direction,omitempty"`                                   //  订单方向
	OrderMaker      int64  `protobuf:"varint,9,opt,name=order_maker,json=orderMaker,proto3" json:"order_maker,omitempty"`               // 1:taker 2:maker
	Volume          string `protobuf:"bytes,10,opt,name=volume,proto3" json:"volume,omitempty"`                                         //decimal.Decimal  报单数量
	Amount          string `protobuf:"bytes,11,opt,name=amount,proto3" json:"amount,omitempty"`                                         // decimal.Decimal   报单金额, 根据金额下单时用到
	Price           string `protobuf:"bytes,12,opt,name=price,proto3" json:"price,omitempty"`                                           // decimal.Decimal 挂单价格
	OrderStatus     int64  `protobuf:"varint,13,opt,name=order_status,json=orderStatus,proto3" json:"order_status,omitempty"`           // 订单状态 0:已发送 1:全部成交 2:部分成交在队列 3:部分成交已撤单 4:撤单
	TradeVolume     string `protobuf:"bytes,14,opt,name=trade_volume,json=tradeVolume,proto3" json:"trade_volume,omitempty"`            // 已成交数量
	TradeAmount     string `protobuf:"bytes,15,opt,name=trade_amount,json=tradeAmount,proto3" json:"trade_amount,omitempty"`            // 已成交金额(包括手续费)
	FeeKind         int64  `protobuf:"varint,16,opt,name=fee_kind,json=feeKind,proto3" json:"fee_kind,omitempty"`                       // 订单创建时的手续费类型 1:百分比 2:绝对值
	FeeRate         string `protobuf:"bytes,17,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`                        // 订单创建时的手续费类型
	OrderCreateTime string `protobuf:"bytes,18,opt,name=order_create_time,json=orderCreateTime,proto3" json:"order_create_time,omitempty"`
	OrderModifyTime string `protobuf:"bytes,19,opt,name=order_modify_time,json=orderModifyTime,proto3" json:"order_modify_time,omitempty"`
}

func (x *ExchangeOrder) Reset() {
	*x = ExchangeOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeOrder) ProtoMessage() {}

func (x *ExchangeOrder) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeOrder.ProtoReflect.Descriptor instead.
func (*ExchangeOrder) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{7}
}

func (x *ExchangeOrder) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExchangeOrder) GetOrderLocalId() string {
	if x != nil {
		return x.OrderLocalId
	}
	return ""
}

func (x *ExchangeOrder) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ExchangeOrder) GetOrderType() int64 {
	if x != nil {
		return x.OrderType
	}
	return 0
}

func (x *ExchangeOrder) GetOrderMode() int64 {
	if x != nil {
		return x.OrderMode
	}
	return 0
}

func (x *ExchangeOrder) GetOrderPriceType() int64 {
	if x != nil {
		return x.OrderPriceType
	}
	return 0
}

func (x *ExchangeOrder) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *ExchangeOrder) GetDirection() int64 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *ExchangeOrder) GetOrderMaker() int64 {
	if x != nil {
		return x.OrderMaker
	}
	return 0
}

func (x *ExchangeOrder) GetVolume() string {
	if x != nil {
		return x.Volume
	}
	return ""
}

func (x *ExchangeOrder) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ExchangeOrder) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *ExchangeOrder) GetOrderStatus() int64 {
	if x != nil {
		return x.OrderStatus
	}
	return 0
}

func (x *ExchangeOrder) GetTradeVolume() string {
	if x != nil {
		return x.TradeVolume
	}
	return ""
}

func (x *ExchangeOrder) GetTradeAmount() string {
	if x != nil {
		return x.TradeAmount
	}
	return ""
}

func (x *ExchangeOrder) GetFeeKind() int64 {
	if x != nil {
		return x.FeeKind
	}
	return 0
}

func (x *ExchangeOrder) GetFeeRate() string {
	if x != nil {
		return x.FeeRate
	}
	return ""
}

func (x *ExchangeOrder) GetOrderCreateTime() string {
	if x != nil {
		return x.OrderCreateTime
	}
	return ""
}

func (x *ExchangeOrder) GetOrderModifyTime() string {
	if x != nil {
		return x.OrderModifyTime
	}
	return ""
}

var File_order_proto protoreflect.FileDescriptor

var file_order_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70,
	0x62, 0x22, 0xc0, 0x01, 0x0a, 0x08, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x18,
	0x0a, 0x07, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x08, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x73,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x89, 0x02,
	0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x54, 0x43,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x4f, 0x54, 0x43, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa6, 0x02, 0x0a, 0x0e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xea, 0x02, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x5b, 0x0a, 0x10, 0x4f, 0x54, 0x43, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x50, 0x0a, 0x0d,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x73, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0xda,
	0x04, 0x0a, 0x0d, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x66, 0x65, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x66, 0x65, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x65, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x2a, 0x22, 0x0a, 0x0d, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x07, 0x0a, 0x03,
	0x42, 0x55, 0x59, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x01, 0x32,
	0x9e, 0x01, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x08, 0x6f, 0x74, 0x63,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x73,
	0x70, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x4f,
	0x54, 0x43, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x54, 0x43,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e,
	0x70, 0x62, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x73, 0x70,
	0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_order_proto_rawDescOnce sync.Once
	file_order_proto_rawDescData = file_order_proto_rawDesc
)

func file_order_proto_rawDescGZIP() []byte {
	file_order_proto_rawDescOnce.Do(func() {
		file_order_proto_rawDescData = protoimpl.X.CompressGZIP(file_order_proto_rawDescData)
	})
	return file_order_proto_rawDescData
}

var file_order_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_order_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_order_proto_goTypes = []interface{}{
	(DirectionEnum)(0),       // 0: pb.DirectionEnum
	(*QuoteReq)(nil),         // 1: pb.QuoteReq
	(*QuoteRsp)(nil),         // 2: pb.QuoteRsp
	(*OrderBase)(nil),        // 3: pb.OrderBase
	(*CreateOrderReq)(nil),   // 4: pb.CreateOrderReq
	(*CreateOrderRsp)(nil),   // 5: pb.CreateOrderRsp
	(*OTCOrderQueryReq)(nil), // 6: pb.OTCOrderQueryReq
	(*OrderQueryRsp)(nil),    // 7: pb.OrderQueryRsp
	(*ExchangeOrder)(nil),    // 8: pb.ExchangeOrder
}
var file_order_proto_depIdxs = []int32{
	8, // 0: pb.OrderQueryRsp.Orders:type_name -> pb.ExchangeOrder
	1, // 1: pb.order.otcQuote:input_type -> pb.QuoteReq
	4, // 2: pb.order.createOrder:input_type -> pb.CreateOrderReq
	6, // 3: pb.order.getOTCOrder:input_type -> pb.OTCOrderQueryReq
	2, // 4: pb.order.otcQuote:output_type -> pb.QuoteRsp
	5, // 5: pb.order.createOrder:output_type -> pb.CreateOrderRsp
	7, // 6: pb.order.getOTCOrder:output_type -> pb.OrderQueryRsp
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_order_proto_init() }
func file_order_proto_init() {
	if File_order_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_order_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuoteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuoteRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrderRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OTCOrderQueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderQueryRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_order_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_order_proto_goTypes,
		DependencyIndexes: file_order_proto_depIdxs,
		EnumInfos:         file_order_proto_enumTypes,
		MessageInfos:      file_order_proto_msgTypes,
	}.Build()
	File_order_proto = out.File
	file_order_proto_rawDesc = nil
	file_order_proto_goTypes = nil
	file_order_proto_depIdxs = nil
}
