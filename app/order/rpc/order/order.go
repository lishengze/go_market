// Code generated by goctl. DO NOT EDIT!
// Source: order.proto

package order

import (
	"context"

	"bcts/app/order/rpc/types/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateOrderReq   = pb.CreateOrderReq
	CreateOrderRsp   = pb.CreateOrderRsp
	ExchangeOrder    = pb.ExchangeOrder
	OTCOrderQueryReq = pb.OTCOrderQueryReq
	OrderBase        = pb.OrderBase
	OrderQueryRsp    = pb.OrderQueryRsp
	QuoteReq         = pb.QuoteReq
	QuoteRsp         = pb.QuoteRsp

	Order interface {
		// OTC询价
		OtcQuote(ctx context.Context, in *QuoteReq, opts ...grpc.CallOption) (*QuoteRsp, error)
		// 创建订单
		CreateOrder(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CreateOrderRsp, error)
		// 查询订单
		GetOTCOrder(ctx context.Context, in *OTCOrderQueryReq, opts ...grpc.CallOption) (*OrderQueryRsp, error)
	}

	defaultOrder struct {
		cli zrpc.Client
	}
)

func NewOrder(cli zrpc.Client) Order {
	return &defaultOrder{
		cli: cli,
	}
}

// OTC询价
func (m *defaultOrder) OtcQuote(ctx context.Context, in *QuoteReq, opts ...grpc.CallOption) (*QuoteRsp, error) {
	client := pb.NewOrderClient(m.cli.Conn())
	return client.OtcQuote(ctx, in, opts...)
}

// 创建订单
func (m *defaultOrder) CreateOrder(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CreateOrderRsp, error) {
	client := pb.NewOrderClient(m.cli.Conn())
	return client.CreateOrder(ctx, in, opts...)
}

// 查询订单
func (m *defaultOrder) GetOTCOrder(ctx context.Context, in *OTCOrderQueryReq, opts ...grpc.CallOption) (*OrderQueryRsp, error) {
	client := pb.NewOrderClient(m.cli.Conn())
	return client.GetOTCOrder(ctx, in, opts...)
}
