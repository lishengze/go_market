// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/shopspring/decimal"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tradeFlowFieldNames          = builder.RawFieldNames(&TradeFlow{})
	tradeFlowRows                = strings.Join(tradeFlowFieldNames, ",")
	tradeFlowRowsExpectAutoSet   = strings.Join(stringx.Remove(tradeFlowFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	tradeFlowRowsWithPlaceHolder = strings.Join(stringx.Remove(tradeFlowFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheTradeFlowIdPrefix = "cache:tradeFlow:id:"
)

type (
	tradeFlowModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *TradeFlow) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TradeFlow, error)
		Update(ctx context.Context, session sqlx.Session, data *TradeFlow) (sql.Result, error)
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultTradeFlowModel struct {
		sqlc.CachedConn
		table string
	}

	TradeFlow struct {
		Id int64 `db:"id"` // 自增id

		UserId int64 `db:"user_id"` // 用户id

		AccountId int64 `db:"account_id"` // 账户id

		Currency string `db:"currency"` // 币种

		Source int64 `db:"source"` // 1:冻结 2:解冻 3:成交 4:线下交易 5:法币出入金  最小原子状态

		Type int64 `db:"type"` // 1:交易 2:交易手续费 3:交易修正 4:交易手续费修正  前台筛选用

		OrderLocalId string `db:"order_local_id"` // 本地报单编号

		TradeId string `db:"trade_id"` // 成交编号

		OfflineTradeId string `db:"offline_trade_id"` // 线下交易录入id

		Amount decimal.Decimal `db:"amount"` // 金额

		FlowCreateTime time.Time `db:"flow_create_time"` // 流水创建时间

	}
)

func newTradeFlowModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTradeFlowModel {
	return &defaultTradeFlowModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`trade_flow`",
	}
}

func (m *defaultTradeFlowModel) Insert(ctx context.Context, session sqlx.Session, data *TradeFlow) (sql.Result, error) {
	tradeFlowIdKey := fmt.Sprintf("%s%v", cacheTradeFlowIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tradeFlowRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.UserId, data.AccountId, data.Currency, data.Source, data.Type, data.OrderLocalId, data.TradeId, data.OfflineTradeId, data.Amount, data.FlowCreateTime)
		}
		return conn.ExecCtx(ctx, query, data.UserId, data.AccountId, data.Currency, data.Source, data.Type, data.OrderLocalId, data.TradeId, data.OfflineTradeId, data.Amount, data.FlowCreateTime)
	}, tradeFlowIdKey)
}

func (m *defaultTradeFlowModel) FindOne(ctx context.Context, id int64) (*TradeFlow, error) {
	tradeFlowIdKey := fmt.Sprintf("%s%v", cacheTradeFlowIdPrefix, id)
	var resp TradeFlow
	err := m.QueryRowCtx(ctx, &resp, tradeFlowIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tradeFlowRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTradeFlowModel) Update(ctx context.Context, session sqlx.Session, data *TradeFlow) (sql.Result, error) {
	tradeFlowIdKey := fmt.Sprintf("%s%v", cacheTradeFlowIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tradeFlowRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.UserId, data.AccountId, data.Currency, data.Source, data.Type, data.OrderLocalId, data.TradeId, data.OfflineTradeId, data.Amount, data.FlowCreateTime, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.UserId, data.AccountId, data.Currency, data.Source, data.Type, data.OrderLocalId, data.TradeId, data.OfflineTradeId, data.Amount, data.FlowCreateTime, data.Id)
	}, tradeFlowIdKey)
}

func (m *defaultTradeFlowModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	tradeFlowIdKey := fmt.Sprintf("%s%v", cacheTradeFlowIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, tradeFlowIdKey)
	return err
}

func (m *defaultTradeFlowModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheTradeFlowIdPrefix, primary)
}
func (m *defaultTradeFlowModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tradeFlowRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTradeFlowModel) tableName() string {
	return m.table
}
