// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userGroupFieldNames          = builder.RawFieldNames(&UserGroup{})
	userGroupRows                = strings.Join(userGroupFieldNames, ",")
	userGroupRowsExpectAutoSet   = strings.Join(stringx.Remove(userGroupFieldNames, "`group_id`", "`create_time`", "`update_time`"), ",")
	userGroupRowsWithPlaceHolder = strings.Join(stringx.Remove(userGroupFieldNames, "`group_id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheUserGroupGroupIdPrefix   = "cache:userGroup:groupId:"
	cacheUserGroupGroupCodePrefix = "cache:userGroup:groupCode:"
)

type (
	userGroupModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *UserGroup) (sql.Result, error)
		FindOne(ctx context.Context, groupId int64) (*UserGroup, error)
		FindOneByGroupCode(ctx context.Context, groupCode string) (*UserGroup, error)
		Update(ctx context.Context, session sqlx.Session, data *UserGroup) (sql.Result, error)
		Delete(ctx context.Context, session sqlx.Session, groupId int64) error
	}

	defaultUserGroupModel struct {
		sqlc.CachedConn
		table string
	}

	UserGroup struct {
		GroupId int64 `db:"group_id"`

		GroupCode string `db:"group_code"`

		Name string `db:"name"`

		Memo sql.NullString `db:"memo"`
	}
)

func newUserGroupModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserGroupModel {
	return &defaultUserGroupModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`user_group`",
	}
}

func (m *defaultUserGroupModel) Insert(ctx context.Context, session sqlx.Session, data *UserGroup) (sql.Result, error) {
	userGroupGroupCodeKey := fmt.Sprintf("%s%v", cacheUserGroupGroupCodePrefix, data.GroupCode)
	userGroupGroupIdKey := fmt.Sprintf("%s%v", cacheUserGroupGroupIdPrefix, data.GroupId)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, userGroupRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.GroupCode, data.Name, data.Memo)
		}
		return conn.ExecCtx(ctx, query, data.GroupCode, data.Name, data.Memo)
	}, userGroupGroupCodeKey, userGroupGroupIdKey)
}

func (m *defaultUserGroupModel) FindOne(ctx context.Context, groupId int64) (*UserGroup, error) {
	userGroupGroupIdKey := fmt.Sprintf("%s%v", cacheUserGroupGroupIdPrefix, groupId)
	var resp UserGroup
	err := m.QueryRowCtx(ctx, &resp, userGroupGroupIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `group_id` = ? limit 1", userGroupRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, groupId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserGroupModel) FindOneByGroupCode(ctx context.Context, groupCode string) (*UserGroup, error) {
	userGroupGroupCodeKey := fmt.Sprintf("%s%v", cacheUserGroupGroupCodePrefix, groupCode)
	var resp UserGroup
	err := m.QueryRowIndexCtx(ctx, &resp, userGroupGroupCodeKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `group_code` = ? limit 1", userGroupRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, groupCode); err != nil {
			return nil, err
		}
		return resp.GroupId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserGroupModel) Update(ctx context.Context, session sqlx.Session, data *UserGroup) (sql.Result, error) {
	userGroupGroupCodeKey := fmt.Sprintf("%s%v", cacheUserGroupGroupCodePrefix, data.GroupCode)
	userGroupGroupIdKey := fmt.Sprintf("%s%v", cacheUserGroupGroupIdPrefix, data.GroupId)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `group_id` = ?", m.table, userGroupRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.GroupCode, data.Name, data.Memo, data.GroupId)
		}
		return conn.ExecCtx(ctx, query, data.GroupCode, data.Name, data.Memo, data.GroupId)
	}, userGroupGroupCodeKey, userGroupGroupIdKey)
}

func (m *defaultUserGroupModel) Delete(ctx context.Context, session sqlx.Session, groupId int64) error {
	data, err := m.FindOne(ctx, groupId)
	if err != nil {
		return err
	}

	userGroupGroupCodeKey := fmt.Sprintf("%s%v", cacheUserGroupGroupCodePrefix, data.GroupCode)
	userGroupGroupIdKey := fmt.Sprintf("%s%v", cacheUserGroupGroupIdPrefix, groupId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `group_id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, groupId)
		}
		return conn.ExecCtx(ctx, query, groupId)
	}, userGroupGroupCodeKey, userGroupGroupIdKey)
	return err
}

func (m *defaultUserGroupModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheUserGroupGroupIdPrefix, primary)
}
func (m *defaultUserGroupModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `group_id` = ? limit 1", userGroupRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserGroupModel) tableName() string {
	return m.table
}
