// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/shopspring/decimal"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	accountFieldNames          = builder.RawFieldNames(&Account{})
	accountRows                = strings.Join(accountFieldNames, ",")
	accountRowsExpectAutoSet   = strings.Join(stringx.Remove(accountFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	accountRowsWithPlaceHolder = strings.Join(stringx.Remove(accountFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheAccountIdPrefix = "cache:account:id:"
)

type (
	accountModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *Account) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Account, error)
		Update(ctx context.Context, session sqlx.Session, data *Account) (sql.Result, error)
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultAccountModel struct {
		sqlc.CachedConn
		table string
	}

	Account struct {
		Id int64 `db:"id"` // 自增id

		UserId int64 `db:"user_id"` // 用户id

		Currency string `db:"currency"` // 币种

		CurrencyId string `db:"currency_id"` // 币种id

		Frozen decimal.Decimal `db:"frozen"` // 冻结

		Balance decimal.Decimal `db:"balance"` // 总额

		CostPrice string `db:"cost_price"` // 成本价

	}
)

func newAccountModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAccountModel {
	return &defaultAccountModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`account`",
	}
}

func (m *defaultAccountModel) Insert(ctx context.Context, session sqlx.Session, data *Account) (sql.Result, error) {
	accountIdKey := fmt.Sprintf("%s%v", cacheAccountIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, accountRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.UserId, data.Currency, data.CurrencyId, data.Frozen, data.Balance, data.CostPrice)
		}
		return conn.ExecCtx(ctx, query, data.UserId, data.Currency, data.CurrencyId, data.Frozen, data.Balance, data.CostPrice)
	}, accountIdKey)
}

func (m *defaultAccountModel) FindOne(ctx context.Context, id int64) (*Account, error) {
	accountIdKey := fmt.Sprintf("%s%v", cacheAccountIdPrefix, id)
	var resp Account
	err := m.QueryRowCtx(ctx, &resp, accountIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", accountRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAccountModel) Update(ctx context.Context, session sqlx.Session, data *Account) (sql.Result, error) {
	accountIdKey := fmt.Sprintf("%s%v", cacheAccountIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, accountRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.UserId, data.Currency, data.CurrencyId, data.Frozen, data.Balance, data.CostPrice, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.UserId, data.Currency, data.CurrencyId, data.Frozen, data.Balance, data.CostPrice, data.Id)
	}, accountIdKey)
}

func (m *defaultAccountModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	accountIdKey := fmt.Sprintf("%s%v", cacheAccountIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, accountIdKey)
	return err
}

func (m *defaultAccountModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAccountIdPrefix, primary)
}
func (m *defaultAccountModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", accountRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAccountModel) tableName() string {
	return m.table
}
