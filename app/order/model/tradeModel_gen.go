// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/shopspring/decimal"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tradeFieldNames          = builder.RawFieldNames(&Trade{})
	tradeRows                = strings.Join(tradeFieldNames, ",")
	tradeRowsExpectAutoSet   = strings.Join(stringx.Remove(tradeFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	tradeRowsWithPlaceHolder = strings.Join(stringx.Remove(tradeFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheTradeIdPrefix = "cache:trade:id:"
)

type (
	tradeModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *Trade) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Trade, error)
		Update(ctx context.Context, session sqlx.Session, data *Trade) (sql.Result, error)
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultTradeModel struct {
		sqlc.CachedConn
		table string
	}

	Trade struct {
		Id int64 `db:"id"` // 自增id

		UserId int64 `db:"user_id"` // 用户id

		OrderLocalId string `db:"order_local_id"` // 本地报单编号

		TradeId string `db:"trade_id"` // 成交编号

		OrderType int64 `db:"order_type"` // 订单类型 1:otc订单 2:聚合交易订单

		OrderMode int64 `db:"order_mode"` // 下单模式 0:按数量询价/下单 1:按金额询价/下单

		OrderPriceType int64 `db:"order_price_type"` // 报单价格条件 1:限价单 2:市价单

		Symbol string `db:"symbol"` // 币对 BTC_USDT

		BaseCurrency string `db:"base_currency"` // 基础币种 USDT

		TargetCurrency string `db:"target_currency"` // 目标币种 BTC

		Direction int64 `db:"direction"` // 0:买 1:卖

		Price decimal.Decimal `db:"price"` // 报单价格

		Volume decimal.Decimal `db:"volume"` // 报单数量，冗余order.volume

		Amount decimal.Decimal `db:"amount"` // 报单金额, 根据金额下单时用到，冗余order.amount

		OrderMaker int64 `db:"order_maker"` // 1:taker 2:maker

		TradeVolume decimal.Decimal `db:"trade_volume"` // 已成交数量

		TradeAmount decimal.Decimal `db:"trade_amount"` // 已成交金额(包括手续费)

		FeeKind int64 `db:"fee_kind"` // 订单创建时的手续费类型 1:百分比 2:绝对值

		FeeRate decimal.Decimal `db:"fee_rate"` // 订单创建时的手续费类型

		Source int64 `db:"source"` // 成交来源 1:otc 2:聚合交易 3:线下交易录入

		OfflineTradeId string `db:"offline_trade_id"` // 线下交易录入id

		Fee decimal.Decimal `db:"fee"` // 成交手续费

		TurnOver decimal.Decimal `db:"turn_over"` // 成交金额

		BaseCurrencyPrice decimal.Decimal `db:"base_currency_price"` // pms, 基础币种成交时的价格

		TargetCurrencyPrice decimal.Decimal `db:"target_currency_price"` // pms, 目标币种成交时的价格

		TradeTime time.Time `db:"trade_time"` // 成交时间

	}
)

func newTradeModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTradeModel {
	return &defaultTradeModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`trade`",
	}
}

func (m *defaultTradeModel) Insert(ctx context.Context, session sqlx.Session, data *Trade) (sql.Result, error) {
	tradeIdKey := fmt.Sprintf("%s%v", cacheTradeIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tradeRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.UserId, data.OrderLocalId, data.TradeId, data.OrderType, data.OrderMode, data.OrderPriceType, data.Symbol, data.BaseCurrency, data.TargetCurrency, data.Direction, data.Price, data.Volume, data.Amount, data.OrderMaker, data.TradeVolume, data.TradeAmount, data.FeeKind, data.FeeRate, data.Source, data.OfflineTradeId, data.Fee, data.TurnOver, data.BaseCurrencyPrice, data.TargetCurrencyPrice, data.TradeTime)
		}
		return conn.ExecCtx(ctx, query, data.UserId, data.OrderLocalId, data.TradeId, data.OrderType, data.OrderMode, data.OrderPriceType, data.Symbol, data.BaseCurrency, data.TargetCurrency, data.Direction, data.Price, data.Volume, data.Amount, data.OrderMaker, data.TradeVolume, data.TradeAmount, data.FeeKind, data.FeeRate, data.Source, data.OfflineTradeId, data.Fee, data.TurnOver, data.BaseCurrencyPrice, data.TargetCurrencyPrice, data.TradeTime)
	}, tradeIdKey)
}

func (m *defaultTradeModel) FindOne(ctx context.Context, id int64) (*Trade, error) {
	tradeIdKey := fmt.Sprintf("%s%v", cacheTradeIdPrefix, id)
	var resp Trade
	err := m.QueryRowCtx(ctx, &resp, tradeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tradeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTradeModel) Update(ctx context.Context, session sqlx.Session, data *Trade) (sql.Result, error) {
	tradeIdKey := fmt.Sprintf("%s%v", cacheTradeIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tradeRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.UserId, data.OrderLocalId, data.TradeId, data.OrderType, data.OrderMode, data.OrderPriceType, data.Symbol, data.BaseCurrency, data.TargetCurrency, data.Direction, data.Price, data.Volume, data.Amount, data.OrderMaker, data.TradeVolume, data.TradeAmount, data.FeeKind, data.FeeRate, data.Source, data.OfflineTradeId, data.Fee, data.TurnOver, data.BaseCurrencyPrice, data.TargetCurrencyPrice, data.TradeTime, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.UserId, data.OrderLocalId, data.TradeId, data.OrderType, data.OrderMode, data.OrderPriceType, data.Symbol, data.BaseCurrency, data.TargetCurrency, data.Direction, data.Price, data.Volume, data.Amount, data.OrderMaker, data.TradeVolume, data.TradeAmount, data.FeeKind, data.FeeRate, data.Source, data.OfflineTradeId, data.Fee, data.TurnOver, data.BaseCurrencyPrice, data.TargetCurrencyPrice, data.TradeTime, data.Id)
	}, tradeIdKey)
}

func (m *defaultTradeModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	tradeIdKey := fmt.Sprintf("%s%v", cacheTradeIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, tradeIdKey)
	return err
}

func (m *defaultTradeModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheTradeIdPrefix, primary)
}
func (m *defaultTradeModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tradeRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTradeModel) tableName() string {
	return m.table
}
