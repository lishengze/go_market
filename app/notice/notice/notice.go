// Code generated by goctl. DO NOT EDIT!
// Source: notice.proto

package notice

import (
	"context"

	"bcts/app/notice/api/v1"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ActionCardBtns      = v1.ActionCardBtns
	ActionCardMsg       = v1.ActionCardMsg
	ActionCardSingleMsg = v1.ActionCardSingleMsg
	AlertSendReq        = v1.AlertSendReq
	AlertSendResp       = v1.AlertSendResp
	FeedCardLink        = v1.FeedCardLink
	FeedCardMsg         = v1.FeedCardMsg
	LinkMsg             = v1.LinkMsg
	MarkdownMsg         = v1.MarkdownMsg
	NoticeSendReq       = v1.NoticeSendReq
	NoticeSendResp      = v1.NoticeSendResp
	TextMsg             = v1.TextMsg

	Notice interface {
		Send(ctx context.Context, in *NoticeSendReq, opts ...grpc.CallOption) (*NoticeSendResp, error)
		Alert(ctx context.Context, in *AlertSendReq, opts ...grpc.CallOption) (*AlertSendResp, error)
	}

	defaultNotice struct {
		cli zrpc.Client
	}
)

func NewNotice(cli zrpc.Client) Notice {
	return &defaultNotice{
		cli: cli,
	}
}

func (m *defaultNotice) Send(ctx context.Context, in *NoticeSendReq, opts ...grpc.CallOption) (*NoticeSendResp, error) {
	client := v1.NewNoticeClient(m.cli.Conn())
	return client.Send(ctx, in, opts...)
}

func (m *defaultNotice) Alert(ctx context.Context, in *AlertSendReq, opts ...grpc.CallOption) (*AlertSendResp, error) {
	client := v1.NewNoticeClient(m.cli.Conn())
	return client.Alert(ctx, in, opts...)
}
